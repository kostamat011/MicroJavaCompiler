INFO  00:00:17,814 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:00:17,833 - #2 program
INFO  00:00:17,833 - #49 test302
INFO  00:00:17,834 - #7 const
INFO  00:00:17,834 - #49 int
INFO  00:00:17,834 - #49 jedan
INFO  00:00:17,834 - #27 =
INFO  00:00:17,834 - #52 1
INFO  00:00:17,834 - #38 ;
INFO  00:00:17,835 - #44 {
INFO  00:00:17,835 - #14 void
INFO  00:00:17,835 - #49 main
INFO  00:00:17,835 - #40 (
INFO  00:00:17,835 - #41 )
INFO  00:00:17,836 - #49 bool
INFO  00:00:17,836 - #49 x
INFO  00:00:17,836 - #38 ;
INFO  00:00:17,836 - #49 int
INFO  00:00:17,836 - #49 y
INFO  00:00:17,836 - #42 [
INFO  00:00:17,837 - #43 ]
INFO  00:00:17,837 - #38 ;
INFO  00:00:17,837 - #44 {
INFO  00:00:17,847 - #49 y
INFO  00:00:17,847 - #27 =
INFO  00:00:17,847 - #11 new
INFO  00:00:17,847 - #49 int
INFO  00:00:17,847 - #42 [
INFO  00:00:17,847 - #52 5
INFO  00:00:17,847 - #43 ]
INFO  00:00:17,847 - #38 ;
INFO  00:00:17,847 - #49 y
INFO  00:00:17,848 - #42 [
INFO  00:00:17,848 - #52 0
INFO  00:00:17,848 - #43 ]
INFO  00:00:17,848 - #27 =
INFO  00:00:17,848 - #52 1
INFO  00:00:17,848 - #38 ;
INFO  00:00:17,848 - #49 y
INFO  00:00:17,848 - #42 [
INFO  00:00:17,848 - #52 1
INFO  00:00:17,848 - #43 ]
INFO  00:00:17,848 - #27 =
INFO  00:00:17,848 - #52 2
INFO  00:00:17,848 - #38 ;
INFO  00:00:17,848 - #49 y
INFO  00:00:17,848 - #42 [
INFO  00:00:17,848 - #52 2
INFO  00:00:17,848 - #43 ]
INFO  00:00:17,848 - #27 =
INFO  00:00:17,848 - #52 3
INFO  00:00:17,848 - #38 ;
INFO  00:00:17,848 - #49 x
INFO  00:00:17,848 - #27 =
INFO  00:00:17,849 - #50 true
INFO  00:00:17,849 - #38 ;
INFO  00:00:17,849 - #5 if
INFO  00:00:17,849 - #40 (
INFO  00:00:17,849 - #49 x
INFO  00:00:17,849 - #34 &&
INFO  00:00:17,849 - #50 true
INFO  00:00:17,849 - #41 )
INFO  00:00:17,849 - #44 {
INFO  00:00:17,849 - #12 print
INFO  00:00:17,849 - #40 (
INFO  00:00:17,849 - #49 y
INFO  00:00:17,849 - #42 [
INFO  00:00:17,849 - #52 1
INFO  00:00:17,849 - #43 ]
INFO  00:00:17,849 - #41 )
INFO  00:00:17,850 - #38 ;
INFO  00:00:17,850 - #5 if
INFO  00:00:17,850 - #40 (
INFO  00:00:17,850 - #49 y
INFO  00:00:17,850 - #42 [
INFO  00:00:17,850 - #52 2
INFO  00:00:17,850 - #43 ]
INFO  00:00:17,850 - #30 >
INFO  00:00:17,850 - #49 y
INFO  00:00:17,851 - #42 [
INFO  00:00:17,851 - #52 1
INFO  00:00:17,851 - #43 ]
INFO  00:00:17,851 - #41 )
INFO  00:00:17,851 - #12 print
INFO  00:00:17,851 - #40 (
INFO  00:00:17,851 - #49 y
INFO  00:00:17,851 - #42 [
INFO  00:00:17,851 - #52 2
INFO  00:00:17,851 - #43 ]
INFO  00:00:17,851 - #41 )
INFO  00:00:17,851 - #38 ;
INFO  00:00:17,851 - #45 }
INFO  00:00:17,851 - #12 print
INFO  00:00:17,851 - #40 (
INFO  00:00:17,851 - #52 3
INFO  00:00:17,851 - #41 )
INFO  00:00:17,851 - #38 ;
INFO  00:00:17,851 - #15 return
INFO  00:00:17,851 - #38 ;
INFO  00:00:17,851 - #45 }
INFO  00:00:17,852 - #45 }
INFO  00:00:17,855 - Line 12: Using local variable name: y
INFO  00:00:17,855 - Line 13: Using local variable name: y
INFO  00:00:17,855 - Line 13: Access to array element detected. Array name: y
INFO  00:00:17,855 - Line 14: Using local variable name: y
INFO  00:00:17,855 - Line 14: Access to array element detected. Array name: y
INFO  00:00:17,855 - Line 15: Using local variable name: y
INFO  00:00:17,855 - Line 15: Access to array element detected. Array name: y
INFO  00:00:17,855 - Line 16: Using local variable name: x
INFO  00:00:17,855 - Line 17: Using local variable name: x
INFO  00:00:17,855 - Line 18: Using local variable name: y
INFO  00:00:17,855 - Line 18: Access to array element detected. Array name: y
INFO  00:00:17,855 - Line 19: Using local variable name: y
INFO  00:00:17,855 - Line 19: Access to array element detected. Array name: y
INFO  00:00:17,855 - Line 19: Using local variable name: y
INFO  00:00:17,855 - Line 19: Access to array element detected. Array name: y
INFO  00:00:17,855 - Line 19: Using local variable name: y
INFO  00:00:17,855 - Line 19: Access to array element detected. Array name: y
INFO  00:00:17,856 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:23:06,900 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:23:06,918 - #2 program
INFO  00:23:06,918 - #49 test302
INFO  00:23:06,918 - #7 const
INFO  00:23:06,918 - #49 int
INFO  00:23:06,918 - #49 jedan
INFO  00:23:06,918 - #27 =
INFO  00:23:06,918 - #52 1
INFO  00:23:06,918 - #38 ;
INFO  00:23:06,919 - #44 {
INFO  00:23:06,919 - #14 void
INFO  00:23:06,919 - #49 main
INFO  00:23:06,919 - #40 (
INFO  00:23:06,919 - #41 )
INFO  00:23:06,920 - #49 bool
INFO  00:23:06,920 - #49 x
INFO  00:23:06,920 - #38 ;
INFO  00:23:06,921 - #49 int
INFO  00:23:06,921 - #49 y
INFO  00:23:06,921 - #42 [
INFO  00:23:06,921 - #43 ]
INFO  00:23:06,921 - #38 ;
INFO  00:23:06,921 - #44 {
INFO  00:23:06,921 - #49 y
INFO  00:23:06,921 - #27 =
INFO  00:23:06,922 - #11 new
INFO  00:23:06,922 - #49 int
INFO  00:23:06,922 - #42 [
INFO  00:23:06,922 - #52 5
INFO  00:23:06,922 - #43 ]
INFO  00:23:06,922 - #38 ;
INFO  00:23:06,922 - #49 y
INFO  00:23:06,922 - #42 [
INFO  00:23:06,922 - #52 0
INFO  00:23:06,922 - #43 ]
INFO  00:23:06,922 - #27 =
INFO  00:23:06,922 - #52 1
INFO  00:23:06,922 - #38 ;
INFO  00:23:06,922 - #49 y
INFO  00:23:06,923 - #42 [
INFO  00:23:06,923 - #52 1
INFO  00:23:06,923 - #43 ]
INFO  00:23:06,923 - #27 =
INFO  00:23:06,923 - #52 2
INFO  00:23:06,923 - #38 ;
INFO  00:23:06,923 - #49 y
INFO  00:23:06,923 - #42 [
INFO  00:23:06,923 - #52 2
INFO  00:23:06,923 - #43 ]
INFO  00:23:06,923 - #27 =
INFO  00:23:06,923 - #52 3
INFO  00:23:06,923 - #38 ;
INFO  00:23:06,923 - #49 x
INFO  00:23:06,923 - #27 =
INFO  00:23:06,923 - #50 true
INFO  00:23:06,923 - #38 ;
INFO  00:23:06,923 - #5 if
INFO  00:23:06,923 - #40 (
INFO  00:23:06,923 - #49 x
INFO  00:23:06,923 - #34 &&
INFO  00:23:06,924 - #50 true
INFO  00:23:06,924 - #41 )
INFO  00:23:06,924 - #44 {
INFO  00:23:06,924 - #12 print
INFO  00:23:06,924 - #40 (
INFO  00:23:06,924 - #49 y
INFO  00:23:06,924 - #42 [
INFO  00:23:06,924 - #52 1
INFO  00:23:06,924 - #43 ]
INFO  00:23:06,924 - #41 )
INFO  00:23:06,925 - #38 ;
INFO  00:23:06,925 - #5 if
INFO  00:23:06,925 - #40 (
INFO  00:23:06,925 - #49 y
INFO  00:23:06,925 - #42 [
INFO  00:23:06,925 - #52 2
INFO  00:23:06,925 - #43 ]
INFO  00:23:06,925 - #30 >
INFO  00:23:06,925 - #49 y
INFO  00:23:06,925 - #42 [
INFO  00:23:06,925 - #52 1
INFO  00:23:06,925 - #43 ]
INFO  00:23:06,926 - #41 )
INFO  00:23:06,926 - #12 print
INFO  00:23:06,926 - #40 (
INFO  00:23:06,926 - #49 y
INFO  00:23:06,926 - #42 [
INFO  00:23:06,926 - #52 2
INFO  00:23:06,926 - #43 ]
INFO  00:23:06,926 - #41 )
INFO  00:23:06,926 - #38 ;
INFO  00:23:06,926 - #45 }
INFO  00:23:06,926 - #12 print
INFO  00:23:06,926 - #40 (
INFO  00:23:06,926 - #52 3
INFO  00:23:06,926 - #41 )
INFO  00:23:06,926 - #38 ;
INFO  00:23:06,926 - #15 return
INFO  00:23:06,926 - #38 ;
INFO  00:23:06,926 - #45 }
INFO  00:23:06,926 - #45 }
INFO  00:23:06,930 - Line 12: Using local variable name: y
INFO  00:23:06,930 - Line 13: Using local variable name: y
INFO  00:23:06,930 - Line 13: Access to array element detected. Array name: y
INFO  00:23:06,930 - Line 14: Using local variable name: y
INFO  00:23:06,930 - Line 14: Access to array element detected. Array name: y
INFO  00:23:06,930 - Line 15: Using local variable name: y
INFO  00:23:06,930 - Line 15: Access to array element detected. Array name: y
INFO  00:23:06,930 - Line 16: Using local variable name: x
INFO  00:23:06,931 - Line 17: Using local variable name: x
INFO  00:23:06,931 - Line 18: Using local variable name: y
INFO  00:23:06,931 - Line 18: Access to array element detected. Array name: y
INFO  00:23:06,931 - Line 19: Using local variable name: y
INFO  00:23:06,931 - Line 19: Access to array element detected. Array name: y
INFO  00:23:06,931 - Line 19: Using local variable name: y
INFO  00:23:06,931 - Line 19: Access to array element detected. Array name: y
INFO  00:23:06,931 - Line 19: Using local variable name: y
INFO  00:23:06,931 - Line 19: Access to array element detected. Array name: y
INFO  00:23:06,932 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:23:27,984 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:23:28,003 - #2 program
INFO  00:23:28,003 - #49 test302
INFO  00:23:28,003 - #7 const
INFO  00:23:28,003 - #49 int
INFO  00:23:28,003 - #49 jedan
INFO  00:23:28,004 - #27 =
INFO  00:23:28,004 - #52 1
INFO  00:23:28,004 - #38 ;
INFO  00:23:28,004 - #44 {
INFO  00:23:28,004 - #14 void
INFO  00:23:28,004 - #49 main
INFO  00:23:28,004 - #40 (
INFO  00:23:28,004 - #41 )
INFO  00:23:28,004 - #49 bool
INFO  00:23:28,004 - #49 x
INFO  00:23:28,004 - #38 ;
INFO  00:23:28,005 - #49 int
INFO  00:23:28,005 - #49 y
INFO  00:23:28,005 - #42 [
INFO  00:23:28,005 - #43 ]
INFO  00:23:28,005 - #38 ;
INFO  00:23:28,005 - #44 {
INFO  00:23:28,005 - #49 y
INFO  00:23:28,005 - #27 =
INFO  00:23:28,005 - #11 new
INFO  00:23:28,005 - #49 int
INFO  00:23:28,006 - #42 [
INFO  00:23:28,006 - #52 5
INFO  00:23:28,006 - #43 ]
INFO  00:23:28,006 - #38 ;
INFO  00:23:28,006 - #49 y
INFO  00:23:28,006 - #42 [
INFO  00:23:28,006 - #52 0
INFO  00:23:28,006 - #43 ]
INFO  00:23:28,006 - #27 =
INFO  00:23:28,006 - #52 1
INFO  00:23:28,006 - #38 ;
INFO  00:23:28,006 - #49 y
INFO  00:23:28,006 - #42 [
INFO  00:23:28,006 - #52 1
INFO  00:23:28,006 - #43 ]
INFO  00:23:28,006 - #27 =
INFO  00:23:28,007 - #52 2
INFO  00:23:28,007 - #38 ;
INFO  00:23:28,007 - #49 y
INFO  00:23:28,007 - #42 [
INFO  00:23:28,007 - #52 2
INFO  00:23:28,007 - #43 ]
INFO  00:23:28,007 - #27 =
INFO  00:23:28,007 - #52 3
INFO  00:23:28,007 - #38 ;
INFO  00:23:28,007 - #49 x
INFO  00:23:28,007 - #27 =
INFO  00:23:28,007 - #50 true
INFO  00:23:28,007 - #38 ;
INFO  00:23:28,007 - #5 if
INFO  00:23:28,007 - #40 (
INFO  00:23:28,007 - #49 x
INFO  00:23:28,007 - #34 &&
INFO  00:23:28,007 - #50 true
INFO  00:23:28,007 - #41 )
INFO  00:23:28,007 - #44 {
INFO  00:23:28,008 - #12 print
INFO  00:23:28,008 - #40 (
INFO  00:23:28,008 - #49 y
INFO  00:23:28,008 - #42 [
INFO  00:23:28,008 - #52 1
INFO  00:23:28,008 - #43 ]
INFO  00:23:28,008 - #41 )
INFO  00:23:28,008 - #38 ;
INFO  00:23:28,008 - #12 print
INFO  00:23:28,008 - #40 (
INFO  00:23:28,008 - #49 y
INFO  00:23:28,008 - #42 [
INFO  00:23:28,008 - #52 2
INFO  00:23:28,008 - #43 ]
INFO  00:23:28,008 - #41 )
INFO  00:23:28,008 - #38 ;
INFO  00:23:28,008 - #45 }
INFO  00:23:28,008 - #12 print
INFO  00:23:28,008 - #40 (
INFO  00:23:28,008 - #52 3
INFO  00:23:28,008 - #41 )
INFO  00:23:28,009 - #38 ;
INFO  00:23:28,009 - #15 return
INFO  00:23:28,009 - #38 ;
INFO  00:23:28,009 - #45 }
INFO  00:23:28,009 - #45 }
INFO  00:23:28,012 - Line 12: Using local variable name: y
INFO  00:23:28,012 - Line 13: Using local variable name: y
INFO  00:23:28,012 - Line 13: Access to array element detected. Array name: y
INFO  00:23:28,012 - Line 14: Using local variable name: y
INFO  00:23:28,012 - Line 14: Access to array element detected. Array name: y
INFO  00:23:28,013 - Line 15: Using local variable name: y
INFO  00:23:28,013 - Line 15: Access to array element detected. Array name: y
INFO  00:23:28,013 - Line 16: Using local variable name: x
INFO  00:23:28,013 - Line 17: Using local variable name: x
INFO  00:23:28,013 - Line 18: Using local variable name: y
INFO  00:23:28,013 - Line 18: Access to array element detected. Array name: y
INFO  00:23:28,013 - Line 19: Using local variable name: y
INFO  00:23:28,013 - Line 19: Access to array element detected. Array name: y
INFO  00:23:28,014 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:24:22,431 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:24:22,449 - #2 program
INFO  00:24:22,449 - #49 test302
INFO  00:24:22,449 - #7 const
INFO  00:24:22,449 - #49 int
INFO  00:24:22,449 - #49 jedan
INFO  00:24:22,449 - #27 =
INFO  00:24:22,449 - #52 1
INFO  00:24:22,450 - #38 ;
INFO  00:24:22,450 - #44 {
INFO  00:24:22,450 - #14 void
INFO  00:24:22,450 - #49 main
INFO  00:24:22,451 - #40 (
INFO  00:24:22,451 - #41 )
INFO  00:24:22,451 - #49 bool
INFO  00:24:22,451 - #49 x
INFO  00:24:22,451 - #38 ;
INFO  00:24:22,452 - #49 int
INFO  00:24:22,452 - #49 y
INFO  00:24:22,452 - #42 [
INFO  00:24:22,452 - #43 ]
INFO  00:24:22,452 - #38 ;
INFO  00:24:22,452 - #44 {
INFO  00:24:22,452 - #49 y
INFO  00:24:22,452 - #27 =
INFO  00:24:22,453 - #11 new
INFO  00:24:22,453 - #49 int
INFO  00:24:22,453 - #42 [
INFO  00:24:22,453 - #52 5
INFO  00:24:22,453 - #43 ]
INFO  00:24:22,453 - #38 ;
INFO  00:24:22,453 - #49 y
INFO  00:24:22,453 - #42 [
INFO  00:24:22,453 - #52 0
INFO  00:24:22,453 - #43 ]
INFO  00:24:22,453 - #27 =
INFO  00:24:22,453 - #52 1
INFO  00:24:22,453 - #38 ;
INFO  00:24:22,453 - #49 y
INFO  00:24:22,453 - #42 [
INFO  00:24:22,454 - #52 1
INFO  00:24:22,454 - #43 ]
INFO  00:24:22,454 - #27 =
INFO  00:24:22,454 - #52 2
INFO  00:24:22,454 - #38 ;
INFO  00:24:22,454 - #49 y
INFO  00:24:22,454 - #42 [
INFO  00:24:22,454 - #52 2
INFO  00:24:22,454 - #43 ]
INFO  00:24:22,454 - #27 =
INFO  00:24:22,454 - #52 3
INFO  00:24:22,454 - #38 ;
INFO  00:24:22,454 - #49 x
INFO  00:24:22,454 - #27 =
INFO  00:24:22,454 - #50 true
INFO  00:24:22,454 - #38 ;
INFO  00:24:22,454 - #5 if
INFO  00:24:22,454 - #40 (
INFO  00:24:22,454 - #49 x
INFO  00:24:22,454 - #34 &&
INFO  00:24:22,454 - #50 true
INFO  00:24:22,454 - #41 )
INFO  00:24:22,455 - #44 {
INFO  00:24:22,455 - #12 print
INFO  00:24:22,455 - #40 (
INFO  00:24:22,455 - #49 y
INFO  00:24:22,455 - #42 [
INFO  00:24:22,455 - #52 1
INFO  00:24:22,455 - #43 ]
INFO  00:24:22,455 - #41 )
INFO  00:24:22,455 - #38 ;
INFO  00:24:22,455 - #5 if
INFO  00:24:22,455 - #40 (
INFO  00:24:22,455 - #49 x
INFO  00:24:22,455 - #34 &&
INFO  00:24:22,455 - #50 true
INFO  00:24:22,455 - #41 )
INFO  00:24:22,455 - #44 {
INFO  00:24:22,455 - #12 print
INFO  00:24:22,455 - #40 (
INFO  00:24:22,456 - #51 a
INFO  00:24:22,456 - #41 )
INFO  00:24:22,456 - #38 ;
INFO  00:24:22,456 - #45 }
INFO  00:24:22,456 - #6 else
INFO  00:24:22,456 - #44 {
INFO  00:24:22,456 - #12 print
INFO  00:24:22,456 - #40 (
INFO  00:24:22,456 - #51 b
INFO  00:24:22,456 - #41 )
INFO  00:24:22,456 - #38 ;
INFO  00:24:22,456 - #45 }
INFO  00:24:22,456 - #45 }
INFO  00:24:22,456 - #12 print
INFO  00:24:22,456 - #40 (
INFO  00:24:22,456 - #52 3
INFO  00:24:22,456 - #41 )
INFO  00:24:22,456 - #38 ;
INFO  00:24:22,456 - #15 return
INFO  00:24:22,456 - #38 ;
INFO  00:24:22,457 - #45 }
INFO  00:24:22,457 - #45 }
INFO  00:24:22,460 - Line 12: Using local variable name: y
INFO  00:24:22,460 - Line 13: Using local variable name: y
INFO  00:24:22,460 - Line 13: Access to array element detected. Array name: y
INFO  00:24:22,460 - Line 14: Using local variable name: y
INFO  00:24:22,460 - Line 14: Access to array element detected. Array name: y
INFO  00:24:22,460 - Line 15: Using local variable name: y
INFO  00:24:22,460 - Line 15: Access to array element detected. Array name: y
INFO  00:24:22,460 - Line 16: Using local variable name: x
INFO  00:24:22,460 - Line 17: Using local variable name: x
INFO  00:24:22,460 - Line 18: Using local variable name: y
INFO  00:24:22,460 - Line 18: Access to array element detected. Array name: y
INFO  00:24:22,461 - Line 19: Using local variable name: x
INFO  00:24:22,462 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:24:50,304 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:24:50,321 - #2 program
INFO  00:24:50,321 - #49 MJProgram
INFO  00:24:50,321 - #49 int
INFO  00:24:50,322 - #49 x
INFO  00:24:50,322 - #38 ;
INFO  00:24:50,322 - #49 int
INFO  00:24:50,323 - #49 y
INFO  00:24:50,323 - #38 ;
INFO  00:24:50,323 - #44 {
INFO  00:24:50,323 - #14 void
INFO  00:24:50,323 - #49 main
INFO  00:24:50,323 - #40 (
INFO  00:24:50,323 - #41 )
INFO  00:24:50,323 - #49 int
INFO  00:24:50,324 - #49 niz
INFO  00:24:50,324 - #42 [
INFO  00:24:50,324 - #43 ]
INFO  00:24:50,324 - #38 ;
INFO  00:24:50,324 - #44 {
INFO  00:24:50,325 - #49 x
INFO  00:24:50,325 - #27 =
INFO  00:24:50,325 - #52 1
INFO  00:24:50,325 - #38 ;
INFO  00:24:50,325 - #49 niz
INFO  00:24:50,325 - #27 =
INFO  00:24:50,325 - #11 new
INFO  00:24:50,325 - #49 int
INFO  00:24:50,325 - #42 [
INFO  00:24:50,325 - #52 3
INFO  00:24:50,325 - #43 ]
INFO  00:24:50,325 - #38 ;
INFO  00:24:50,326 - #12 print
INFO  00:24:50,326 - #40 (
INFO  00:24:50,326 - #49 x
INFO  00:24:50,326 - #41 )
INFO  00:24:50,326 - #38 ;
INFO  00:24:50,326 - #45 }
INFO  00:24:50,326 - #45 }
INFO  00:24:50,330 - Line 8: Using global variable name: x
INFO  00:24:50,330 - Line 9: Using local variable name: niz
INFO  00:24:50,330 - Line 10: Using global variable name: x
INFO  00:24:50,331 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:26:14,726 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:26:14,745 - #2 program
INFO  00:26:14,745 - #49 MJProgram
INFO  00:26:14,745 - #49 int
INFO  00:26:14,746 - #49 x
INFO  00:26:14,746 - #38 ;
INFO  00:26:14,747 - #49 int
INFO  00:26:14,747 - #49 y
INFO  00:26:14,747 - #38 ;
INFO  00:26:14,747 - #44 {
INFO  00:26:14,747 - #14 void
INFO  00:26:14,747 - #49 main
INFO  00:26:14,747 - #40 (
INFO  00:26:14,747 - #41 )
INFO  00:26:14,748 - #49 int
INFO  00:26:14,748 - #49 niz
INFO  00:26:14,748 - #42 [
INFO  00:26:14,748 - #43 ]
INFO  00:26:14,748 - #38 ;
INFO  00:26:14,748 - #44 {
INFO  00:26:14,748 - #49 x
INFO  00:26:14,749 - #27 =
INFO  00:26:14,749 - #52 1
INFO  00:26:14,749 - #38 ;
INFO  00:26:14,749 - #49 niz
INFO  00:26:14,749 - #27 =
INFO  00:26:14,749 - #11 new
INFO  00:26:14,749 - #49 int
INFO  00:26:14,749 - #42 [
INFO  00:26:14,749 - #52 3
INFO  00:26:14,749 - #43 ]
INFO  00:26:14,749 - #38 ;
INFO  00:26:14,749 - #12 print
INFO  00:26:14,749 - #40 (
INFO  00:26:14,749 - #49 x
INFO  00:26:14,749 - #41 )
INFO  00:26:14,750 - #38 ;
INFO  00:26:14,750 - #45 }
INFO  00:26:14,750 - #45 }
INFO  00:26:14,753 - Line 8: Using global variable name: x
INFO  00:26:14,754 - Line 9: Using local variable name: niz
INFO  00:26:14,754 - Line 10: Using global variable name: x
INFO  00:26:14,755 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:29:43,249 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:29:43,268 - #2 program
INFO  00:29:43,268 - #49 MJProgram
INFO  00:29:43,268 - #49 int
INFO  00:29:43,269 - #49 x
INFO  00:29:43,269 - #38 ;
INFO  00:29:43,269 - #49 int
INFO  00:29:43,270 - #49 y
INFO  00:29:43,270 - #38 ;
INFO  00:29:43,270 - #44 {
INFO  00:29:43,270 - #14 void
INFO  00:29:43,270 - #49 main
INFO  00:29:43,270 - #40 (
INFO  00:29:43,271 - #41 )
INFO  00:29:43,271 - #49 int
INFO  00:29:43,271 - #49 niz
INFO  00:29:43,271 - #42 [
INFO  00:29:43,271 - #43 ]
INFO  00:29:43,271 - #38 ;
INFO  00:29:43,271 - #44 {
INFO  00:29:43,272 - #49 x
INFO  00:29:43,272 - #27 =
INFO  00:29:43,272 - #52 3
INFO  00:29:43,272 - #38 ;
INFO  00:29:43,272 - #5 if
INFO  00:29:43,272 - #40 (
INFO  00:29:43,272 - #49 x
INFO  00:29:43,272 - #32 <
INFO  00:29:43,272 - #52 1
INFO  00:29:43,273 - #41 )
INFO  00:29:43,273 - #44 {
INFO  00:29:43,273 - #12 print
INFO  00:29:43,273 - #40 (
INFO  00:29:43,273 - #52 1
INFO  00:29:43,273 - #41 )
INFO  00:29:43,273 - #38 ;
INFO  00:29:43,273 - #45 }
INFO  00:29:43,273 - #6 else
INFO  00:29:43,274 - #44 {
INFO  00:29:43,274 - #12 print
INFO  00:29:43,274 - #40 (
INFO  00:29:43,274 - #52 2
INFO  00:29:43,274 - #41 )
INFO  00:29:43,274 - #38 ;
INFO  00:29:43,274 - #45 }
INFO  00:29:43,274 - #45 }
INFO  00:29:43,274 - #45 }
INFO  00:29:43,278 - Line 8: Using global variable name: x
INFO  00:29:43,278 - Line 9: Using global variable name: x
INFO  00:29:43,280 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:30:01,250 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:30:01,269 - #2 program
INFO  00:30:01,269 - #49 MJProgram
INFO  00:30:01,269 - #49 int
INFO  00:30:01,269 - #49 x
INFO  00:30:01,269 - #38 ;
INFO  00:30:01,270 - #49 int
INFO  00:30:01,270 - #49 y
INFO  00:30:01,270 - #38 ;
INFO  00:30:01,270 - #44 {
INFO  00:30:01,270 - #14 void
INFO  00:30:01,270 - #49 main
INFO  00:30:01,270 - #40 (
INFO  00:30:01,271 - #41 )
INFO  00:30:01,271 - #49 int
INFO  00:30:01,271 - #49 niz
INFO  00:30:01,271 - #42 [
INFO  00:30:01,271 - #43 ]
INFO  00:30:01,271 - #38 ;
INFO  00:30:01,271 - #44 {
INFO  00:30:01,272 - #49 x
INFO  00:30:01,272 - #27 =
INFO  00:30:01,272 - #52 3
INFO  00:30:01,272 - #38 ;
INFO  00:30:01,272 - #5 if
INFO  00:30:01,272 - #40 (
INFO  00:30:01,272 - #49 x
INFO  00:30:01,273 - #41 )
INFO  00:30:01,273 - #44 {
INFO  00:30:01,273 - #12 print
INFO  00:30:01,273 - #40 (
INFO  00:30:01,273 - #52 1
INFO  00:30:01,273 - #41 )
INFO  00:30:01,273 - #38 ;
INFO  00:30:01,273 - #45 }
INFO  00:30:01,273 - #6 else
INFO  00:30:01,273 - #44 {
INFO  00:30:01,274 - #12 print
INFO  00:30:01,274 - #40 (
INFO  00:30:01,274 - #52 2
INFO  00:30:01,274 - #41 )
INFO  00:30:01,274 - #38 ;
INFO  00:30:01,274 - #45 }
INFO  00:30:01,274 - #45 }
INFO  00:30:01,274 - #45 }
INFO  00:30:01,278 - Line 8: Using global variable name: x
INFO  00:30:01,278 - Line 9: Using global variable name: x
ERROR 00:30:01,278 - Line 9: Condition term is not bool type
ERROR 00:30:01,278 - One or more semantic errors found! Compiling unsuccessful!
INFO  00:31:14,492 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:31:14,509 - #2 program
INFO  00:31:14,509 - #49 MJProgram
INFO  00:31:14,509 - #49 int
INFO  00:31:14,510 - #49 x
INFO  00:31:14,510 - #38 ;
INFO  00:31:14,510 - #49 int
INFO  00:31:14,510 - #49 y
INFO  00:31:14,510 - #38 ;
INFO  00:31:14,510 - #44 {
INFO  00:31:14,510 - #14 void
INFO  00:31:14,511 - #49 main
INFO  00:31:14,511 - #40 (
INFO  00:31:14,511 - #41 )
INFO  00:31:14,511 - #49 int
INFO  00:31:14,511 - #49 niz
INFO  00:31:14,511 - #42 [
INFO  00:31:14,511 - #43 ]
INFO  00:31:14,512 - #38 ;
INFO  00:31:14,512 - #44 {
INFO  00:31:14,512 - #49 x
INFO  00:31:14,512 - #27 =
INFO  00:31:14,512 - #52 3
INFO  00:31:14,512 - #38 ;
INFO  00:31:14,512 - #5 if
INFO  00:31:14,513 - #40 (
INFO  00:31:14,513 - #49 x
INFO  00:31:14,513 - #30 >
INFO  00:31:14,513 - #52 1
INFO  00:31:14,513 - #41 )
INFO  00:31:14,513 - #44 {
INFO  00:31:14,513 - #12 print
INFO  00:31:14,513 - #40 (
INFO  00:31:14,513 - #52 1
INFO  00:31:14,513 - #41 )
INFO  00:31:14,514 - #38 ;
INFO  00:31:14,514 - #45 }
INFO  00:31:14,514 - #45 }
INFO  00:31:14,514 - #45 }
INFO  00:31:14,518 - Line 8: Using global variable name: x
INFO  00:31:14,518 - Line 9: Using global variable name: x
INFO  00:31:14,519 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:37:08,742 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:37:08,761 - #2 program
INFO  00:37:08,761 - #49 MJProgram
INFO  00:37:08,761 - #49 int
INFO  00:37:08,761 - #49 x
INFO  00:37:08,761 - #38 ;
INFO  00:37:08,762 - #49 int
INFO  00:37:08,762 - #49 y
INFO  00:37:08,762 - #38 ;
INFO  00:37:08,762 - #44 {
INFO  00:37:08,762 - #14 void
INFO  00:37:08,762 - #49 main
INFO  00:37:08,763 - #40 (
INFO  00:37:08,763 - #41 )
INFO  00:37:08,763 - #49 int
INFO  00:37:08,763 - #49 niz
INFO  00:37:08,763 - #42 [
INFO  00:37:08,763 - #43 ]
INFO  00:37:08,763 - #38 ;
INFO  00:37:08,764 - #44 {
INFO  00:37:08,764 - #49 x
INFO  00:37:08,764 - #27 =
INFO  00:37:08,764 - #52 3
INFO  00:37:08,764 - #38 ;
INFO  00:37:08,765 - #5 if
INFO  00:37:08,765 - #40 (
INFO  00:37:08,765 - #49 x
INFO  00:37:08,765 - #30 >
INFO  00:37:08,765 - #52 1
INFO  00:37:08,765 - #41 )
INFO  00:37:08,765 - #44 {
INFO  00:37:08,765 - #12 print
INFO  00:37:08,766 - #40 (
INFO  00:37:08,766 - #52 1
INFO  00:37:08,766 - #41 )
INFO  00:37:08,766 - #38 ;
INFO  00:37:08,766 - #45 }
INFO  00:37:08,766 - #45 }
INFO  00:37:08,766 - #45 }
INFO  00:37:08,770 - Line 8: Using global variable name: x
INFO  00:37:08,770 - Line 9: Using global variable name: x
INFO  00:37:08,771 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:37:36,216 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:37:36,236 - #2 program
INFO  00:37:36,236 - #49 MJProgram
INFO  00:37:36,236 - #49 int
INFO  00:37:36,237 - #49 x
INFO  00:37:36,238 - #38 ;
INFO  00:37:36,238 - #49 int
INFO  00:37:36,239 - #49 y
INFO  00:37:36,239 - #38 ;
INFO  00:37:36,239 - #44 {
INFO  00:37:36,239 - #14 void
INFO  00:37:36,239 - #49 main
INFO  00:37:36,239 - #40 (
INFO  00:37:36,240 - #41 )
INFO  00:37:36,240 - #49 int
INFO  00:37:36,240 - #49 niz
INFO  00:37:36,240 - #42 [
INFO  00:37:36,240 - #43 ]
INFO  00:37:36,240 - #38 ;
INFO  00:37:36,240 - #44 {
INFO  00:37:36,241 - #49 x
INFO  00:37:36,241 - #27 =
INFO  00:37:36,241 - #52 3
INFO  00:37:36,241 - #38 ;
INFO  00:37:36,241 - #5 if
INFO  00:37:36,241 - #40 (
INFO  00:37:36,241 - #49 x
INFO  00:37:36,241 - #32 <
INFO  00:37:36,242 - #52 1
INFO  00:37:36,242 - #41 )
INFO  00:37:36,242 - #44 {
INFO  00:37:36,242 - #12 print
INFO  00:37:36,242 - #40 (
INFO  00:37:36,242 - #52 1
INFO  00:37:36,242 - #41 )
INFO  00:37:36,243 - #38 ;
INFO  00:37:36,243 - #45 }
INFO  00:37:36,243 - #6 else
INFO  00:37:36,243 - #44 {
INFO  00:37:36,243 - #12 print
INFO  00:37:36,243 - #40 (
INFO  00:37:36,243 - #51 j
INFO  00:37:36,243 - #41 )
INFO  00:37:36,243 - #38 ;
INFO  00:37:36,243 - #45 }
INFO  00:37:36,243 - #45 }
INFO  00:37:36,243 - #45 }
INFO  00:37:36,247 - Line 8: Using global variable name: x
INFO  00:37:36,247 - Line 9: Using global variable name: x
INFO  00:37:36,249 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:38:07,663 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:38:07,681 - #2 program
INFO  00:38:07,681 - #49 MJProgram
INFO  00:38:07,681 - #49 int
INFO  00:38:07,682 - #49 x
INFO  00:38:07,682 - #38 ;
INFO  00:38:07,682 - #49 int
INFO  00:38:07,682 - #49 y
INFO  00:38:07,682 - #38 ;
INFO  00:38:07,683 - #44 {
INFO  00:38:07,683 - #14 void
INFO  00:38:07,683 - #49 main
INFO  00:38:07,683 - #40 (
INFO  00:38:07,683 - #41 )
INFO  00:38:07,683 - #49 int
INFO  00:38:07,684 - #49 niz
INFO  00:38:07,684 - #42 [
INFO  00:38:07,684 - #43 ]
INFO  00:38:07,684 - #38 ;
INFO  00:38:07,684 - #44 {
INFO  00:38:07,684 - #49 x
INFO  00:38:07,685 - #27 =
INFO  00:38:07,685 - #52 3
INFO  00:38:07,685 - #38 ;
INFO  00:38:07,685 - #5 if
INFO  00:38:07,685 - #40 (
INFO  00:38:07,685 - #49 x
INFO  00:38:07,685 - #32 <
INFO  00:38:07,685 - #52 1
INFO  00:38:07,686 - #41 )
INFO  00:38:07,686 - #44 {
INFO  00:38:07,686 - #12 print
INFO  00:38:07,686 - #40 (
INFO  00:38:07,686 - #52 1
INFO  00:38:07,686 - #41 )
INFO  00:38:07,686 - #38 ;
INFO  00:38:07,686 - #45 }
INFO  00:38:07,686 - #45 }
INFO  00:38:07,686 - #45 }
INFO  00:38:07,690 - Line 8: Using global variable name: x
INFO  00:38:07,690 - Line 9: Using global variable name: x
INFO  00:38:07,692 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:44:16,046 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:44:16,064 - #2 program
INFO  00:44:16,064 - #49 MJProgram
INFO  00:44:16,064 - #49 int
INFO  00:44:16,065 - #49 x
INFO  00:44:16,065 - #38 ;
INFO  00:44:16,065 - #49 int
INFO  00:44:16,066 - #49 y
INFO  00:44:16,066 - #38 ;
INFO  00:44:16,066 - #44 {
INFO  00:44:16,066 - #14 void
INFO  00:44:16,066 - #49 main
INFO  00:44:16,066 - #40 (
INFO  00:44:16,066 - #41 )
INFO  00:44:16,066 - #49 int
INFO  00:44:16,067 - #49 niz
INFO  00:44:16,067 - #42 [
INFO  00:44:16,067 - #43 ]
INFO  00:44:16,067 - #38 ;
INFO  00:44:16,067 - #44 {
INFO  00:44:16,067 - #49 niz
INFO  00:44:16,068 - #27 =
INFO  00:44:16,068 - #11 new
INFO  00:44:16,068 - #49 int
INFO  00:44:16,068 - #42 [
INFO  00:44:16,068 - #52 3
INFO  00:44:16,068 - #43 ]
INFO  00:44:16,068 - #38 ;
INFO  00:44:16,068 - #49 niz
INFO  00:44:16,068 - #42 [
INFO  00:44:16,069 - #52 0
INFO  00:44:16,069 - #43 ]
INFO  00:44:16,069 - #27 =
INFO  00:44:16,069 - #52 1
INFO  00:44:16,069 - #38 ;
INFO  00:44:16,069 - #12 print
INFO  00:44:16,069 - #40 (
INFO  00:44:16,069 - #49 x
INFO  00:44:16,069 - #41 )
INFO  00:44:16,069 - #38 ;
INFO  00:44:16,069 - #45 }
INFO  00:44:16,069 - #45 }
INFO  00:44:16,073 - Line 8: Using local variable name: niz
INFO  00:44:16,073 - Line 9: Using local variable name: niz
INFO  00:44:16,073 - Line 9: Access to array element detected. Array name: niz
INFO  00:44:16,073 - Line 10: Using global variable name: x
INFO  00:44:16,074 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:44:48,268 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:44:48,286 - #2 program
INFO  00:44:48,286 - #49 MJProgram
INFO  00:44:48,286 - #49 int
INFO  00:44:48,287 - #49 x
INFO  00:44:48,287 - #38 ;
INFO  00:44:48,287 - #49 int
INFO  00:44:48,287 - #49 y
INFO  00:44:48,287 - #38 ;
INFO  00:44:48,287 - #44 {
INFO  00:44:48,287 - #14 void
INFO  00:44:48,288 - #49 main
INFO  00:44:48,288 - #40 (
INFO  00:44:48,288 - #41 )
INFO  00:44:48,288 - #49 int
INFO  00:44:48,288 - #49 niz
INFO  00:44:48,288 - #42 [
INFO  00:44:48,289 - #43 ]
INFO  00:44:48,289 - #38 ;
INFO  00:44:48,289 - #44 {
INFO  00:44:48,289 - #49 niz
INFO  00:44:48,289 - #27 =
INFO  00:44:48,289 - #11 new
INFO  00:44:48,289 - #49 int
INFO  00:44:48,289 - #42 [
INFO  00:44:48,289 - #52 3
INFO  00:44:48,290 - #43 ]
INFO  00:44:48,290 - #38 ;
INFO  00:44:48,290 - #49 niz
INFO  00:44:48,290 - #42 [
INFO  00:44:48,290 - #52 0
INFO  00:44:48,290 - #43 ]
INFO  00:44:48,290 - #27 =
INFO  00:44:48,290 - #52 1
INFO  00:44:48,290 - #38 ;
INFO  00:44:48,290 - #12 print
INFO  00:44:48,290 - #40 (
INFO  00:44:48,290 - #49 x
INFO  00:44:48,290 - #41 )
INFO  00:44:48,291 - #38 ;
INFO  00:44:48,291 - #45 }
INFO  00:44:48,291 - #45 }
INFO  00:44:48,295 - Line 6: Using local variable name: niz
INFO  00:44:48,295 - Line 7: Using local variable name: niz
INFO  00:44:48,295 - Line 7: Access to array element detected. Array name: niz
INFO  00:44:48,295 - Line 8: Using global variable name: x
INFO  00:44:48,297 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:47:34,954 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:47:34,973 - #2 program
INFO  00:47:34,973 - #49 MJProgram
INFO  00:47:34,973 - #49 int
INFO  00:47:34,973 - #49 x
INFO  00:47:34,973 - #38 ;
INFO  00:47:34,974 - #49 int
INFO  00:47:34,974 - #49 y
INFO  00:47:34,974 - #38 ;
INFO  00:47:34,974 - #44 {
INFO  00:47:34,974 - #14 void
INFO  00:47:34,974 - #49 main
INFO  00:47:34,974 - #40 (
INFO  00:47:34,975 - #41 )
INFO  00:47:34,975 - #49 int
INFO  00:47:34,975 - #49 niz
INFO  00:47:34,975 - #42 [
INFO  00:47:34,975 - #43 ]
INFO  00:47:34,975 - #38 ;
INFO  00:47:34,975 - #44 {
INFO  00:47:34,975 - #49 x
INFO  00:47:34,976 - #27 =
INFO  00:47:34,976 - #52 3
INFO  00:47:34,976 - #38 ;
INFO  00:47:34,976 - #5 if
INFO  00:47:34,976 - #40 (
INFO  00:47:34,976 - #49 x
INFO  00:47:34,976 - #32 <
INFO  00:47:34,976 - #52 1
INFO  00:47:34,977 - #41 )
INFO  00:47:34,977 - #44 {
INFO  00:47:34,977 - #12 print
INFO  00:47:34,977 - #40 (
INFO  00:47:34,977 - #52 1
INFO  00:47:34,977 - #41 )
INFO  00:47:34,977 - #38 ;
INFO  00:47:34,977 - #45 }
INFO  00:47:34,977 - #5 if
INFO  00:47:34,978 - #40 (
INFO  00:47:34,978 - #49 x
INFO  00:47:34,978 - #30 >
INFO  00:47:34,978 - #52 1
INFO  00:47:34,978 - #41 )
INFO  00:47:34,978 - #44 {
INFO  00:47:34,978 - #12 print
INFO  00:47:34,978 - #40 (
INFO  00:47:34,978 - #52 2
INFO  00:47:34,978 - #41 )
INFO  00:47:34,979 - #38 ;
INFO  00:47:34,979 - #45 }
INFO  00:47:34,979 - #45 }
INFO  00:47:34,979 - #45 }
INFO  00:47:34,982 - Line 7: Using global variable name: x
INFO  00:47:34,982 - Line 8: Using global variable name: x
INFO  00:47:34,982 - Line 9: Using global variable name: x
INFO  00:47:34,983 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:48:08,359 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:48:08,378 - #2 program
INFO  00:48:08,378 - #49 MJProgram
INFO  00:48:08,378 - #49 int
INFO  00:48:08,378 - #49 x
INFO  00:48:08,378 - #38 ;
INFO  00:48:08,379 - #49 int
INFO  00:48:08,379 - #49 y
INFO  00:48:08,379 - #38 ;
INFO  00:48:08,379 - #44 {
INFO  00:48:08,379 - #14 void
INFO  00:48:08,379 - #49 main
INFO  00:48:08,380 - #40 (
INFO  00:48:08,380 - #41 )
INFO  00:48:08,380 - #49 int
INFO  00:48:08,380 - #49 niz
INFO  00:48:08,380 - #42 [
INFO  00:48:08,380 - #43 ]
INFO  00:48:08,380 - #38 ;
INFO  00:48:08,381 - #44 {
INFO  00:48:08,381 - #49 x
INFO  00:48:08,381 - #27 =
INFO  00:48:08,381 - #52 3
INFO  00:48:08,381 - #38 ;
INFO  00:48:08,381 - #5 if
INFO  00:48:08,381 - #40 (
INFO  00:48:08,381 - #49 x
INFO  00:48:08,381 - #32 <
INFO  00:48:08,381 - #52 1
INFO  00:48:08,382 - #41 )
INFO  00:48:08,382 - #44 {
INFO  00:48:08,382 - #12 print
INFO  00:48:08,382 - #40 (
INFO  00:48:08,382 - #52 1
INFO  00:48:08,382 - #41 )
INFO  00:48:08,382 - #38 ;
INFO  00:48:08,382 - #45 }
INFO  00:48:08,382 - #6 else
INFO  00:48:08,382 - #44 {
INFO  00:48:08,383 - #12 print
INFO  00:48:08,383 - #40 (
INFO  00:48:08,383 - #52 2
INFO  00:48:08,383 - #41 )
INFO  00:48:08,383 - #38 ;
INFO  00:48:08,383 - #45 }
INFO  00:48:08,383 - #45 }
INFO  00:48:08,383 - #45 }
INFO  00:48:08,387 - Line 7: Using global variable name: x
INFO  00:48:08,387 - Line 8: Using global variable name: x
INFO  00:48:08,388 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:51:02,745 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:51:02,764 - #2 program
INFO  00:51:02,764 - #49 MJProgram
INFO  00:51:02,764 - #49 int
INFO  00:51:02,764 - #49 x
INFO  00:51:02,764 - #38 ;
INFO  00:51:02,764 - #49 int
INFO  00:51:02,765 - #49 y
INFO  00:51:02,765 - #38 ;
INFO  00:51:02,765 - #44 {
INFO  00:51:02,765 - #14 void
INFO  00:51:02,765 - #49 main
INFO  00:51:02,765 - #40 (
INFO  00:51:02,766 - #41 )
INFO  00:51:02,766 - #49 int
INFO  00:51:02,766 - #49 niz
INFO  00:51:02,766 - #42 [
INFO  00:51:02,766 - #43 ]
INFO  00:51:02,766 - #38 ;
INFO  00:51:02,766 - #44 {
INFO  00:51:02,767 - #49 x
INFO  00:51:02,767 - #27 =
INFO  00:51:02,767 - #52 3
INFO  00:51:02,767 - #38 ;
INFO  00:51:02,767 - #5 if
INFO  00:51:02,767 - #40 (
INFO  00:51:02,767 - #49 x
INFO  00:51:02,767 - #32 <
INFO  00:51:02,767 - #52 1
INFO  00:51:02,768 - #41 )
INFO  00:51:02,768 - #44 {
INFO  00:51:02,768 - #12 print
INFO  00:51:02,768 - #40 (
INFO  00:51:02,768 - #52 1
INFO  00:51:02,768 - #41 )
INFO  00:51:02,768 - #38 ;
INFO  00:51:02,768 - #45 }
INFO  00:51:02,768 - #6 else
INFO  00:51:02,769 - #44 {
INFO  00:51:02,769 - #12 print
INFO  00:51:02,769 - #40 (
INFO  00:51:02,769 - #52 2
INFO  00:51:02,769 - #41 )
INFO  00:51:02,769 - #38 ;
INFO  00:51:02,769 - #45 }
INFO  00:51:02,769 - #45 }
INFO  00:51:02,769 - #45 }
INFO  00:51:02,773 - Line 7: Using global variable name: x
INFO  00:51:02,773 - Line 8: Using global variable name: x
INFO  00:51:02,775 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:52:17,906 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:52:17,924 - #2 program
INFO  00:52:17,924 - #49 MJProgram
INFO  00:52:17,924 - #49 int
INFO  00:52:17,924 - #49 x
INFO  00:52:17,925 - #38 ;
INFO  00:52:17,925 - #49 int
INFO  00:52:17,925 - #49 y
INFO  00:52:17,925 - #38 ;
INFO  00:52:17,925 - #44 {
INFO  00:52:17,925 - #14 void
INFO  00:52:17,925 - #49 main
INFO  00:52:17,926 - #40 (
INFO  00:52:17,926 - #41 )
INFO  00:52:17,926 - #49 int
INFO  00:52:17,926 - #49 niz
INFO  00:52:17,926 - #42 [
INFO  00:52:17,926 - #43 ]
INFO  00:52:17,926 - #38 ;
INFO  00:52:17,927 - #44 {
INFO  00:52:17,927 - #49 x
INFO  00:52:17,927 - #27 =
INFO  00:52:17,927 - #52 3
INFO  00:52:17,927 - #38 ;
INFO  00:52:17,928 - #49 y
INFO  00:52:17,928 - #27 =
INFO  00:52:17,928 - #52 5
INFO  00:52:17,928 - #38 ;
INFO  00:52:17,928 - #5 if
INFO  00:52:17,928 - #40 (
INFO  00:52:17,928 - #49 x
INFO  00:52:17,928 - #32 <
INFO  00:52:17,928 - #52 1
INFO  00:52:17,928 - #41 )
INFO  00:52:17,929 - #44 {
INFO  00:52:17,929 - #12 print
INFO  00:52:17,929 - #40 (
INFO  00:52:17,929 - #52 1
INFO  00:52:17,929 - #41 )
INFO  00:52:17,929 - #38 ;
INFO  00:52:17,929 - #45 }
INFO  00:52:17,929 - #6 else
INFO  00:52:17,929 - #44 {
INFO  00:52:17,930 - #5 if
INFO  00:52:17,930 - #40 (
INFO  00:52:17,930 - #49 x
INFO  00:52:17,930 - #30 >
INFO  00:52:17,930 - #52 2
INFO  00:52:17,930 - #41 )
INFO  00:52:17,930 - #44 {
INFO  00:52:17,930 - #12 print
INFO  00:52:17,930 - #40 (
INFO  00:52:17,930 - #51 x
INFO  00:52:17,930 - #41 )
INFO  00:52:17,931 - #38 ;
INFO  00:52:17,931 - #45 }
INFO  00:52:17,931 - #5 if
INFO  00:52:17,931 - #40 (
INFO  00:52:17,931 - #49 y
INFO  00:52:17,931 - #32 <
INFO  00:52:17,931 - #52 4
INFO  00:52:17,931 - #41 )
INFO  00:52:17,931 - #44 {
INFO  00:52:17,931 - #12 print
INFO  00:52:17,931 - #40 (
INFO  00:52:17,931 - #51 y
INFO  00:52:17,931 - #41 )
INFO  00:52:17,931 - #38 ;
INFO  00:52:17,931 - #45 }
INFO  00:52:17,931 - #6 else
INFO  00:52:17,931 - #44 {
INFO  00:52:17,931 - #12 print
INFO  00:52:17,931 - #40 (
INFO  00:52:17,931 - #51 z
INFO  00:52:17,931 - #41 )
INFO  00:52:17,931 - #38 ;
INFO  00:52:17,931 - #45 }
INFO  00:52:17,931 - #45 }
INFO  00:52:17,931 - #45 }
INFO  00:52:17,931 - #45 }
INFO  00:52:17,936 - Line 7: Using global variable name: x
INFO  00:52:17,936 - Line 8: Using global variable name: y
INFO  00:52:17,936 - Line 9: Using global variable name: x
INFO  00:52:17,936 - Line 11: Using global variable name: x
INFO  00:52:17,936 - Line 15: Using global variable name: y
INFO  00:52:17,937 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:52:58,654 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:52:58,672 - #2 program
INFO  00:52:58,672 - #49 MJProgram
INFO  00:52:58,672 - #49 int
INFO  00:52:58,673 - #49 x
INFO  00:52:58,673 - #38 ;
INFO  00:52:58,673 - #49 int
INFO  00:52:58,673 - #49 y
INFO  00:52:58,674 - #38 ;
INFO  00:52:58,674 - #44 {
INFO  00:52:58,674 - #14 void
INFO  00:52:58,674 - #49 main
INFO  00:52:58,674 - #40 (
INFO  00:52:58,675 - #41 )
INFO  00:52:58,675 - #49 int
INFO  00:52:58,675 - #49 niz
INFO  00:52:58,675 - #42 [
INFO  00:52:58,675 - #43 ]
INFO  00:52:58,675 - #38 ;
INFO  00:52:58,675 - #44 {
INFO  00:52:58,676 - #49 x
INFO  00:52:58,676 - #27 =
INFO  00:52:58,676 - #52 3
INFO  00:52:58,676 - #38 ;
INFO  00:52:58,676 - #49 y
INFO  00:52:58,676 - #27 =
INFO  00:52:58,676 - #52 5
INFO  00:52:58,676 - #38 ;
INFO  00:52:58,676 - #5 if
INFO  00:52:58,676 - #40 (
INFO  00:52:58,676 - #49 x
INFO  00:52:58,676 - #32 <
INFO  00:52:58,676 - #52 1
INFO  00:52:58,676 - #41 )
INFO  00:52:58,676 - #44 {
INFO  00:52:58,676 - #12 print
INFO  00:52:58,676 - #40 (
INFO  00:52:58,676 - #52 1
INFO  00:52:58,676 - #41 )
INFO  00:52:58,676 - #38 ;
INFO  00:52:58,676 - #45 }
INFO  00:52:58,677 - #6 else
INFO  00:52:58,677 - #44 {
INFO  00:52:58,677 - #5 if
INFO  00:52:58,677 - #40 (
INFO  00:52:58,677 - #49 x
INFO  00:52:58,677 - #30 >
INFO  00:52:58,677 - #52 2
INFO  00:52:58,677 - #41 )
INFO  00:52:58,677 - #44 {
INFO  00:52:58,677 - #12 print
INFO  00:52:58,677 - #40 (
INFO  00:52:58,677 - #51 x
INFO  00:52:58,678 - #41 )
INFO  00:52:58,678 - #38 ;
INFO  00:52:58,678 - #45 }
INFO  00:52:58,678 - #5 if
INFO  00:52:58,678 - #40 (
INFO  00:52:58,678 - #49 y
INFO  00:52:58,678 - #32 <
INFO  00:52:58,678 - #52 4
INFO  00:52:58,678 - #41 )
INFO  00:52:58,678 - #44 {
INFO  00:52:58,678 - #12 print
INFO  00:52:58,678 - #40 (
INFO  00:52:58,678 - #51 y
INFO  00:52:58,678 - #41 )
INFO  00:52:58,678 - #38 ;
INFO  00:52:58,678 - #45 }
INFO  00:52:58,678 - #6 else
INFO  00:52:58,678 - #44 {
INFO  00:52:58,678 - #12 print
INFO  00:52:58,678 - #40 (
INFO  00:52:58,678 - #51 z
INFO  00:52:58,678 - #41 )
INFO  00:52:58,678 - #38 ;
INFO  00:52:58,678 - #5 if
INFO  00:52:58,678 - #40 (
INFO  00:52:58,678 - #49 x
INFO  00:52:58,678 - #32 <
INFO  00:52:58,678 - #52 3
INFO  00:52:58,678 - #41 )
INFO  00:52:58,678 - #12 print
INFO  00:52:58,678 - #40 (
INFO  00:52:58,679 - #51 x
INFO  00:52:58,679 - #41 )
INFO  00:52:58,679 - #38 ;
INFO  00:52:58,679 - #6 else
INFO  00:52:58,679 - #12 print
INFO  00:52:58,679 - #40 (
INFO  00:52:58,679 - #51 p
INFO  00:52:58,679 - #41 )
INFO  00:52:58,679 - #38 ;
INFO  00:52:58,679 - #45 }
INFO  00:52:58,679 - #45 }
INFO  00:52:58,679 - #45 }
INFO  00:52:58,679 - #45 }
INFO  00:52:58,682 - Line 7: Using global variable name: x
INFO  00:52:58,683 - Line 8: Using global variable name: y
INFO  00:52:58,683 - Line 9: Using global variable name: x
INFO  00:52:58,683 - Line 11: Using global variable name: x
INFO  00:52:58,683 - Line 15: Using global variable name: y
INFO  00:52:58,683 - Line 19: Using global variable name: x
INFO  00:52:58,684 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:53:22,290 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:53:22,309 - #2 program
INFO  00:53:22,309 - #49 MJProgram
INFO  00:53:22,309 - #49 int
INFO  00:53:22,309 - #49 x
INFO  00:53:22,309 - #38 ;
INFO  00:53:22,310 - #49 int
INFO  00:53:22,310 - #49 y
INFO  00:53:22,310 - #38 ;
INFO  00:53:22,310 - #44 {
INFO  00:53:22,310 - #14 void
INFO  00:53:22,310 - #49 main
INFO  00:53:22,310 - #40 (
INFO  00:53:22,311 - #41 )
INFO  00:53:22,311 - #49 int
INFO  00:53:22,311 - #49 niz
INFO  00:53:22,311 - #42 [
INFO  00:53:22,311 - #43 ]
INFO  00:53:22,311 - #38 ;
INFO  00:53:22,312 - #44 {
INFO  00:53:22,312 - #49 x
INFO  00:53:22,312 - #27 =
INFO  00:53:22,312 - #52 3
INFO  00:53:22,312 - #38 ;
INFO  00:53:22,312 - #49 y
INFO  00:53:22,313 - #27 =
INFO  00:53:22,313 - #52 5
INFO  00:53:22,313 - #38 ;
INFO  00:53:22,313 - #5 if
INFO  00:53:22,313 - #40 (
INFO  00:53:22,313 - #49 x
INFO  00:53:22,313 - #32 <
INFO  00:53:22,313 - #52 1
INFO  00:53:22,313 - #41 )
INFO  00:53:22,313 - #44 {
INFO  00:53:22,313 - #12 print
INFO  00:53:22,314 - #40 (
INFO  00:53:22,314 - #52 1
INFO  00:53:22,314 - #41 )
INFO  00:53:22,314 - #38 ;
INFO  00:53:22,314 - #45 }
INFO  00:53:22,314 - #6 else
INFO  00:53:22,314 - #44 {
INFO  00:53:22,314 - #5 if
INFO  00:53:22,314 - #40 (
INFO  00:53:22,314 - #49 x
INFO  00:53:22,315 - #30 >
INFO  00:53:22,315 - #52 2
INFO  00:53:22,315 - #41 )
INFO  00:53:22,315 - #44 {
INFO  00:53:22,315 - #12 print
INFO  00:53:22,315 - #40 (
INFO  00:53:22,315 - #51 x
INFO  00:53:22,315 - #41 )
INFO  00:53:22,315 - #38 ;
INFO  00:53:22,315 - #45 }
INFO  00:53:22,315 - #5 if
INFO  00:53:22,315 - #40 (
INFO  00:53:22,315 - #49 y
INFO  00:53:22,315 - #32 <
INFO  00:53:22,315 - #52 4
INFO  00:53:22,315 - #41 )
INFO  00:53:22,315 - #44 {
INFO  00:53:22,315 - #12 print
INFO  00:53:22,315 - #40 (
INFO  00:53:22,315 - #51 y
INFO  00:53:22,316 - #41 )
INFO  00:53:22,316 - #38 ;
INFO  00:53:22,316 - #45 }
INFO  00:53:22,316 - #6 else
INFO  00:53:22,316 - #44 {
INFO  00:53:22,316 - #12 print
INFO  00:53:22,316 - #40 (
INFO  00:53:22,316 - #51 z
INFO  00:53:22,316 - #41 )
INFO  00:53:22,316 - #38 ;
INFO  00:53:22,316 - #5 if
INFO  00:53:22,316 - #40 (
INFO  00:53:22,316 - #49 x
INFO  00:53:22,316 - #32 <
INFO  00:53:22,316 - #52 3
INFO  00:53:22,316 - #41 )
INFO  00:53:22,316 - #12 print
INFO  00:53:22,316 - #40 (
INFO  00:53:22,316 - #51 x
INFO  00:53:22,316 - #41 )
INFO  00:53:22,316 - #38 ;
INFO  00:53:22,316 - #6 else
INFO  00:53:22,316 - #12 print
INFO  00:53:22,316 - #40 (
INFO  00:53:22,316 - #51 p
INFO  00:53:22,316 - #41 )
INFO  00:53:22,316 - #38 ;
INFO  00:53:22,316 - #5 if
INFO  00:53:22,316 - #40 (
INFO  00:53:22,316 - #49 x
INFO  00:53:22,316 - #30 >
INFO  00:53:22,316 - #52 2
INFO  00:53:22,317 - #34 &&
INFO  00:53:22,317 - #49 y
INFO  00:53:22,317 - #32 <
INFO  00:53:22,317 - #52 6
INFO  00:53:22,317 - #41 )
INFO  00:53:22,317 - #12 print
INFO  00:53:22,317 - #40 (
INFO  00:53:22,317 - #51 m
INFO  00:53:22,317 - #41 )
INFO  00:53:22,317 - #38 ;
INFO  00:53:22,317 - #45 }
INFO  00:53:22,317 - #45 }
INFO  00:53:22,317 - #45 }
INFO  00:53:22,317 - #45 }
INFO  00:53:22,320 - Line 7: Using global variable name: x
INFO  00:53:22,321 - Line 8: Using global variable name: y
INFO  00:53:22,321 - Line 9: Using global variable name: x
INFO  00:53:22,321 - Line 11: Using global variable name: x
INFO  00:53:22,321 - Line 15: Using global variable name: y
INFO  00:53:22,321 - Line 19: Using global variable name: x
INFO  00:53:22,321 - Line 22: Using global variable name: x
INFO  00:53:22,321 - Line 22: Using global variable name: y
INFO  00:53:22,323 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  00:54:22,620 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  00:54:22,639 - #2 program
INFO  00:54:22,639 - #49 MJProgram
INFO  00:54:22,639 - #49 int
INFO  00:54:22,639 - #49 x
INFO  00:54:22,640 - #38 ;
INFO  00:54:22,640 - #49 int
INFO  00:54:22,640 - #49 y
INFO  00:54:22,640 - #38 ;
INFO  00:54:22,640 - #44 {
INFO  00:54:22,640 - #14 void
INFO  00:54:22,640 - #49 main
INFO  00:54:22,641 - #40 (
INFO  00:54:22,641 - #41 )
INFO  00:54:22,641 - #49 int
INFO  00:54:22,641 - #49 niz
INFO  00:54:22,641 - #42 [
INFO  00:54:22,641 - #43 ]
INFO  00:54:22,641 - #38 ;
INFO  00:54:22,642 - #44 {
INFO  00:54:22,642 - #49 x
INFO  00:54:22,642 - #27 =
INFO  00:54:22,642 - #52 3
INFO  00:54:22,642 - #38 ;
INFO  00:54:22,642 - #49 y
INFO  00:54:22,642 - #27 =
INFO  00:54:22,642 - #52 5
INFO  00:54:22,642 - #38 ;
INFO  00:54:22,643 - #5 if
INFO  00:54:22,643 - #40 (
INFO  00:54:22,643 - #49 x
INFO  00:54:22,643 - #32 <
INFO  00:54:22,643 - #52 1
INFO  00:54:22,643 - #41 )
INFO  00:54:22,643 - #44 {
INFO  00:54:22,643 - #12 print
INFO  00:54:22,643 - #40 (
INFO  00:54:22,643 - #52 1
INFO  00:54:22,644 - #41 )
INFO  00:54:22,644 - #38 ;
INFO  00:54:22,644 - #45 }
INFO  00:54:22,644 - #6 else
INFO  00:54:22,644 - #44 {
INFO  00:54:22,645 - #5 if
INFO  00:54:22,645 - #40 (
INFO  00:54:22,645 - #49 x
INFO  00:54:22,645 - #30 >
INFO  00:54:22,645 - #52 2
INFO  00:54:22,645 - #41 )
INFO  00:54:22,645 - #44 {
INFO  00:54:22,645 - #12 print
INFO  00:54:22,645 - #40 (
INFO  00:54:22,645 - #51 x
INFO  00:54:22,645 - #41 )
INFO  00:54:22,645 - #38 ;
INFO  00:54:22,645 - #45 }
INFO  00:54:22,645 - #5 if
INFO  00:54:22,645 - #40 (
INFO  00:54:22,645 - #49 y
INFO  00:54:22,645 - #32 <
INFO  00:54:22,645 - #52 4
INFO  00:54:22,645 - #41 )
INFO  00:54:22,646 - #44 {
INFO  00:54:22,646 - #12 print
INFO  00:54:22,646 - #40 (
INFO  00:54:22,646 - #51 y
INFO  00:54:22,646 - #41 )
INFO  00:54:22,646 - #38 ;
INFO  00:54:22,646 - #45 }
INFO  00:54:22,646 - #6 else
INFO  00:54:22,646 - #44 {
INFO  00:54:22,646 - #12 print
INFO  00:54:22,646 - #40 (
INFO  00:54:22,646 - #51 z
INFO  00:54:22,646 - #41 )
INFO  00:54:22,646 - #38 ;
INFO  00:54:22,646 - #5 if
INFO  00:54:22,646 - #40 (
INFO  00:54:22,646 - #49 x
INFO  00:54:22,646 - #32 <
INFO  00:54:22,646 - #52 3
INFO  00:54:22,646 - #41 )
INFO  00:54:22,646 - #12 print
INFO  00:54:22,646 - #40 (
INFO  00:54:22,646 - #51 x
INFO  00:54:22,646 - #41 )
INFO  00:54:22,646 - #38 ;
INFO  00:54:22,646 - #6 else
INFO  00:54:22,646 - #12 print
INFO  00:54:22,646 - #40 (
INFO  00:54:22,646 - #51 p
INFO  00:54:22,646 - #41 )
INFO  00:54:22,646 - #38 ;
INFO  00:54:22,647 - #5 if
INFO  00:54:22,647 - #40 (
INFO  00:54:22,647 - #49 x
INFO  00:54:22,647 - #30 >
INFO  00:54:22,647 - #52 2
INFO  00:54:22,647 - #34 &&
INFO  00:54:22,647 - #49 y
INFO  00:54:22,647 - #32 <
INFO  00:54:22,647 - #52 6
INFO  00:54:22,647 - #41 )
INFO  00:54:22,647 - #12 print
INFO  00:54:22,647 - #40 (
INFO  00:54:22,647 - #51 m
INFO  00:54:22,647 - #41 )
INFO  00:54:22,647 - #38 ;
INFO  00:54:22,647 - #5 if
INFO  00:54:22,647 - #40 (
INFO  00:54:22,647 - #49 x
INFO  00:54:22,647 - #30 >
INFO  00:54:22,647 - #52 2
INFO  00:54:22,647 - #35 ||
INFO  00:54:22,647 - #49 y
INFO  00:54:22,647 - #32 <
INFO  00:54:22,648 - #52 5
INFO  00:54:22,648 - #34 &&
INFO  00:54:22,648 - #49 x
INFO  00:54:22,648 - #30 >
INFO  00:54:22,648 - #52 2
INFO  00:54:22,648 - #41 )
INFO  00:54:22,648 - #44 {
INFO  00:54:22,648 - #12 print
INFO  00:54:22,648 - #40 (
INFO  00:54:22,648 - #51 n
INFO  00:54:22,648 - #41 )
INFO  00:54:22,648 - #38 ;
INFO  00:54:22,648 - #45 }
INFO  00:54:22,648 - #5 if
INFO  00:54:22,648 - #40 (
INFO  00:54:22,648 - #49 x
INFO  00:54:22,648 - #32 <
INFO  00:54:22,648 - #52 3
INFO  00:54:22,648 - #35 ||
INFO  00:54:22,648 - #49 y
INFO  00:54:22,648 - #32 <
INFO  00:54:22,648 - #52 6
INFO  00:54:22,648 - #34 &&
INFO  00:54:22,648 - #49 x
INFO  00:54:22,648 - #30 >
INFO  00:54:22,648 - #52 3
INFO  00:54:22,648 - #41 )
INFO  00:54:22,648 - #44 {
INFO  00:54:22,648 - #12 print
INFO  00:54:22,648 - #40 (
INFO  00:54:22,648 - #51 q
INFO  00:54:22,648 - #41 )
INFO  00:54:22,648 - #38 ;
INFO  00:54:22,648 - #45 }
INFO  00:54:22,649 - #45 }
INFO  00:54:22,649 - #45 }
INFO  00:54:22,649 - #45 }
INFO  00:54:22,649 - #45 }
INFO  00:54:22,652 - Line 7: Using global variable name: x
INFO  00:54:22,652 - Line 8: Using global variable name: y
INFO  00:54:22,652 - Line 9: Using global variable name: x
INFO  00:54:22,653 - Line 11: Using global variable name: x
INFO  00:54:22,653 - Line 15: Using global variable name: y
INFO  00:54:22,653 - Line 19: Using global variable name: x
INFO  00:54:22,653 - Line 22: Using global variable name: x
INFO  00:54:22,653 - Line 22: Using global variable name: y
INFO  00:54:22,653 - Line 24: Using global variable name: x
INFO  00:54:22,653 - Line 24: Using global variable name: y
INFO  00:54:22,653 - Line 24: Using global variable name: x
INFO  00:54:22,653 - Line 28: Using global variable name: x
INFO  00:54:22,653 - Line 28: Using global variable name: y
INFO  00:54:22,653 - Line 28: Using global variable name: x
INFO  00:54:22,654 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:24:05,719 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:24:05,738 - #2 program
INFO  01:24:05,738 - #49 MJProgram
INFO  01:24:05,738 - #49 int
INFO  01:24:05,738 - #49 x
INFO  01:24:05,738 - #38 ;
INFO  01:24:05,739 - #49 int
INFO  01:24:05,739 - #49 y
INFO  01:24:05,739 - #38 ;
INFO  01:24:05,739 - #44 {
INFO  01:24:05,739 - #14 void
INFO  01:24:05,739 - #49 main
INFO  01:24:05,739 - #40 (
INFO  01:24:05,740 - #41 )
INFO  01:24:05,740 - #49 int
INFO  01:24:05,740 - #49 niz
INFO  01:24:05,740 - #42 [
INFO  01:24:05,740 - #43 ]
INFO  01:24:05,740 - #38 ;
INFO  01:24:05,740 - #44 {
INFO  01:24:05,741 - #49 x
INFO  01:24:05,741 - #27 =
INFO  01:24:05,741 - #52 3
INFO  01:24:05,741 - #38 ;
INFO  01:24:05,741 - #49 y
INFO  01:24:05,741 - #27 =
INFO  01:24:05,741 - #52 5
INFO  01:24:05,741 - #38 ;
INFO  01:24:05,741 - #5 if
INFO  01:24:05,741 - #40 (
INFO  01:24:05,741 - #49 x
INFO  01:24:05,741 - #32 <
INFO  01:24:05,741 - #52 1
INFO  01:24:05,742 - #41 )
INFO  01:24:05,742 - #44 {
INFO  01:24:05,742 - #12 print
INFO  01:24:05,742 - #40 (
INFO  01:24:05,742 - #52 1
INFO  01:24:05,742 - #41 )
INFO  01:24:05,742 - #38 ;
INFO  01:24:05,742 - #45 }
INFO  01:24:05,742 - #6 else
INFO  01:24:05,743 - #44 {
INFO  01:24:05,743 - #5 if
INFO  01:24:05,743 - #40 (
INFO  01:24:05,743 - #49 x
INFO  01:24:05,743 - #30 >
INFO  01:24:05,743 - #52 2
INFO  01:24:05,743 - #41 )
INFO  01:24:05,743 - #44 {
INFO  01:24:05,743 - #12 print
INFO  01:24:05,743 - #40 (
INFO  01:24:05,744 - #51 x
INFO  01:24:05,744 - #41 )
INFO  01:24:05,744 - #38 ;
INFO  01:24:05,744 - #45 }
INFO  01:24:05,744 - #5 if
INFO  01:24:05,744 - #40 (
INFO  01:24:05,744 - #49 y
INFO  01:24:05,744 - #32 <
INFO  01:24:05,744 - #52 4
INFO  01:24:05,744 - #41 )
INFO  01:24:05,744 - #44 {
INFO  01:24:05,744 - #12 print
INFO  01:24:05,744 - #40 (
INFO  01:24:05,744 - #51 y
INFO  01:24:05,744 - #41 )
INFO  01:24:05,744 - #38 ;
INFO  01:24:05,744 - #45 }
INFO  01:24:05,744 - #6 else
INFO  01:24:05,744 - #44 {
INFO  01:24:05,744 - #12 print
INFO  01:24:05,744 - #40 (
INFO  01:24:05,744 - #51 z
INFO  01:24:05,744 - #41 )
INFO  01:24:05,744 - #38 ;
INFO  01:24:05,744 - #5 if
INFO  01:24:05,744 - #40 (
INFO  01:24:05,744 - #49 x
INFO  01:24:05,744 - #32 <
INFO  01:24:05,744 - #52 3
INFO  01:24:05,744 - #41 )
INFO  01:24:05,744 - #12 print
INFO  01:24:05,745 - #40 (
INFO  01:24:05,745 - #51 x
INFO  01:24:05,745 - #41 )
INFO  01:24:05,745 - #38 ;
INFO  01:24:05,745 - #6 else
INFO  01:24:05,745 - #12 print
INFO  01:24:05,745 - #40 (
INFO  01:24:05,745 - #51 p
INFO  01:24:05,745 - #41 )
INFO  01:24:05,745 - #38 ;
INFO  01:24:05,745 - #5 if
INFO  01:24:05,745 - #40 (
INFO  01:24:05,745 - #49 x
INFO  01:24:05,745 - #30 >
INFO  01:24:05,745 - #52 2
INFO  01:24:05,745 - #34 &&
INFO  01:24:05,745 - #49 y
INFO  01:24:05,745 - #32 <
INFO  01:24:05,745 - #52 6
INFO  01:24:05,745 - #41 )
INFO  01:24:05,745 - #12 print
INFO  01:24:05,745 - #40 (
INFO  01:24:05,745 - #51 m
INFO  01:24:05,745 - #41 )
INFO  01:24:05,745 - #38 ;
INFO  01:24:05,745 - #5 if
INFO  01:24:05,745 - #40 (
INFO  01:24:05,746 - #49 x
INFO  01:24:05,746 - #30 >
INFO  01:24:05,746 - #52 2
INFO  01:24:05,746 - #35 ||
INFO  01:24:05,746 - #49 y
INFO  01:24:05,746 - #32 <
INFO  01:24:05,746 - #52 5
INFO  01:24:05,746 - #34 &&
INFO  01:24:05,746 - #49 x
INFO  01:24:05,746 - #30 >
INFO  01:24:05,746 - #52 2
INFO  01:24:05,746 - #41 )
INFO  01:24:05,746 - #44 {
INFO  01:24:05,746 - #12 print
INFO  01:24:05,746 - #40 (
INFO  01:24:05,746 - #51 n
INFO  01:24:05,746 - #41 )
INFO  01:24:05,746 - #38 ;
INFO  01:24:05,746 - #45 }
INFO  01:24:05,746 - #5 if
INFO  01:24:05,746 - #40 (
INFO  01:24:05,746 - #49 x
INFO  01:24:05,746 - #32 <
INFO  01:24:05,746 - #52 3
INFO  01:24:05,746 - #35 ||
INFO  01:24:05,746 - #49 y
INFO  01:24:05,747 - #32 <
INFO  01:24:05,747 - #52 6
INFO  01:24:05,747 - #34 &&
INFO  01:24:05,747 - #49 x
INFO  01:24:05,747 - #30 >
INFO  01:24:05,747 - #52 3
INFO  01:24:05,747 - #41 )
INFO  01:24:05,747 - #44 {
INFO  01:24:05,747 - #12 print
INFO  01:24:05,747 - #40 (
INFO  01:24:05,747 - #51 q
INFO  01:24:05,747 - #41 )
INFO  01:24:05,747 - #38 ;
INFO  01:24:05,747 - #45 }
INFO  01:24:05,747 - #45 }
INFO  01:24:05,747 - #45 }
INFO  01:24:05,747 - #45 }
INFO  01:24:05,747 - #45 }
INFO  01:24:05,750 - Line 7: Using global variable name: x
INFO  01:24:05,751 - Line 8: Using global variable name: y
INFO  01:24:05,751 - Line 9: Using global variable name: x
INFO  01:24:05,751 - Line 11: Using global variable name: x
INFO  01:24:05,751 - Line 15: Using global variable name: y
INFO  01:24:05,751 - Line 19: Using global variable name: x
INFO  01:24:05,751 - Line 22: Using global variable name: x
INFO  01:24:05,751 - Line 22: Using global variable name: y
INFO  01:24:05,751 - Line 24: Using global variable name: x
INFO  01:24:05,751 - Line 24: Using global variable name: y
INFO  01:24:05,751 - Line 24: Using global variable name: x
INFO  01:24:05,751 - Line 28: Using global variable name: x
INFO  01:24:05,751 - Line 28: Using global variable name: y
INFO  01:24:05,751 - Line 28: Using global variable name: x
INFO  01:24:05,752 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:25:11,017 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:25:11,037 - #2 program
INFO  01:25:11,037 - #49 MJProgram
INFO  01:25:11,037 - #49 int
INFO  01:25:11,037 - #49 x
INFO  01:25:11,038 - #38 ;
INFO  01:25:11,038 - #49 int
INFO  01:25:11,038 - #49 y
INFO  01:25:11,038 - #38 ;
INFO  01:25:11,038 - #44 {
INFO  01:25:11,038 - #14 void
INFO  01:25:11,038 - #49 main
INFO  01:25:11,039 - #40 (
INFO  01:25:11,039 - #41 )
INFO  01:25:11,039 - #49 int
INFO  01:25:11,039 - #49 niz
INFO  01:25:11,039 - #42 [
INFO  01:25:11,039 - #43 ]
INFO  01:25:11,039 - #38 ;
INFO  01:25:11,040 - #44 {
INFO  01:25:11,040 - #49 x
INFO  01:25:11,040 - #27 =
INFO  01:25:11,040 - #52 5
INFO  01:25:11,040 - #38 ;
INFO  01:25:11,041 - #49 y
INFO  01:25:11,041 - #27 =
INFO  01:25:11,041 - #52 0
INFO  01:25:11,041 - #38 ;
INFO  01:25:11,041 - #9 do
INFO  01:25:11,041 - #44 {
INFO  01:25:11,041 - #49 y
INFO  01:25:11,041 - #27 =
INFO  01:25:11,041 - #49 y
INFO  01:25:11,041 - #22 +
INFO  01:25:11,041 - #52 10
INFO  01:25:11,042 - #38 ;
INFO  01:25:11,042 - #49 x
INFO  01:25:11,042 - #37 --
INFO  01:25:11,042 - #38 ;
INFO  01:25:11,042 - #45 }
INFO  01:25:11,042 - #10 while
INFO  01:25:11,042 - #40 (
INFO  01:25:11,042 - #49 x
INFO  01:25:11,042 - #30 >
INFO  01:25:11,042 - #52 0
INFO  01:25:11,043 - #41 )
INFO  01:25:11,043 - #38 ;
INFO  01:25:11,043 - #12 print
INFO  01:25:11,043 - #40 (
INFO  01:25:11,043 - #49 y
INFO  01:25:11,043 - #41 )
INFO  01:25:11,044 - #38 ;
INFO  01:25:11,044 - #45 }
INFO  01:25:11,044 - #45 }
INFO  01:25:11,047 - Line 7: Using global variable name: x
INFO  01:25:11,047 - Line 8: Using global variable name: y
INFO  01:25:11,047 - Line 10: Using global variable name: y
INFO  01:25:11,048 - Line 10: Using global variable name: y
INFO  01:25:11,048 - Line 11: Using global variable name: x
INFO  01:25:11,048 - Line 12: Using global variable name: x
INFO  01:25:11,048 - Line 13: Using global variable name: y
INFO  01:25:11,049 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:25:41,962 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:25:41,986 - #2 program
INFO  01:25:41,986 - #49 MJProgram
INFO  01:25:41,986 - #49 int
INFO  01:25:41,986 - #49 x
INFO  01:25:41,986 - #38 ;
INFO  01:25:41,987 - #49 int
INFO  01:25:41,987 - #49 y
INFO  01:25:41,987 - #38 ;
INFO  01:25:41,987 - #44 {
INFO  01:25:41,987 - #14 void
INFO  01:25:41,987 - #49 main
INFO  01:25:41,988 - #40 (
INFO  01:25:41,988 - #41 )
INFO  01:25:41,988 - #49 int
INFO  01:25:41,988 - #49 niz
INFO  01:25:41,988 - #42 [
INFO  01:25:41,988 - #43 ]
INFO  01:25:41,988 - #38 ;
INFO  01:25:41,989 - #44 {
INFO  01:25:41,989 - #49 x
INFO  01:25:41,989 - #27 =
INFO  01:25:41,989 - #52 5
INFO  01:25:41,989 - #38 ;
INFO  01:25:41,990 - #49 y
INFO  01:25:41,990 - #27 =
INFO  01:25:41,990 - #52 0
INFO  01:25:41,990 - #38 ;
INFO  01:25:41,990 - #9 do
INFO  01:25:41,990 - #44 {
INFO  01:25:41,990 - #49 y
INFO  01:25:41,990 - #27 =
INFO  01:25:41,990 - #49 y
INFO  01:25:41,990 - #22 +
INFO  01:25:41,990 - #52 10
INFO  01:25:41,990 - #38 ;
INFO  01:25:41,991 - #49 x
INFO  01:25:41,991 - #37 --
INFO  01:25:41,991 - #38 ;
INFO  01:25:41,991 - #45 }
INFO  01:25:41,991 - #10 while
INFO  01:25:41,991 - #40 (
INFO  01:25:41,991 - #49 x
INFO  01:25:41,991 - #30 >
INFO  01:25:41,991 - #52 0
INFO  01:25:41,991 - #41 )
INFO  01:25:41,992 - #38 ;
INFO  01:25:41,992 - #12 print
INFO  01:25:41,992 - #40 (
INFO  01:25:41,992 - #49 y
INFO  01:25:41,992 - #41 )
INFO  01:25:41,992 - #38 ;
INFO  01:25:41,992 - #45 }
INFO  01:25:41,992 - #45 }
INFO  01:25:42,002 - Line 7: Using global variable name: x
INFO  01:25:42,002 - Line 8: Using global variable name: y
INFO  01:25:42,002 - Line 10: Using global variable name: y
INFO  01:25:42,002 - Line 10: Using global variable name: y
INFO  01:25:42,002 - Line 11: Using global variable name: x
INFO  01:25:42,002 - Line 12: Using global variable name: x
INFO  01:25:42,002 - Line 13: Using global variable name: y
INFO  01:26:28,398 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:26:28,417 - #2 program
INFO  01:26:28,417 - #49 MJProgram
INFO  01:26:28,417 - #49 int
INFO  01:26:28,418 - #49 x
INFO  01:26:28,418 - #38 ;
INFO  01:26:28,418 - #49 int
INFO  01:26:28,418 - #49 y
INFO  01:26:28,419 - #38 ;
INFO  01:26:28,419 - #44 {
INFO  01:26:28,419 - #14 void
INFO  01:26:28,419 - #49 main
INFO  01:26:28,419 - #40 (
INFO  01:26:28,419 - #41 )
INFO  01:26:28,419 - #49 int
INFO  01:26:28,420 - #49 niz
INFO  01:26:28,420 - #42 [
INFO  01:26:28,420 - #43 ]
INFO  01:26:28,420 - #38 ;
INFO  01:26:28,420 - #44 {
INFO  01:26:28,420 - #49 x
INFO  01:26:28,420 - #27 =
INFO  01:26:28,421 - #52 5
INFO  01:26:28,421 - #38 ;
INFO  01:26:28,421 - #49 y
INFO  01:26:28,421 - #27 =
INFO  01:26:28,421 - #52 0
INFO  01:26:28,421 - #38 ;
INFO  01:26:28,421 - #9 do
INFO  01:26:28,421 - #44 {
INFO  01:26:28,421 - #49 y
INFO  01:26:28,421 - #27 =
INFO  01:26:28,421 - #49 y
INFO  01:26:28,421 - #22 +
INFO  01:26:28,421 - #52 10
INFO  01:26:28,422 - #38 ;
INFO  01:26:28,422 - #49 x
INFO  01:26:28,422 - #37 --
INFO  01:26:28,422 - #38 ;
INFO  01:26:28,422 - #45 }
INFO  01:26:28,422 - #10 while
INFO  01:26:28,422 - #40 (
INFO  01:26:28,422 - #49 x
INFO  01:26:28,422 - #30 >
INFO  01:26:28,422 - #52 0
INFO  01:26:28,423 - #41 )
INFO  01:26:28,423 - #38 ;
INFO  01:26:28,423 - #12 print
INFO  01:26:28,423 - #40 (
INFO  01:26:28,423 - #49 y
INFO  01:26:28,423 - #41 )
INFO  01:26:28,423 - #38 ;
INFO  01:26:28,423 - #45 }
INFO  01:26:28,423 - #45 }
INFO  01:26:28,427 - Line 7: Using global variable name: x
INFO  01:26:28,427 - Line 8: Using global variable name: y
INFO  01:26:28,427 - Line 10: Using global variable name: y
INFO  01:26:28,427 - Line 10: Using global variable name: y
INFO  01:26:28,427 - Line 11: Using global variable name: x
INFO  01:26:28,427 - Line 12: Using global variable name: x
INFO  01:26:28,427 - Line 13: Using global variable name: y
INFO  01:26:28,428 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:29:53,962 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:29:53,980 - #2 program
INFO  01:29:53,980 - #49 MJProgram
INFO  01:29:53,980 - #49 int
INFO  01:29:53,980 - #49 x
INFO  01:29:53,981 - #38 ;
INFO  01:29:53,981 - #49 int
INFO  01:29:53,981 - #49 y
INFO  01:29:53,981 - #38 ;
INFO  01:29:53,981 - #44 {
INFO  01:29:53,981 - #14 void
INFO  01:29:53,982 - #49 main
INFO  01:29:53,982 - #40 (
INFO  01:29:53,982 - #41 )
INFO  01:29:53,982 - #49 int
INFO  01:29:53,982 - #49 niz
INFO  01:29:53,982 - #42 [
INFO  01:29:53,982 - #43 ]
INFO  01:29:53,982 - #38 ;
INFO  01:29:53,983 - #44 {
INFO  01:29:53,983 - #49 x
INFO  01:29:53,983 - #27 =
INFO  01:29:53,983 - #52 5
INFO  01:29:53,983 - #38 ;
INFO  01:29:53,983 - #49 y
INFO  01:29:53,983 - #27 =
INFO  01:29:53,983 - #52 0
INFO  01:29:53,983 - #38 ;
INFO  01:29:53,984 - #9 do
INFO  01:29:53,984 - #44 {
INFO  01:29:53,984 - #49 y
INFO  01:29:53,984 - #27 =
INFO  01:29:53,984 - #49 y
INFO  01:29:53,984 - #22 +
INFO  01:29:53,984 - #52 10
INFO  01:29:53,984 - #38 ;
INFO  01:29:53,984 - #49 x
INFO  01:29:53,984 - #37 --
INFO  01:29:53,984 - #38 ;
INFO  01:29:53,984 - #45 }
INFO  01:29:53,984 - #10 while
INFO  01:29:53,985 - #40 (
INFO  01:29:53,985 - #49 x
INFO  01:29:53,985 - #30 >
INFO  01:29:53,985 - #52 0
INFO  01:29:53,985 - #41 )
INFO  01:29:53,985 - #38 ;
INFO  01:29:53,986 - #12 print
INFO  01:29:53,986 - #40 (
INFO  01:29:53,986 - #49 y
INFO  01:29:53,986 - #41 )
INFO  01:29:53,986 - #38 ;
INFO  01:29:53,986 - #45 }
INFO  01:29:53,986 - #45 }
INFO  01:29:53,990 - Line 7: Using global variable name: x
INFO  01:29:53,990 - Line 8: Using global variable name: y
INFO  01:29:53,990 - Line 10: Using global variable name: y
INFO  01:29:53,990 - Line 10: Using global variable name: y
INFO  01:29:53,990 - Line 11: Using global variable name: x
INFO  01:29:53,990 - Line 12: Using global variable name: x
INFO  01:29:53,990 - Line 13: Using global variable name: y
INFO  01:29:53,991 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:30:15,571 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:30:15,590 - #2 program
INFO  01:30:15,590 - #49 MJProgram
INFO  01:30:15,590 - #49 int
INFO  01:30:15,590 - #49 x
INFO  01:30:15,591 - #38 ;
INFO  01:30:15,591 - #49 int
INFO  01:30:15,591 - #49 y
INFO  01:30:15,591 - #38 ;
INFO  01:30:15,591 - #44 {
INFO  01:30:15,591 - #14 void
INFO  01:30:15,591 - #49 main
INFO  01:30:15,592 - #40 (
INFO  01:30:15,592 - #41 )
INFO  01:30:15,592 - #49 int
INFO  01:30:15,592 - #49 niz
INFO  01:30:15,592 - #42 [
INFO  01:30:15,592 - #43 ]
INFO  01:30:15,592 - #38 ;
INFO  01:30:15,593 - #44 {
INFO  01:30:15,593 - #49 x
INFO  01:30:15,593 - #27 =
INFO  01:30:15,593 - #52 5
INFO  01:30:15,593 - #38 ;
INFO  01:30:15,594 - #49 y
INFO  01:30:15,594 - #27 =
INFO  01:30:15,594 - #52 0
INFO  01:30:15,594 - #38 ;
INFO  01:30:15,594 - #9 do
INFO  01:30:15,594 - #44 {
INFO  01:30:15,594 - #49 y
INFO  01:30:15,594 - #27 =
INFO  01:30:15,594 - #49 y
INFO  01:30:15,594 - #22 +
INFO  01:30:15,594 - #52 10
INFO  01:30:15,595 - #38 ;
INFO  01:30:15,595 - #49 x
INFO  01:30:15,595 - #37 --
INFO  01:30:15,595 - #38 ;
INFO  01:30:15,595 - #45 }
INFO  01:30:15,595 - #10 while
INFO  01:30:15,595 - #40 (
INFO  01:30:15,595 - #49 x
INFO  01:30:15,595 - #30 >
INFO  01:30:15,595 - #52 0
INFO  01:30:15,596 - #41 )
INFO  01:30:15,596 - #38 ;
INFO  01:30:15,596 - #12 print
INFO  01:30:15,596 - #40 (
INFO  01:30:15,596 - #49 y
INFO  01:30:15,596 - #41 )
INFO  01:30:15,597 - #38 ;
INFO  01:30:15,597 - #45 }
INFO  01:30:15,597 - #45 }
INFO  01:30:15,600 - Line 7: Using global variable name: x
INFO  01:30:15,600 - Line 8: Using global variable name: y
INFO  01:30:15,600 - Line 10: Using global variable name: y
INFO  01:30:15,600 - Line 10: Using global variable name: y
INFO  01:30:15,600 - Line 11: Using global variable name: x
INFO  01:30:15,600 - Line 12: Using global variable name: x
INFO  01:30:15,600 - Line 13: Using global variable name: y
INFO  01:30:15,602 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:30:49,435 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:30:49,453 - #2 program
INFO  01:30:49,453 - #49 MJProgram
INFO  01:30:49,454 - #49 int
INFO  01:30:49,454 - #49 x
INFO  01:30:49,454 - #38 ;
INFO  01:30:49,454 - #49 int
INFO  01:30:49,455 - #49 y
INFO  01:30:49,455 - #38 ;
INFO  01:30:49,455 - #44 {
INFO  01:30:49,455 - #14 void
INFO  01:30:49,455 - #49 main
INFO  01:30:49,455 - #40 (
INFO  01:30:49,455 - #41 )
INFO  01:30:49,455 - #49 int
INFO  01:30:49,456 - #49 niz
INFO  01:30:49,456 - #42 [
INFO  01:30:49,456 - #43 ]
INFO  01:30:49,456 - #38 ;
INFO  01:30:49,456 - #44 {
INFO  01:30:49,456 - #49 x
INFO  01:30:49,457 - #27 =
INFO  01:30:49,457 - #52 5
INFO  01:30:49,457 - #38 ;
INFO  01:30:49,457 - #49 y
INFO  01:30:49,457 - #27 =
INFO  01:30:49,457 - #52 0
INFO  01:30:49,457 - #38 ;
INFO  01:30:49,457 - #9 do
INFO  01:30:49,457 - #44 {
INFO  01:30:49,457 - #49 y
INFO  01:30:49,457 - #27 =
INFO  01:30:49,458 - #49 y
INFO  01:30:49,458 - #22 +
INFO  01:30:49,458 - #52 10
INFO  01:30:49,458 - #38 ;
INFO  01:30:49,458 - #49 x
INFO  01:30:49,458 - #37 --
INFO  01:30:49,458 - #38 ;
INFO  01:30:49,458 - #45 }
INFO  01:30:49,458 - #10 while
INFO  01:30:49,458 - #40 (
INFO  01:30:49,458 - #49 x
INFO  01:30:49,458 - #30 >
INFO  01:30:49,459 - #52 0
INFO  01:30:49,459 - #41 )
INFO  01:30:49,459 - #38 ;
INFO  01:30:49,460 - #12 print
INFO  01:30:49,460 - #40 (
INFO  01:30:49,460 - #49 y
INFO  01:30:49,460 - #41 )
INFO  01:30:49,460 - #38 ;
INFO  01:30:49,460 - #45 }
INFO  01:30:49,460 - #45 }
INFO  01:30:49,463 - Line 7: Using global variable name: x
INFO  01:30:49,463 - Line 8: Using global variable name: y
INFO  01:30:49,463 - Line 10: Using global variable name: y
INFO  01:30:49,464 - Line 10: Using global variable name: y
INFO  01:30:49,464 - Line 11: Using global variable name: x
INFO  01:30:49,464 - Line 12: Using global variable name: x
INFO  01:30:49,464 - Line 13: Using global variable name: y
INFO  01:30:49,465 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:31:00,194 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:31:00,212 - #2 program
INFO  01:31:00,212 - #49 MJProgram
INFO  01:31:00,212 - #49 int
INFO  01:31:00,213 - #49 x
INFO  01:31:00,213 - #38 ;
INFO  01:31:00,213 - #49 int
INFO  01:31:00,213 - #49 y
INFO  01:31:00,213 - #38 ;
INFO  01:31:00,213 - #44 {
INFO  01:31:00,213 - #14 void
INFO  01:31:00,214 - #49 main
INFO  01:31:00,214 - #40 (
INFO  01:31:00,214 - #41 )
INFO  01:31:00,214 - #49 int
INFO  01:31:00,214 - #49 niz
INFO  01:31:00,214 - #42 [
INFO  01:31:00,214 - #43 ]
INFO  01:31:00,214 - #38 ;
INFO  01:31:00,215 - #44 {
INFO  01:31:00,215 - #49 x
INFO  01:31:00,215 - #27 =
INFO  01:31:00,215 - #52 5
INFO  01:31:00,215 - #38 ;
INFO  01:31:00,215 - #49 y
INFO  01:31:00,215 - #27 =
INFO  01:31:00,216 - #52 0
INFO  01:31:00,216 - #38 ;
INFO  01:31:00,216 - #9 do
INFO  01:31:00,216 - #44 {
INFO  01:31:00,216 - #49 y
INFO  01:31:00,216 - #27 =
INFO  01:31:00,216 - #49 y
INFO  01:31:00,216 - #22 +
INFO  01:31:00,216 - #52 10
INFO  01:31:00,216 - #38 ;
INFO  01:31:00,216 - #49 x
INFO  01:31:00,216 - #37 --
INFO  01:31:00,216 - #38 ;
INFO  01:31:00,217 - #45 }
INFO  01:31:00,217 - #10 while
INFO  01:31:00,217 - #40 (
INFO  01:31:00,217 - #49 x
INFO  01:31:00,217 - #30 >
INFO  01:31:00,217 - #52 0
INFO  01:31:00,217 - #41 )
INFO  01:31:00,217 - #38 ;
INFO  01:31:00,218 - #12 print
INFO  01:31:00,218 - #40 (
INFO  01:31:00,218 - #49 y
INFO  01:31:00,218 - #41 )
INFO  01:31:00,218 - #38 ;
INFO  01:31:00,218 - #45 }
INFO  01:31:00,218 - #45 }
INFO  01:31:00,221 - Line 7: Using global variable name: x
INFO  01:31:00,221 - Line 8: Using global variable name: y
INFO  01:31:00,222 - Line 10: Using global variable name: y
INFO  01:31:00,222 - Line 10: Using global variable name: y
INFO  01:31:00,222 - Line 11: Using global variable name: x
INFO  01:31:00,222 - Line 12: Using global variable name: x
INFO  01:31:00,222 - Line 13: Using global variable name: y
INFO  01:31:00,223 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:31:48,946 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:31:48,965 - #2 program
INFO  01:31:48,965 - #49 MJProgram
INFO  01:31:48,965 - #49 int
INFO  01:31:48,965 - #49 x
INFO  01:31:48,965 - #38 ;
INFO  01:31:48,966 - #49 int
INFO  01:31:48,966 - #49 y
INFO  01:31:48,966 - #38 ;
INFO  01:31:48,966 - #44 {
INFO  01:31:48,966 - #14 void
INFO  01:31:48,966 - #49 main
INFO  01:31:48,966 - #40 (
INFO  01:31:48,967 - #41 )
INFO  01:31:48,967 - #49 int
INFO  01:31:48,967 - #49 niz
INFO  01:31:48,967 - #42 [
INFO  01:31:48,967 - #43 ]
INFO  01:31:48,967 - #38 ;
INFO  01:31:48,967 - #44 {
INFO  01:31:48,967 - #49 x
INFO  01:31:48,968 - #27 =
INFO  01:31:48,968 - #52 5
INFO  01:31:48,968 - #38 ;
INFO  01:31:48,968 - #49 y
INFO  01:31:48,968 - #27 =
INFO  01:31:48,968 - #52 0
INFO  01:31:48,968 - #38 ;
INFO  01:31:48,968 - #9 do
INFO  01:31:48,968 - #44 {
INFO  01:31:48,968 - #49 y
INFO  01:31:48,968 - #27 =
INFO  01:31:48,969 - #49 y
INFO  01:31:48,969 - #22 +
INFO  01:31:48,969 - #52 10
INFO  01:31:48,969 - #38 ;
INFO  01:31:48,969 - #49 x
INFO  01:31:48,969 - #37 --
INFO  01:31:48,969 - #38 ;
INFO  01:31:48,969 - #45 }
INFO  01:31:48,969 - #10 while
INFO  01:31:48,969 - #40 (
INFO  01:31:48,969 - #49 x
INFO  01:31:48,969 - #30 >
INFO  01:31:48,970 - #52 0
INFO  01:31:48,970 - #41 )
INFO  01:31:48,970 - #38 ;
INFO  01:31:48,970 - #12 print
INFO  01:31:48,971 - #40 (
INFO  01:31:48,971 - #49 y
INFO  01:31:48,971 - #41 )
INFO  01:31:48,971 - #38 ;
INFO  01:31:48,971 - #45 }
INFO  01:31:48,971 - #45 }
INFO  01:31:48,974 - Line 7: Using global variable name: x
INFO  01:31:48,974 - Line 8: Using global variable name: y
INFO  01:31:48,974 - Line 10: Using global variable name: y
INFO  01:31:48,974 - Line 10: Using global variable name: y
INFO  01:31:48,975 - Line 11: Using global variable name: x
INFO  01:31:48,975 - Line 12: Using global variable name: x
INFO  01:31:48,975 - Line 13: Using global variable name: y
INFO  01:31:48,976 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:32:45,602 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:32:45,622 - #2 program
INFO  01:32:45,622 - #49 MJProgram
INFO  01:32:45,622 - #49 int
INFO  01:32:45,622 - #49 x
INFO  01:32:45,622 - #38 ;
INFO  01:32:45,623 - #49 int
INFO  01:32:45,623 - #49 y
INFO  01:32:45,623 - #38 ;
INFO  01:32:45,623 - #44 {
INFO  01:32:45,623 - #14 void
INFO  01:32:45,623 - #49 main
INFO  01:32:45,624 - #40 (
INFO  01:32:45,624 - #41 )
INFO  01:32:45,624 - #49 int
INFO  01:32:45,624 - #49 niz
INFO  01:32:45,624 - #42 [
INFO  01:32:45,624 - #43 ]
INFO  01:32:45,624 - #38 ;
INFO  01:32:45,625 - #44 {
INFO  01:32:45,625 - #49 x
INFO  01:32:45,625 - #27 =
INFO  01:32:45,625 - #52 5
INFO  01:32:45,625 - #38 ;
INFO  01:32:45,625 - #49 y
INFO  01:32:45,625 - #27 =
INFO  01:32:45,626 - #52 0
INFO  01:32:45,626 - #38 ;
INFO  01:32:45,626 - #9 do
INFO  01:32:45,626 - #44 {
INFO  01:32:45,626 - #49 y
INFO  01:32:45,626 - #27 =
INFO  01:32:45,626 - #49 y
INFO  01:32:45,626 - #22 +
INFO  01:32:45,626 - #52 10
INFO  01:32:45,626 - #38 ;
INFO  01:32:45,626 - #49 x
INFO  01:32:45,626 - #37 --
INFO  01:32:45,626 - #38 ;
INFO  01:32:45,627 - #45 }
INFO  01:32:45,627 - #10 while
INFO  01:32:45,627 - #40 (
INFO  01:32:45,627 - #49 x
INFO  01:32:45,627 - #30 >
INFO  01:32:45,627 - #52 0
INFO  01:32:45,627 - #41 )
INFO  01:32:45,627 - #38 ;
INFO  01:32:45,628 - #12 print
INFO  01:32:45,628 - #40 (
INFO  01:32:45,628 - #49 y
INFO  01:32:45,628 - #41 )
INFO  01:32:45,628 - #38 ;
INFO  01:32:45,628 - #45 }
INFO  01:32:45,628 - #45 }
INFO  01:32:45,631 - Line 7: Using global variable name: x
INFO  01:32:45,632 - Line 8: Using global variable name: y
INFO  01:32:45,632 - Line 10: Using global variable name: y
INFO  01:32:45,632 - Line 10: Using global variable name: y
INFO  01:32:45,632 - Line 11: Using global variable name: x
INFO  01:32:45,632 - Line 12: Using global variable name: x
INFO  01:32:45,632 - Line 13: Using global variable name: y
INFO  01:32:45,633 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:44:48,654 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:44:48,674 - #2 program
INFO  01:44:48,674 - #49 MJProgram
INFO  01:44:48,674 - #49 int
INFO  01:44:48,674 - #49 x
INFO  01:44:48,674 - #38 ;
INFO  01:44:48,675 - #49 int
INFO  01:44:48,675 - #49 y
INFO  01:44:48,675 - #38 ;
INFO  01:44:48,675 - #44 {
INFO  01:44:48,675 - #14 void
INFO  01:44:48,675 - #49 main
INFO  01:44:48,675 - #40 (
INFO  01:44:48,676 - #41 )
INFO  01:44:48,676 - #49 int
INFO  01:44:48,676 - #49 niz
INFO  01:44:48,676 - #42 [
INFO  01:44:48,676 - #43 ]
INFO  01:44:48,676 - #38 ;
INFO  01:44:48,676 - #44 {
INFO  01:44:48,677 - #49 x
INFO  01:44:48,677 - #27 =
INFO  01:44:48,677 - #52 5
INFO  01:44:48,677 - #38 ;
INFO  01:44:48,677 - #49 y
INFO  01:44:48,677 - #27 =
INFO  01:44:48,677 - #52 0
INFO  01:44:48,677 - #38 ;
INFO  01:44:48,677 - #9 do
INFO  01:44:48,677 - #44 {
INFO  01:44:48,677 - #49 y
INFO  01:44:48,678 - #27 =
INFO  01:44:48,678 - #49 y
INFO  01:44:48,678 - #22 +
INFO  01:44:48,678 - #52 10
INFO  01:44:48,678 - #38 ;
INFO  01:44:48,678 - #49 x
INFO  01:44:48,678 - #37 --
INFO  01:44:48,678 - #38 ;
INFO  01:44:48,678 - #45 }
INFO  01:44:48,678 - #10 while
INFO  01:44:48,678 - #40 (
INFO  01:44:48,678 - #49 x
INFO  01:44:48,678 - #30 >
INFO  01:44:48,678 - #52 0
INFO  01:44:48,679 - #41 )
INFO  01:44:48,679 - #38 ;
INFO  01:44:48,679 - #12 print
INFO  01:44:48,679 - #40 (
INFO  01:44:48,679 - #49 y
INFO  01:44:48,679 - #41 )
INFO  01:44:48,679 - #38 ;
INFO  01:44:48,679 - #45 }
INFO  01:44:48,680 - #45 }
INFO  01:44:48,683 - Line 7: Using global variable name: x
INFO  01:44:48,683 - Line 8: Using global variable name: y
INFO  01:44:48,683 - Line 10: Using global variable name: y
INFO  01:44:48,683 - Line 10: Using global variable name: y
INFO  01:44:48,683 - Line 11: Using global variable name: x
INFO  01:44:48,683 - Line 12: Using global variable name: x
INFO  01:44:48,683 - Line 13: Using global variable name: y
INFO  01:44:48,685 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:45:14,791 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:45:14,809 - #2 program
INFO  01:45:14,809 - #49 MJProgram
INFO  01:45:14,809 - #49 int
INFO  01:45:14,809 - #49 x
INFO  01:45:14,809 - #38 ;
INFO  01:45:14,810 - #49 int
INFO  01:45:14,810 - #49 y
INFO  01:45:14,810 - #38 ;
INFO  01:45:14,810 - #44 {
INFO  01:45:14,810 - #14 void
INFO  01:45:14,810 - #49 main
INFO  01:45:14,811 - #40 (
INFO  01:45:14,811 - #41 )
INFO  01:45:14,811 - #49 int
INFO  01:45:14,811 - #49 niz
INFO  01:45:14,811 - #42 [
INFO  01:45:14,811 - #43 ]
INFO  01:45:14,811 - #38 ;
INFO  01:45:14,812 - #44 {
INFO  01:45:14,812 - #49 x
INFO  01:45:14,812 - #27 =
INFO  01:45:14,812 - #52 5
INFO  01:45:14,812 - #38 ;
INFO  01:45:14,812 - #49 y
INFO  01:45:14,812 - #27 =
INFO  01:45:14,812 - #52 0
INFO  01:45:14,812 - #38 ;
INFO  01:45:14,812 - #9 do
INFO  01:45:14,812 - #44 {
INFO  01:45:14,813 - #3 break
INFO  01:45:14,813 - #38 ;
INFO  01:45:14,813 - #49 y
INFO  01:45:14,813 - #27 =
INFO  01:45:14,813 - #49 y
INFO  01:45:14,813 - #22 +
INFO  01:45:14,813 - #52 10
INFO  01:45:14,813 - #38 ;
INFO  01:45:14,814 - #49 x
INFO  01:45:14,814 - #37 --
INFO  01:45:14,814 - #38 ;
INFO  01:45:14,814 - #45 }
INFO  01:45:14,814 - #10 while
INFO  01:45:14,814 - #40 (
INFO  01:45:14,814 - #49 x
INFO  01:45:14,814 - #30 >
INFO  01:45:14,814 - #52 0
INFO  01:45:14,814 - #41 )
INFO  01:45:14,815 - #38 ;
INFO  01:45:14,815 - #12 print
INFO  01:45:14,815 - #40 (
INFO  01:45:14,815 - #49 y
INFO  01:45:14,815 - #41 )
INFO  01:45:14,815 - #38 ;
INFO  01:45:14,815 - #45 }
INFO  01:45:14,815 - #45 }
INFO  01:45:14,819 - Line 7: Using global variable name: x
INFO  01:45:14,819 - Line 8: Using global variable name: y
INFO  01:45:14,819 - Line 11: Using global variable name: y
INFO  01:45:14,819 - Line 11: Using global variable name: y
INFO  01:45:14,819 - Line 12: Using global variable name: x
INFO  01:45:14,819 - Line 13: Using global variable name: x
INFO  01:45:14,819 - Line 14: Using global variable name: y
INFO  01:45:14,820 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:45:32,260 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:45:32,282 - #2 program
INFO  01:45:32,282 - #49 MJProgram
INFO  01:45:32,282 - #49 int
INFO  01:45:32,283 - #49 x
INFO  01:45:32,283 - #38 ;
INFO  01:45:32,283 - #49 int
INFO  01:45:32,284 - #49 y
INFO  01:45:32,284 - #38 ;
INFO  01:45:32,284 - #44 {
INFO  01:45:32,284 - #14 void
INFO  01:45:32,284 - #49 main
INFO  01:45:32,284 - #40 (
INFO  01:45:32,284 - #41 )
INFO  01:45:32,284 - #49 int
INFO  01:45:32,285 - #49 niz
INFO  01:45:32,285 - #42 [
INFO  01:45:32,285 - #43 ]
INFO  01:45:32,285 - #38 ;
INFO  01:45:32,285 - #44 {
INFO  01:45:32,286 - #49 x
INFO  01:45:32,286 - #27 =
INFO  01:45:32,286 - #52 5
INFO  01:45:32,286 - #38 ;
INFO  01:45:32,286 - #49 y
INFO  01:45:32,286 - #27 =
INFO  01:45:32,286 - #52 0
INFO  01:45:32,286 - #38 ;
INFO  01:45:32,286 - #9 do
INFO  01:45:32,286 - #44 {
INFO  01:45:32,286 - #49 y
INFO  01:45:32,287 - #27 =
INFO  01:45:32,287 - #49 y
INFO  01:45:32,287 - #22 +
INFO  01:45:32,287 - #52 10
INFO  01:45:32,287 - #38 ;
INFO  01:45:32,287 - #49 x
INFO  01:45:32,287 - #37 --
INFO  01:45:32,287 - #38 ;
INFO  01:45:32,287 - #3 break
INFO  01:45:32,287 - #38 ;
INFO  01:45:32,287 - #45 }
INFO  01:45:32,288 - #10 while
INFO  01:45:32,288 - #40 (
INFO  01:45:32,288 - #49 x
INFO  01:45:32,288 - #30 >
INFO  01:45:32,288 - #52 0
INFO  01:45:32,288 - #41 )
INFO  01:45:32,288 - #38 ;
INFO  01:45:32,289 - #12 print
INFO  01:45:32,289 - #40 (
INFO  01:45:32,289 - #49 y
INFO  01:45:32,289 - #41 )
INFO  01:45:32,289 - #38 ;
INFO  01:45:32,289 - #45 }
INFO  01:45:32,289 - #45 }
INFO  01:45:32,293 - Line 7: Using global variable name: x
INFO  01:45:32,293 - Line 8: Using global variable name: y
INFO  01:45:32,293 - Line 10: Using global variable name: y
INFO  01:45:32,293 - Line 10: Using global variable name: y
INFO  01:45:32,293 - Line 11: Using global variable name: x
INFO  01:45:32,293 - Line 13: Using global variable name: x
INFO  01:45:32,293 - Line 14: Using global variable name: y
INFO  01:45:32,294 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:45:50,612 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:45:50,631 - #2 program
INFO  01:45:50,631 - #49 MJProgram
INFO  01:45:50,631 - #49 int
INFO  01:45:50,631 - #49 x
INFO  01:45:50,631 - #38 ;
INFO  01:45:50,632 - #49 int
INFO  01:45:50,632 - #49 y
INFO  01:45:50,632 - #38 ;
INFO  01:45:50,632 - #44 {
INFO  01:45:50,632 - #14 void
INFO  01:45:50,632 - #49 main
INFO  01:45:50,632 - #40 (
INFO  01:45:50,633 - #41 )
INFO  01:45:50,633 - #49 int
INFO  01:45:50,633 - #49 niz
INFO  01:45:50,633 - #42 [
INFO  01:45:50,633 - #43 ]
INFO  01:45:50,633 - #38 ;
INFO  01:45:50,633 - #44 {
INFO  01:45:50,633 - #49 x
INFO  01:45:50,634 - #27 =
INFO  01:45:50,634 - #52 5
INFO  01:45:50,634 - #38 ;
INFO  01:45:50,634 - #49 y
INFO  01:45:50,634 - #27 =
INFO  01:45:50,634 - #52 0
INFO  01:45:50,634 - #38 ;
INFO  01:45:50,634 - #9 do
INFO  01:45:50,634 - #44 {
INFO  01:45:50,634 - #49 y
INFO  01:45:50,634 - #27 =
INFO  01:45:50,634 - #49 y
INFO  01:45:50,634 - #22 +
INFO  01:45:50,635 - #52 10
INFO  01:45:50,635 - #38 ;
INFO  01:45:50,635 - #49 x
INFO  01:45:50,635 - #37 --
INFO  01:45:50,635 - #38 ;
INFO  01:45:50,635 - #5 if
INFO  01:45:50,635 - #40 (
INFO  01:45:50,635 - #49 y
INFO  01:45:50,635 - #28 ==
INFO  01:45:50,635 - #52 30
INFO  01:45:50,636 - #41 )
INFO  01:45:50,636 - #3 break
INFO  01:45:50,636 - #38 ;
INFO  01:45:50,636 - #45 }
INFO  01:45:50,636 - #10 while
INFO  01:45:50,636 - #40 (
INFO  01:45:50,636 - #49 x
INFO  01:45:50,636 - #30 >
INFO  01:45:50,636 - #52 0
INFO  01:45:50,637 - #41 )
INFO  01:45:50,637 - #38 ;
INFO  01:45:50,637 - #12 print
INFO  01:45:50,637 - #40 (
INFO  01:45:50,637 - #49 y
INFO  01:45:50,637 - #41 )
INFO  01:45:50,637 - #38 ;
INFO  01:45:50,637 - #45 }
INFO  01:45:50,637 - #45 }
INFO  01:45:50,641 - Line 7: Using global variable name: x
INFO  01:45:50,641 - Line 8: Using global variable name: y
INFO  01:45:50,641 - Line 10: Using global variable name: y
INFO  01:45:50,641 - Line 10: Using global variable name: y
INFO  01:45:50,641 - Line 11: Using global variable name: x
INFO  01:45:50,641 - Line 12: Using global variable name: y
INFO  01:45:50,641 - Line 13: Using global variable name: x
INFO  01:45:50,641 - Line 14: Using global variable name: y
INFO  01:45:50,642 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:46:19,889 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:46:19,907 - #2 program
INFO  01:46:19,907 - #49 MJProgram
INFO  01:46:19,907 - #49 int
INFO  01:46:19,908 - #49 x
INFO  01:46:19,908 - #38 ;
INFO  01:46:19,908 - #49 int
INFO  01:46:19,908 - #49 y
INFO  01:46:19,908 - #38 ;
INFO  01:46:19,908 - #44 {
INFO  01:46:19,908 - #14 void
INFO  01:46:19,909 - #49 main
INFO  01:46:19,909 - #40 (
INFO  01:46:19,909 - #41 )
INFO  01:46:19,909 - #49 int
INFO  01:46:19,909 - #49 niz
INFO  01:46:19,909 - #42 [
INFO  01:46:19,909 - #43 ]
INFO  01:46:19,909 - #38 ;
INFO  01:46:19,910 - #44 {
INFO  01:46:19,910 - #49 x
INFO  01:46:19,910 - #27 =
INFO  01:46:19,910 - #52 5
INFO  01:46:19,910 - #38 ;
INFO  01:46:19,910 - #49 y
INFO  01:46:19,910 - #27 =
INFO  01:46:19,911 - #52 0
INFO  01:46:19,911 - #38 ;
INFO  01:46:19,911 - #9 do
INFO  01:46:19,911 - #44 {
INFO  01:46:19,911 - #49 y
INFO  01:46:19,911 - #27 =
INFO  01:46:19,911 - #49 y
INFO  01:46:19,911 - #22 +
INFO  01:46:19,911 - #52 10
INFO  01:46:19,911 - #38 ;
INFO  01:46:19,911 - #5 if
INFO  01:46:19,911 - #40 (
INFO  01:46:19,911 - #49 y
INFO  01:46:19,911 - #28 ==
INFO  01:46:19,911 - #52 20
INFO  01:46:19,912 - #41 )
INFO  01:46:19,912 - #3 break
INFO  01:46:19,912 - #38 ;
INFO  01:46:19,912 - #5 if
INFO  01:46:19,913 - #40 (
INFO  01:46:19,913 - #49 y
INFO  01:46:19,913 - #28 ==
INFO  01:46:19,913 - #52 50
INFO  01:46:19,913 - #41 )
INFO  01:46:19,913 - #3 break
INFO  01:46:19,913 - #38 ;
INFO  01:46:19,913 - #49 x
INFO  01:46:19,913 - #37 --
INFO  01:46:19,913 - #38 ;
INFO  01:46:19,913 - #5 if
INFO  01:46:19,913 - #40 (
INFO  01:46:19,913 - #49 y
INFO  01:46:19,913 - #28 ==
INFO  01:46:19,913 - #52 30
INFO  01:46:19,913 - #41 )
INFO  01:46:19,913 - #3 break
INFO  01:46:19,913 - #38 ;
INFO  01:46:19,913 - #45 }
INFO  01:46:19,913 - #10 while
INFO  01:46:19,913 - #40 (
INFO  01:46:19,913 - #49 x
INFO  01:46:19,913 - #30 >
INFO  01:46:19,913 - #52 0
INFO  01:46:19,914 - #41 )
INFO  01:46:19,914 - #38 ;
INFO  01:46:19,914 - #12 print
INFO  01:46:19,914 - #40 (
INFO  01:46:19,914 - #49 y
INFO  01:46:19,914 - #41 )
INFO  01:46:19,914 - #38 ;
INFO  01:46:19,914 - #45 }
INFO  01:46:19,914 - #45 }
INFO  01:46:19,918 - Line 7: Using global variable name: x
INFO  01:46:19,918 - Line 8: Using global variable name: y
INFO  01:46:19,918 - Line 10: Using global variable name: y
INFO  01:46:19,918 - Line 10: Using global variable name: y
INFO  01:46:19,918 - Line 11: Using global variable name: y
INFO  01:46:19,918 - Line 12: Using global variable name: y
INFO  01:46:19,918 - Line 13: Using global variable name: x
INFO  01:46:19,918 - Line 14: Using global variable name: y
INFO  01:46:19,918 - Line 15: Using global variable name: x
INFO  01:46:19,919 - Line 16: Using global variable name: y
INFO  01:46:19,920 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:50:34,279 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:50:34,298 - #2 program
INFO  01:50:34,298 - #49 MJProgram
INFO  01:50:34,298 - #49 int
INFO  01:50:34,299 - #49 x
INFO  01:50:34,299 - #38 ;
INFO  01:50:34,299 - #49 int
INFO  01:50:34,299 - #49 y
INFO  01:50:34,299 - #38 ;
INFO  01:50:34,299 - #44 {
INFO  01:50:34,299 - #14 void
INFO  01:50:34,300 - #49 main
INFO  01:50:34,300 - #40 (
INFO  01:50:34,300 - #41 )
INFO  01:50:34,300 - #49 int
INFO  01:50:34,300 - #49 niz
INFO  01:50:34,300 - #42 [
INFO  01:50:34,300 - #43 ]
INFO  01:50:34,301 - #38 ;
INFO  01:50:34,301 - #44 {
INFO  01:50:34,301 - #49 x
INFO  01:50:34,301 - #27 =
INFO  01:50:34,302 - #52 5
INFO  01:50:34,302 - #38 ;
INFO  01:50:34,302 - #49 y
INFO  01:50:34,302 - #27 =
INFO  01:50:34,302 - #52 0
INFO  01:50:34,302 - #38 ;
INFO  01:50:34,302 - #9 do
INFO  01:50:34,302 - #44 {
INFO  01:50:34,302 - #49 y
INFO  01:50:34,302 - #27 =
INFO  01:50:34,302 - #49 y
INFO  01:50:34,302 - #22 +
INFO  01:50:34,303 - #52 10
INFO  01:50:34,303 - #38 ;
INFO  01:50:34,303 - #5 if
INFO  01:50:34,303 - #40 (
INFO  01:50:34,303 - #49 y
INFO  01:50:34,303 - #28 ==
INFO  01:50:34,303 - #52 20
INFO  01:50:34,304 - #41 )
INFO  01:50:34,304 - #3 break
INFO  01:50:34,304 - #38 ;
INFO  01:50:34,304 - #5 if
INFO  01:50:34,304 - #40 (
INFO  01:50:34,304 - #49 y
INFO  01:50:34,304 - #28 ==
INFO  01:50:34,305 - #52 50
INFO  01:50:34,305 - #41 )
INFO  01:50:34,305 - #3 break
INFO  01:50:34,305 - #38 ;
INFO  01:50:34,305 - #49 x
INFO  01:50:34,305 - #37 --
INFO  01:50:34,305 - #38 ;
INFO  01:50:34,305 - #5 if
INFO  01:50:34,305 - #40 (
INFO  01:50:34,305 - #49 y
INFO  01:50:34,305 - #28 ==
INFO  01:50:34,305 - #52 30
INFO  01:50:34,305 - #41 )
INFO  01:50:34,305 - #3 break
INFO  01:50:34,305 - #38 ;
INFO  01:50:34,305 - #45 }
INFO  01:50:34,305 - #10 while
INFO  01:50:34,306 - #40 (
INFO  01:50:34,306 - #49 x
INFO  01:50:34,306 - #30 >
INFO  01:50:34,306 - #52 0
INFO  01:50:34,306 - #41 )
INFO  01:50:34,306 - #38 ;
INFO  01:50:34,306 - #12 print
INFO  01:50:34,306 - #40 (
INFO  01:50:34,306 - #49 y
INFO  01:50:34,306 - #41 )
INFO  01:50:34,307 - #38 ;
INFO  01:50:34,307 - #45 }
INFO  01:50:34,307 - #45 }
INFO  01:50:34,311 - Line 7: Using global variable name: x
INFO  01:50:34,311 - Line 8: Using global variable name: y
INFO  01:50:34,311 - Line 10: Using global variable name: y
INFO  01:50:34,311 - Line 10: Using global variable name: y
INFO  01:50:34,311 - Line 11: Using global variable name: y
INFO  01:50:34,311 - Line 12: Using global variable name: y
INFO  01:50:34,311 - Line 13: Using global variable name: x
INFO  01:50:34,311 - Line 14: Using global variable name: y
INFO  01:50:34,311 - Line 15: Using global variable name: x
INFO  01:50:34,311 - Line 16: Using global variable name: y
INFO  01:50:34,313 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:50:58,605 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:50:58,623 - #2 program
INFO  01:50:58,623 - #49 MJProgram
INFO  01:50:58,623 - #49 int
INFO  01:50:58,624 - #49 x
INFO  01:50:58,624 - #38 ;
INFO  01:50:58,624 - #49 int
INFO  01:50:58,624 - #49 y
INFO  01:50:58,624 - #38 ;
INFO  01:50:58,624 - #44 {
INFO  01:50:58,624 - #14 void
INFO  01:50:58,625 - #49 main
INFO  01:50:58,625 - #40 (
INFO  01:50:58,625 - #41 )
INFO  01:50:58,625 - #49 int
INFO  01:50:58,625 - #49 niz
INFO  01:50:58,625 - #42 [
INFO  01:50:58,625 - #43 ]
INFO  01:50:58,625 - #38 ;
INFO  01:50:58,626 - #44 {
INFO  01:50:58,626 - #49 x
INFO  01:50:58,626 - #27 =
INFO  01:50:58,626 - #52 5
INFO  01:50:58,626 - #38 ;
INFO  01:50:58,627 - #49 y
INFO  01:50:58,627 - #27 =
INFO  01:50:58,627 - #52 0
INFO  01:50:58,627 - #38 ;
INFO  01:50:58,627 - #9 do
INFO  01:50:58,627 - #44 {
INFO  01:50:58,627 - #5 if
INFO  01:50:58,627 - #40 (
INFO  01:50:58,627 - #49 x
INFO  01:50:58,627 - #28 ==
INFO  01:50:58,627 - #52 2
INFO  01:50:58,627 - #41 )
INFO  01:50:58,628 - #4 continue
INFO  01:50:58,628 - #38 ;
INFO  01:50:58,628 - #49 y
INFO  01:50:58,628 - #27 =
INFO  01:50:58,628 - #49 y
INFO  01:50:58,628 - #22 +
INFO  01:50:58,628 - #52 10
INFO  01:50:58,629 - #38 ;
INFO  01:50:58,629 - #45 }
INFO  01:50:58,629 - #10 while
INFO  01:50:58,629 - #40 (
INFO  01:50:58,629 - #49 x
INFO  01:50:58,629 - #30 >
INFO  01:50:58,629 - #52 0
INFO  01:50:58,629 - #41 )
INFO  01:50:58,630 - #38 ;
INFO  01:50:58,630 - #12 print
INFO  01:50:58,630 - #40 (
INFO  01:50:58,630 - #49 y
INFO  01:50:58,630 - #41 )
INFO  01:50:58,630 - #38 ;
INFO  01:50:58,630 - #45 }
INFO  01:50:58,630 - #45 }
INFO  01:50:58,633 - Line 7: Using global variable name: x
INFO  01:50:58,634 - Line 8: Using global variable name: y
INFO  01:50:58,634 - Line 10: Using global variable name: x
INFO  01:50:58,634 - Line 11: Using global variable name: y
INFO  01:50:58,634 - Line 11: Using global variable name: y
INFO  01:50:58,634 - Line 12: Using global variable name: x
INFO  01:50:58,634 - Line 13: Using global variable name: y
INFO  01:50:58,635 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:53:42,288 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:53:42,306 - #2 program
INFO  01:53:42,306 - #49 MJProgram
INFO  01:53:42,307 - #49 int
INFO  01:53:42,307 - #49 x
INFO  01:53:42,307 - #38 ;
INFO  01:53:42,308 - #49 int
INFO  01:53:42,308 - #49 y
INFO  01:53:42,308 - #38 ;
INFO  01:53:42,308 - #44 {
INFO  01:53:42,308 - #14 void
INFO  01:53:42,308 - #49 main
INFO  01:53:42,308 - #40 (
INFO  01:53:42,308 - #41 )
INFO  01:53:42,308 - #49 int
INFO  01:53:42,309 - #49 niz
INFO  01:53:42,309 - #42 [
INFO  01:53:42,309 - #43 ]
INFO  01:53:42,309 - #38 ;
INFO  01:53:42,309 - #44 {
INFO  01:53:42,309 - #49 x
INFO  01:53:42,309 - #27 =
INFO  01:53:42,310 - #52 5
INFO  01:53:42,310 - #38 ;
INFO  01:53:42,310 - #49 y
INFO  01:53:42,310 - #27 =
INFO  01:53:42,310 - #52 0
INFO  01:53:42,310 - #38 ;
INFO  01:53:42,310 - #9 do
INFO  01:53:42,310 - #44 {
INFO  01:53:42,310 - #49 x
INFO  01:53:42,310 - #37 --
INFO  01:53:42,310 - #38 ;
INFO  01:53:42,310 - #5 if
INFO  01:53:42,310 - #40 (
INFO  01:53:42,310 - #49 x
INFO  01:53:42,310 - #28 ==
INFO  01:53:42,311 - #52 2
INFO  01:53:42,311 - #41 )
INFO  01:53:42,311 - #4 continue
INFO  01:53:42,311 - #38 ;
INFO  01:53:42,311 - #49 y
INFO  01:53:42,312 - #27 =
INFO  01:53:42,312 - #49 y
INFO  01:53:42,312 - #22 +
INFO  01:53:42,312 - #52 10
INFO  01:53:42,312 - #38 ;
INFO  01:53:42,312 - #45 }
INFO  01:53:42,312 - #10 while
INFO  01:53:42,312 - #40 (
INFO  01:53:42,312 - #49 x
INFO  01:53:42,312 - #30 >
INFO  01:53:42,312 - #52 0
INFO  01:53:42,313 - #41 )
INFO  01:53:42,313 - #38 ;
INFO  01:53:42,313 - #12 print
INFO  01:53:42,313 - #40 (
INFO  01:53:42,313 - #49 y
INFO  01:53:42,313 - #41 )
INFO  01:53:42,313 - #38 ;
INFO  01:53:42,313 - #45 }
INFO  01:53:42,313 - #45 }
INFO  01:53:42,317 - Line 7: Using global variable name: x
INFO  01:53:42,317 - Line 8: Using global variable name: y
INFO  01:53:42,317 - Line 10: Using global variable name: x
INFO  01:53:42,317 - Line 11: Using global variable name: x
INFO  01:53:42,317 - Line 12: Using global variable name: y
INFO  01:53:42,317 - Line 12: Using global variable name: y
INFO  01:53:42,317 - Line 13: Using global variable name: x
INFO  01:53:42,317 - Line 14: Using global variable name: y
INFO  01:53:42,319 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:53:57,942 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:53:57,960 - #2 program
INFO  01:53:57,960 - #49 MJProgram
INFO  01:53:57,960 - #49 int
INFO  01:53:57,960 - #49 x
INFO  01:53:57,960 - #38 ;
INFO  01:53:57,961 - #49 int
INFO  01:53:57,961 - #49 y
INFO  01:53:57,961 - #38 ;
INFO  01:53:57,961 - #44 {
INFO  01:53:57,961 - #14 void
INFO  01:53:57,961 - #49 main
INFO  01:53:57,962 - #40 (
INFO  01:53:57,962 - #41 )
INFO  01:53:57,962 - #49 int
INFO  01:53:57,962 - #49 niz
INFO  01:53:57,962 - #42 [
INFO  01:53:57,962 - #43 ]
INFO  01:53:57,962 - #38 ;
INFO  01:53:57,963 - #44 {
INFO  01:53:57,963 - #49 x
INFO  01:53:57,963 - #27 =
INFO  01:53:57,963 - #52 5
INFO  01:53:57,963 - #38 ;
INFO  01:53:57,963 - #49 y
INFO  01:53:57,963 - #27 =
INFO  01:53:57,963 - #52 0
INFO  01:53:57,964 - #38 ;
INFO  01:53:57,964 - #9 do
INFO  01:53:57,964 - #44 {
INFO  01:53:57,964 - #49 x
INFO  01:53:57,964 - #37 --
INFO  01:53:57,964 - #38 ;
INFO  01:53:57,964 - #5 if
INFO  01:53:57,964 - #40 (
INFO  01:53:57,964 - #49 x
INFO  01:53:57,964 - #28 ==
INFO  01:53:57,964 - #52 2
INFO  01:53:57,965 - #41 )
INFO  01:53:57,965 - #3 break
INFO  01:53:57,965 - #38 ;
INFO  01:53:57,965 - #49 y
INFO  01:53:57,965 - #27 =
INFO  01:53:57,966 - #49 y
INFO  01:53:57,966 - #22 +
INFO  01:53:57,966 - #52 10
INFO  01:53:57,966 - #38 ;
INFO  01:53:57,966 - #45 }
INFO  01:53:57,966 - #10 while
INFO  01:53:57,966 - #40 (
INFO  01:53:57,966 - #49 x
INFO  01:53:57,966 - #30 >
INFO  01:53:57,966 - #52 0
INFO  01:53:57,967 - #41 )
INFO  01:53:57,967 - #38 ;
INFO  01:53:57,967 - #12 print
INFO  01:53:57,967 - #40 (
INFO  01:53:57,967 - #49 y
INFO  01:53:57,967 - #41 )
INFO  01:53:57,967 - #38 ;
INFO  01:53:57,967 - #45 }
INFO  01:53:57,967 - #45 }
INFO  01:53:57,971 - Line 7: Using global variable name: x
INFO  01:53:57,971 - Line 8: Using global variable name: y
INFO  01:53:57,971 - Line 10: Using global variable name: x
INFO  01:53:57,971 - Line 11: Using global variable name: x
INFO  01:53:57,971 - Line 12: Using global variable name: y
INFO  01:53:57,971 - Line 12: Using global variable name: y
INFO  01:53:57,971 - Line 13: Using global variable name: x
INFO  01:53:57,971 - Line 14: Using global variable name: y
INFO  01:53:57,973 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  01:57:58,357 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  01:57:58,377 - #2 program
INFO  01:57:58,377 - #49 MJProgram
INFO  01:57:58,377 - #49 int
INFO  01:57:58,377 - #49 x
INFO  01:57:58,378 - #38 ;
INFO  01:57:58,378 - #49 int
INFO  01:57:58,378 - #49 y
INFO  01:57:58,378 - #38 ;
INFO  01:57:58,378 - #44 {
INFO  01:57:58,378 - #14 void
INFO  01:57:58,378 - #49 main
INFO  01:57:58,379 - #40 (
INFO  01:57:58,379 - #41 )
INFO  01:57:58,379 - #49 int
INFO  01:57:58,379 - #49 niz
INFO  01:57:58,379 - #42 [
INFO  01:57:58,379 - #43 ]
INFO  01:57:58,379 - #38 ;
INFO  01:57:58,380 - #44 {
INFO  01:57:58,380 - #49 x
INFO  01:57:58,380 - #27 =
INFO  01:57:58,380 - #52 5
INFO  01:57:58,380 - #38 ;
INFO  01:57:58,380 - #49 y
INFO  01:57:58,381 - #27 =
INFO  01:57:58,381 - #52 0
INFO  01:57:58,381 - #38 ;
INFO  01:57:58,381 - #9 do
INFO  01:57:58,381 - #44 {
INFO  01:57:58,381 - #49 x
INFO  01:57:58,381 - #37 --
INFO  01:57:58,381 - #38 ;
INFO  01:57:58,381 - #5 if
INFO  01:57:58,381 - #40 (
INFO  01:57:58,381 - #49 x
INFO  01:57:58,381 - #28 ==
INFO  01:57:58,381 - #52 2
INFO  01:57:58,382 - #41 )
INFO  01:57:58,382 - #4 continue
INFO  01:57:58,382 - #38 ;
INFO  01:57:58,382 - #49 y
INFO  01:57:58,382 - #27 =
INFO  01:57:58,382 - #49 y
INFO  01:57:58,382 - #22 +
INFO  01:57:58,382 - #52 10
INFO  01:57:58,383 - #38 ;
INFO  01:57:58,383 - #45 }
INFO  01:57:58,383 - #10 while
INFO  01:57:58,383 - #40 (
INFO  01:57:58,383 - #49 x
INFO  01:57:58,383 - #30 >
INFO  01:57:58,383 - #52 0
INFO  01:57:58,383 - #41 )
INFO  01:57:58,383 - #38 ;
INFO  01:57:58,383 - #12 print
INFO  01:57:58,384 - #40 (
INFO  01:57:58,384 - #49 y
INFO  01:57:58,384 - #41 )
INFO  01:57:58,384 - #38 ;
INFO  01:57:58,384 - #45 }
INFO  01:57:58,384 - #45 }
INFO  01:57:58,388 - Line 7: Using global variable name: x
INFO  01:57:58,388 - Line 8: Using global variable name: y
INFO  01:57:58,388 - Line 10: Using global variable name: x
INFO  01:57:58,388 - Line 11: Using global variable name: x
INFO  01:57:58,388 - Line 12: Using global variable name: y
INFO  01:57:58,388 - Line 12: Using global variable name: y
INFO  01:57:58,388 - Line 13: Using global variable name: x
INFO  01:57:58,388 - Line 14: Using global variable name: y
INFO  01:57:58,390 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:12:27,997 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:12:28,016 - #2 program
INFO  02:12:28,016 - #49 MJProgram
INFO  02:12:28,016 - #49 int
INFO  02:12:28,016 - #49 x
INFO  02:12:28,016 - #38 ;
INFO  02:12:28,017 - #49 int
INFO  02:12:28,017 - #49 y
INFO  02:12:28,017 - #38 ;
INFO  02:12:28,017 - #44 {
INFO  02:12:28,017 - #14 void
INFO  02:12:28,017 - #49 main
INFO  02:12:28,017 - #40 (
INFO  02:12:28,018 - #41 )
INFO  02:12:28,018 - #49 int
INFO  02:12:28,018 - #49 niz
INFO  02:12:28,018 - #42 [
INFO  02:12:28,018 - #43 ]
INFO  02:12:28,018 - #38 ;
INFO  02:12:28,018 - #44 {
INFO  02:12:28,019 - #49 x
INFO  02:12:28,019 - #27 =
INFO  02:12:28,019 - #52 5
INFO  02:12:28,019 - #38 ;
INFO  02:12:28,019 - #49 y
INFO  02:12:28,019 - #27 =
INFO  02:12:28,019 - #52 0
INFO  02:12:28,019 - #38 ;
INFO  02:12:28,019 - #9 do
INFO  02:12:28,019 - #44 {
INFO  02:12:28,020 - #49 x
INFO  02:12:28,020 - #37 --
INFO  02:12:28,020 - #38 ;
INFO  02:12:28,020 - #5 if
INFO  02:12:28,020 - #40 (
INFO  02:12:28,020 - #49 x
INFO  02:12:28,020 - #28 ==
INFO  02:12:28,020 - #52 2
INFO  02:12:28,020 - #41 )
INFO  02:12:28,020 - #3 break
INFO  02:12:28,021 - #38 ;
INFO  02:12:28,021 - #49 y
INFO  02:12:28,021 - #27 =
INFO  02:12:28,021 - #49 y
INFO  02:12:28,021 - #22 +
INFO  02:12:28,021 - #52 10
INFO  02:12:28,021 - #38 ;
INFO  02:12:28,021 - #45 }
INFO  02:12:28,021 - #10 while
INFO  02:12:28,022 - #40 (
INFO  02:12:28,022 - #49 x
INFO  02:12:28,022 - #30 >
INFO  02:12:28,022 - #52 0
INFO  02:12:28,022 - #41 )
INFO  02:12:28,022 - #38 ;
INFO  02:12:28,022 - #12 print
INFO  02:12:28,022 - #40 (
INFO  02:12:28,022 - #49 y
INFO  02:12:28,023 - #41 )
INFO  02:12:28,023 - #38 ;
INFO  02:12:28,023 - #45 }
INFO  02:12:28,023 - #45 }
INFO  02:12:28,026 - Line 7: Using global variable name: x
INFO  02:12:28,026 - Line 8: Using global variable name: y
INFO  02:12:28,027 - Line 10: Using global variable name: x
INFO  02:12:28,027 - Line 11: Using global variable name: x
INFO  02:12:28,027 - Line 12: Using global variable name: y
INFO  02:12:28,027 - Line 12: Using global variable name: y
INFO  02:12:28,027 - Line 13: Using global variable name: x
INFO  02:12:28,027 - Line 14: Using global variable name: y
INFO  02:12:28,028 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:12:42,124 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:12:42,142 - #2 program
INFO  02:12:42,143 - #49 MJProgram
INFO  02:12:42,143 - #49 int
INFO  02:12:42,143 - #49 x
INFO  02:12:42,143 - #38 ;
INFO  02:12:42,143 - #49 int
INFO  02:12:42,144 - #49 y
INFO  02:12:42,144 - #38 ;
INFO  02:12:42,144 - #44 {
INFO  02:12:42,144 - #14 void
INFO  02:12:42,144 - #49 main
INFO  02:12:42,144 - #40 (
INFO  02:12:42,144 - #41 )
INFO  02:12:42,144 - #49 int
INFO  02:12:42,145 - #49 niz
INFO  02:12:42,145 - #42 [
INFO  02:12:42,145 - #43 ]
INFO  02:12:42,145 - #38 ;
INFO  02:12:42,145 - #44 {
INFO  02:12:42,145 - #49 x
INFO  02:12:42,146 - #27 =
INFO  02:12:42,146 - #52 5
INFO  02:12:42,146 - #38 ;
INFO  02:12:42,146 - #49 y
INFO  02:12:42,146 - #27 =
INFO  02:12:42,146 - #52 0
INFO  02:12:42,146 - #38 ;
INFO  02:12:42,146 - #9 do
INFO  02:12:42,146 - #44 {
INFO  02:12:42,146 - #49 x
INFO  02:12:42,146 - #37 --
INFO  02:12:42,146 - #38 ;
INFO  02:12:42,146 - #5 if
INFO  02:12:42,146 - #40 (
INFO  02:12:42,147 - #49 x
INFO  02:12:42,147 - #28 ==
INFO  02:12:42,147 - #52 2
INFO  02:12:42,147 - #41 )
INFO  02:12:42,147 - #4 continue
INFO  02:12:42,147 - #38 ;
INFO  02:12:42,147 - #49 y
INFO  02:12:42,148 - #27 =
INFO  02:12:42,148 - #49 y
INFO  02:12:42,148 - #22 +
INFO  02:12:42,148 - #52 10
INFO  02:12:42,148 - #38 ;
INFO  02:12:42,148 - #45 }
INFO  02:12:42,148 - #10 while
INFO  02:12:42,148 - #40 (
INFO  02:12:42,148 - #49 x
INFO  02:12:42,148 - #30 >
INFO  02:12:42,148 - #52 0
INFO  02:12:42,149 - #41 )
INFO  02:12:42,149 - #38 ;
INFO  02:12:42,149 - #12 print
INFO  02:12:42,149 - #40 (
INFO  02:12:42,149 - #49 y
INFO  02:12:42,149 - #41 )
INFO  02:12:42,149 - #38 ;
INFO  02:12:42,149 - #45 }
INFO  02:12:42,149 - #45 }
INFO  02:12:42,153 - Line 7: Using global variable name: x
INFO  02:12:42,153 - Line 8: Using global variable name: y
INFO  02:12:42,153 - Line 10: Using global variable name: x
INFO  02:12:42,153 - Line 11: Using global variable name: x
INFO  02:12:42,153 - Line 12: Using global variable name: y
INFO  02:12:42,153 - Line 12: Using global variable name: y
INFO  02:12:42,153 - Line 13: Using global variable name: x
INFO  02:12:42,153 - Line 14: Using global variable name: y
INFO  02:12:42,155 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:13:18,337 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:13:18,355 - #2 program
INFO  02:13:18,356 - #49 MJProgram
INFO  02:13:18,356 - #49 int
INFO  02:13:18,356 - #49 x
INFO  02:13:18,356 - #38 ;
INFO  02:13:18,356 - #49 int
INFO  02:13:18,357 - #49 y
INFO  02:13:18,357 - #38 ;
INFO  02:13:18,357 - #44 {
INFO  02:13:18,357 - #14 void
INFO  02:13:18,357 - #49 main
INFO  02:13:18,357 - #40 (
INFO  02:13:18,357 - #41 )
INFO  02:13:18,357 - #49 int
INFO  02:13:18,358 - #49 niz
INFO  02:13:18,358 - #42 [
INFO  02:13:18,358 - #43 ]
INFO  02:13:18,358 - #38 ;
INFO  02:13:18,358 - #44 {
INFO  02:13:18,358 - #49 x
INFO  02:13:18,359 - #27 =
INFO  02:13:18,359 - #52 5
INFO  02:13:18,359 - #38 ;
INFO  02:13:18,359 - #49 y
INFO  02:13:18,359 - #27 =
INFO  02:13:18,359 - #52 0
INFO  02:13:18,359 - #38 ;
INFO  02:13:18,359 - #9 do
INFO  02:13:18,359 - #44 {
INFO  02:13:18,359 - #49 x
INFO  02:13:18,359 - #37 --
INFO  02:13:18,359 - #38 ;
INFO  02:13:18,359 - #5 if
INFO  02:13:18,359 - #40 (
INFO  02:13:18,359 - #49 x
INFO  02:13:18,359 - #30 >
INFO  02:13:18,360 - #52 2
INFO  02:13:18,360 - #41 )
INFO  02:13:18,360 - #4 continue
INFO  02:13:18,360 - #38 ;
INFO  02:13:18,360 - #49 y
INFO  02:13:18,361 - #27 =
INFO  02:13:18,361 - #49 y
INFO  02:13:18,361 - #22 +
INFO  02:13:18,361 - #52 10
INFO  02:13:18,361 - #38 ;
INFO  02:13:18,361 - #45 }
INFO  02:13:18,361 - #10 while
INFO  02:13:18,361 - #40 (
INFO  02:13:18,361 - #49 x
INFO  02:13:18,361 - #30 >
INFO  02:13:18,362 - #52 0
INFO  02:13:18,362 - #41 )
INFO  02:13:18,362 - #38 ;
INFO  02:13:18,362 - #12 print
INFO  02:13:18,362 - #40 (
INFO  02:13:18,362 - #49 y
INFO  02:13:18,362 - #41 )
INFO  02:13:18,362 - #38 ;
INFO  02:13:18,362 - #45 }
INFO  02:13:18,362 - #45 }
INFO  02:13:18,366 - Line 7: Using global variable name: x
INFO  02:13:18,366 - Line 8: Using global variable name: y
INFO  02:13:18,366 - Line 10: Using global variable name: x
INFO  02:13:18,366 - Line 11: Using global variable name: x
INFO  02:13:18,366 - Line 12: Using global variable name: y
INFO  02:13:18,366 - Line 12: Using global variable name: y
INFO  02:13:18,367 - Line 13: Using global variable name: x
INFO  02:13:18,367 - Line 14: Using global variable name: y
INFO  02:13:18,368 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:15:12,255 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:15:12,274 - #2 program
INFO  02:15:12,274 - #49 MJProgram
INFO  02:15:12,274 - #49 int
INFO  02:15:12,274 - #49 x
INFO  02:15:12,274 - #38 ;
INFO  02:15:12,275 - #49 int
INFO  02:15:12,275 - #49 y
INFO  02:15:12,275 - #38 ;
INFO  02:15:12,275 - #44 {
INFO  02:15:12,275 - #14 void
INFO  02:15:12,275 - #49 main
INFO  02:15:12,276 - #40 (
INFO  02:15:12,276 - #41 )
INFO  02:15:12,276 - #49 int
INFO  02:15:12,276 - #49 niz
INFO  02:15:12,276 - #42 [
INFO  02:15:12,276 - #43 ]
INFO  02:15:12,276 - #38 ;
INFO  02:15:12,277 - #44 {
INFO  02:15:12,277 - #49 x
INFO  02:15:12,277 - #27 =
INFO  02:15:12,277 - #52 5
INFO  02:15:12,277 - #38 ;
INFO  02:15:12,278 - #49 y
INFO  02:15:12,278 - #27 =
INFO  02:15:12,278 - #52 0
INFO  02:15:12,278 - #38 ;
INFO  02:15:12,278 - #9 do
INFO  02:15:12,278 - #44 {
INFO  02:15:12,278 - #49 x
INFO  02:15:12,278 - #37 --
INFO  02:15:12,278 - #38 ;
INFO  02:15:12,278 - #5 if
INFO  02:15:12,278 - #40 (
INFO  02:15:12,278 - #49 x
INFO  02:15:12,278 - #30 >
INFO  02:15:12,278 - #52 2
INFO  02:15:12,279 - #41 )
INFO  02:15:12,279 - #4 continue
INFO  02:15:12,279 - #38 ;
INFO  02:15:12,279 - #49 y
INFO  02:15:12,280 - #27 =
INFO  02:15:12,280 - #49 y
INFO  02:15:12,280 - #22 +
INFO  02:15:12,280 - #52 10
INFO  02:15:12,280 - #38 ;
INFO  02:15:12,281 - #45 }
INFO  02:15:12,281 - #10 while
INFO  02:15:12,281 - #40 (
INFO  02:15:12,281 - #49 x
INFO  02:15:12,281 - #30 >
INFO  02:15:12,281 - #52 0
INFO  02:15:12,281 - #41 )
INFO  02:15:12,281 - #38 ;
INFO  02:15:12,281 - #12 print
INFO  02:15:12,281 - #40 (
INFO  02:15:12,282 - #49 y
INFO  02:15:12,282 - #41 )
INFO  02:15:12,282 - #38 ;
INFO  02:15:12,282 - #45 }
INFO  02:15:12,282 - #45 }
INFO  02:15:12,285 - Line 7: Using global variable name: x
INFO  02:15:12,286 - Line 8: Using global variable name: y
INFO  02:15:12,286 - Line 10: Using global variable name: x
INFO  02:15:12,286 - Line 11: Using global variable name: x
INFO  02:15:12,286 - Line 12: Using global variable name: y
INFO  02:15:12,286 - Line 12: Using global variable name: y
INFO  02:15:12,286 - Line 13: Using global variable name: x
INFO  02:15:12,286 - Line 14: Using global variable name: y
INFO  02:15:12,287 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:15:37,252 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:15:37,270 - #2 program
INFO  02:15:37,270 - #49 MJProgram
INFO  02:15:37,270 - #49 int
INFO  02:15:37,271 - #49 x
INFO  02:15:37,271 - #38 ;
INFO  02:15:37,271 - #49 int
INFO  02:15:37,271 - #49 y
INFO  02:15:37,271 - #38 ;
INFO  02:15:37,271 - #44 {
INFO  02:15:37,271 - #49 int
INFO  02:15:37,272 - #49 a
INFO  02:15:37,272 - #40 (
INFO  02:15:37,272 - #49 int
INFO  02:15:37,272 - #49 x
INFO  02:15:37,272 - #39 ,
INFO  02:15:37,272 - #49 int
INFO  02:15:37,272 - #49 y
INFO  02:15:37,272 - #41 )
INFO  02:15:37,272 - #44 {
INFO  02:15:37,273 - #45 }
INFO  02:15:37,273 - #14 void
INFO  02:15:37,273 - #49 main
INFO  02:15:37,273 - #40 (
INFO  02:15:37,273 - #41 )
INFO  02:15:37,273 - #49 int
INFO  02:15:37,274 - #49 niz
INFO  02:15:37,274 - #42 [
INFO  02:15:37,274 - #43 ]
INFO  02:15:37,274 - #38 ;
INFO  02:15:37,274 - #44 {
INFO  02:15:37,274 - #49 x
INFO  02:15:37,274 - #27 =
INFO  02:15:37,274 - #52 5
INFO  02:15:37,274 - #38 ;
INFO  02:15:37,274 - #49 y
INFO  02:15:37,275 - #27 =
INFO  02:15:37,275 - #52 0
INFO  02:15:37,275 - #38 ;
INFO  02:15:37,275 - #9 do
INFO  02:15:37,275 - #44 {
INFO  02:15:37,275 - #49 x
INFO  02:15:37,275 - #37 --
INFO  02:15:37,275 - #38 ;
INFO  02:15:37,275 - #5 if
INFO  02:15:37,275 - #40 (
INFO  02:15:37,275 - #49 x
INFO  02:15:37,275 - #30 >
INFO  02:15:37,276 - #52 2
INFO  02:15:37,276 - #41 )
INFO  02:15:37,276 - #4 continue
INFO  02:15:37,276 - #38 ;
INFO  02:15:37,276 - #49 y
INFO  02:15:37,277 - #27 =
INFO  02:15:37,277 - #49 y
INFO  02:15:37,277 - #22 +
INFO  02:15:37,277 - #52 10
INFO  02:15:37,277 - #38 ;
INFO  02:15:37,277 - #45 }
INFO  02:15:37,277 - #10 while
INFO  02:15:37,277 - #40 (
INFO  02:15:37,277 - #49 x
INFO  02:15:37,277 - #30 >
INFO  02:15:37,277 - #52 0
INFO  02:15:37,277 - #41 )
INFO  02:15:37,278 - #38 ;
INFO  02:15:37,278 - #12 print
INFO  02:15:37,278 - #40 (
INFO  02:15:37,278 - #49 y
INFO  02:15:37,278 - #41 )
INFO  02:15:37,278 - #38 ;
INFO  02:15:37,278 - #45 }
INFO  02:15:37,278 - #45 }
ERROR 02:15:37,282 - Line 6: Missing return statement for method of type int
INFO  02:15:37,282 - Line 11: Using global variable name: x
INFO  02:15:37,282 - Line 12: Using global variable name: y
INFO  02:15:37,282 - Line 14: Using global variable name: x
INFO  02:15:37,282 - Line 15: Using global variable name: x
INFO  02:15:37,282 - Line 16: Using global variable name: y
INFO  02:15:37,282 - Line 16: Using global variable name: y
INFO  02:15:37,282 - Line 17: Using global variable name: x
INFO  02:15:37,282 - Line 18: Using global variable name: y
ERROR 02:15:37,282 - One or more semantic errors found! Compiling unsuccessful!
INFO  02:15:52,422 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:15:52,441 - #2 program
INFO  02:15:52,441 - #49 MJProgram
INFO  02:15:52,441 - #49 int
INFO  02:15:52,441 - #49 x
INFO  02:15:52,441 - #38 ;
INFO  02:15:52,441 - #49 int
INFO  02:15:52,442 - #49 y
INFO  02:15:52,442 - #38 ;
INFO  02:15:52,442 - #44 {
INFO  02:15:52,442 - #49 int
INFO  02:15:52,442 - #49 a
INFO  02:15:52,442 - #40 (
INFO  02:15:52,442 - #49 int
INFO  02:15:52,442 - #49 x
INFO  02:15:52,442 - #39 ,
INFO  02:15:52,443 - #49 int
INFO  02:15:52,443 - #49 y
INFO  02:15:52,443 - #41 )
INFO  02:15:52,443 - #44 {
INFO  02:15:52,443 - #15 return
INFO  02:15:52,443 - #49 x
INFO  02:15:52,443 - #24 *
INFO  02:15:52,443 - #49 y
INFO  02:15:52,444 - #38 ;
INFO  02:15:52,444 - #45 }
INFO  02:15:52,444 - #14 void
INFO  02:15:52,444 - #49 main
INFO  02:15:52,444 - #40 (
INFO  02:15:52,444 - #41 )
INFO  02:15:52,444 - #49 int
INFO  02:15:52,444 - #49 niz
INFO  02:15:52,444 - #42 [
INFO  02:15:52,444 - #43 ]
INFO  02:15:52,444 - #38 ;
INFO  02:15:52,445 - #44 {
INFO  02:15:52,445 - #49 x
INFO  02:15:52,445 - #27 =
INFO  02:15:52,445 - #52 5
INFO  02:15:52,445 - #38 ;
INFO  02:15:52,445 - #49 y
INFO  02:15:52,445 - #27 =
INFO  02:15:52,445 - #52 0
INFO  02:15:52,445 - #38 ;
INFO  02:15:52,445 - #9 do
INFO  02:15:52,445 - #44 {
INFO  02:15:52,446 - #49 x
INFO  02:15:52,446 - #37 --
INFO  02:15:52,446 - #38 ;
INFO  02:15:52,446 - #5 if
INFO  02:15:52,446 - #40 (
INFO  02:15:52,446 - #49 x
INFO  02:15:52,446 - #30 >
INFO  02:15:52,446 - #52 2
INFO  02:15:52,447 - #41 )
INFO  02:15:52,447 - #4 continue
INFO  02:15:52,447 - #38 ;
INFO  02:15:52,447 - #49 y
INFO  02:15:52,447 - #27 =
INFO  02:15:52,447 - #49 y
INFO  02:15:52,447 - #22 +
INFO  02:15:52,447 - #52 10
INFO  02:15:52,448 - #38 ;
INFO  02:15:52,448 - #45 }
INFO  02:15:52,448 - #10 while
INFO  02:15:52,448 - #40 (
INFO  02:15:52,448 - #49 x
INFO  02:15:52,448 - #30 >
INFO  02:15:52,448 - #52 0
INFO  02:15:52,448 - #41 )
INFO  02:15:52,448 - #38 ;
INFO  02:15:52,449 - #12 print
INFO  02:15:52,449 - #40 (
INFO  02:15:52,449 - #49 y
INFO  02:15:52,449 - #41 )
INFO  02:15:52,449 - #38 ;
INFO  02:15:52,449 - #45 }
INFO  02:15:52,449 - #45 }
INFO  02:15:52,452 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:15:52,452 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:15:52,453 - Line 11: Using global variable name: x
INFO  02:15:52,453 - Line 12: Using global variable name: y
INFO  02:15:52,453 - Line 14: Using global variable name: x
INFO  02:15:52,453 - Line 15: Using global variable name: x
INFO  02:15:52,453 - Line 16: Using global variable name: y
INFO  02:15:52,453 - Line 16: Using global variable name: y
INFO  02:15:52,453 - Line 17: Using global variable name: x
INFO  02:15:52,453 - Line 18: Using global variable name: y
INFO  02:15:52,454 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:16:19,829 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:16:19,848 - #2 program
INFO  02:16:19,848 - #49 MJProgram
INFO  02:16:19,848 - #49 int
INFO  02:16:19,848 - #49 x
INFO  02:16:19,848 - #38 ;
INFO  02:16:19,849 - #49 int
INFO  02:16:19,849 - #49 y
INFO  02:16:19,849 - #38 ;
INFO  02:16:19,849 - #44 {
INFO  02:16:19,849 - #49 int
INFO  02:16:19,849 - #49 a
INFO  02:16:19,849 - #40 (
INFO  02:16:19,850 - #49 int
INFO  02:16:19,850 - #49 x
INFO  02:16:19,850 - #39 ,
INFO  02:16:19,850 - #49 int
INFO  02:16:19,850 - #49 y
INFO  02:16:19,850 - #41 )
INFO  02:16:19,850 - #44 {
INFO  02:16:19,850 - #15 return
INFO  02:16:19,851 - #49 x
INFO  02:16:19,851 - #24 *
INFO  02:16:19,851 - #49 y
INFO  02:16:19,851 - #38 ;
INFO  02:16:19,851 - #45 }
INFO  02:16:19,851 - #14 void
INFO  02:16:19,851 - #49 main
INFO  02:16:19,851 - #40 (
INFO  02:16:19,852 - #41 )
INFO  02:16:19,852 - #49 int
INFO  02:16:19,852 - #49 niz
INFO  02:16:19,852 - #42 [
INFO  02:16:19,852 - #43 ]
INFO  02:16:19,852 - #38 ;
INFO  02:16:19,852 - #44 {
INFO  02:16:19,852 - #12 print
INFO  02:16:19,852 - #40 (
INFO  02:16:19,852 - #49 a
INFO  02:16:19,852 - #40 (
INFO  02:16:19,852 - #52 1
INFO  02:16:19,852 - #39 ,
INFO  02:16:19,853 - #52 2
INFO  02:16:19,853 - #41 )
INFO  02:16:19,853 - #41 )
INFO  02:16:19,854 - #38 ;
INFO  02:16:19,854 - #45 }
INFO  02:16:19,854 - #45 }
INFO  02:16:19,857 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:16:19,857 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:16:19,857 - Line 11: Method Call detected. Method name: a
INFO  02:16:19,858 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:16:38,136 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:16:38,154 - #2 program
INFO  02:16:38,154 - #49 MJProgram
INFO  02:16:38,155 - #49 int
INFO  02:16:38,155 - #49 x
INFO  02:16:38,155 - #38 ;
INFO  02:16:38,155 - #49 int
INFO  02:16:38,156 - #49 y
INFO  02:16:38,156 - #38 ;
INFO  02:16:38,156 - #44 {
INFO  02:16:38,156 - #49 int
INFO  02:16:38,156 - #49 a
INFO  02:16:38,156 - #40 (
INFO  02:16:38,156 - #49 int
INFO  02:16:38,156 - #49 x
INFO  02:16:38,156 - #39 ,
INFO  02:16:38,157 - #49 int
INFO  02:16:38,157 - #49 y
INFO  02:16:38,157 - #41 )
INFO  02:16:38,157 - #44 {
INFO  02:16:38,157 - #15 return
INFO  02:16:38,157 - #49 x
INFO  02:16:38,157 - #22 +
INFO  02:16:38,158 - #49 y
INFO  02:16:38,158 - #38 ;
INFO  02:16:38,158 - #45 }
INFO  02:16:38,158 - #14 void
INFO  02:16:38,158 - #49 main
INFO  02:16:38,158 - #40 (
INFO  02:16:38,158 - #41 )
INFO  02:16:38,158 - #49 int
INFO  02:16:38,158 - #49 niz
INFO  02:16:38,159 - #42 [
INFO  02:16:38,159 - #43 ]
INFO  02:16:38,159 - #38 ;
INFO  02:16:38,159 - #44 {
INFO  02:16:38,159 - #12 print
INFO  02:16:38,159 - #40 (
INFO  02:16:38,159 - #49 a
INFO  02:16:38,159 - #40 (
INFO  02:16:38,159 - #52 1
INFO  02:16:38,159 - #39 ,
INFO  02:16:38,160 - #52 2
INFO  02:16:38,160 - #41 )
INFO  02:16:38,160 - #41 )
INFO  02:16:38,161 - #38 ;
INFO  02:16:38,161 - #45 }
INFO  02:16:38,161 - #45 }
INFO  02:16:38,165 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:16:38,165 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:16:38,165 - Line 11: Method Call detected. Method name: a
INFO  02:16:38,166 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:16:52,033 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:16:52,052 - #2 program
INFO  02:16:52,052 - #49 MJProgram
INFO  02:16:52,052 - #49 int
INFO  02:16:52,052 - #49 x
INFO  02:16:52,053 - #38 ;
INFO  02:16:52,053 - #49 int
INFO  02:16:52,053 - #49 y
INFO  02:16:52,053 - #38 ;
INFO  02:16:52,053 - #44 {
INFO  02:16:52,053 - #49 int
INFO  02:16:52,054 - #49 a
INFO  02:16:52,054 - #40 (
INFO  02:16:52,054 - #49 int
INFO  02:16:52,054 - #49 x
INFO  02:16:52,054 - #39 ,
INFO  02:16:52,054 - #49 int
INFO  02:16:52,054 - #49 y
INFO  02:16:52,054 - #41 )
INFO  02:16:52,054 - #44 {
INFO  02:16:52,055 - #15 return
INFO  02:16:52,055 - #52 5
INFO  02:16:52,055 - #38 ;
INFO  02:16:52,055 - #45 }
INFO  02:16:52,055 - #14 void
INFO  02:16:52,055 - #49 main
INFO  02:16:52,055 - #40 (
INFO  02:16:52,055 - #41 )
INFO  02:16:52,055 - #49 int
INFO  02:16:52,055 - #49 niz
INFO  02:16:52,056 - #42 [
INFO  02:16:52,056 - #43 ]
INFO  02:16:52,056 - #38 ;
INFO  02:16:52,056 - #44 {
INFO  02:16:52,056 - #12 print
INFO  02:16:52,056 - #40 (
INFO  02:16:52,056 - #49 a
INFO  02:16:52,056 - #40 (
INFO  02:16:52,056 - #52 1
INFO  02:16:52,056 - #39 ,
INFO  02:16:52,056 - #52 2
INFO  02:16:52,056 - #41 )
INFO  02:16:52,057 - #41 )
INFO  02:16:52,057 - #38 ;
INFO  02:16:52,057 - #45 }
INFO  02:16:52,057 - #45 }
INFO  02:16:52,061 - Line 11: Method Call detected. Method name: a
INFO  02:16:52,062 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:17:22,106 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:17:22,124 - #2 program
INFO  02:17:22,124 - #49 MJProgram
INFO  02:17:22,124 - #49 int
INFO  02:17:22,125 - #49 x
INFO  02:17:22,125 - #38 ;
INFO  02:17:22,125 - #49 int
INFO  02:17:22,125 - #49 y
INFO  02:17:22,125 - #38 ;
INFO  02:17:22,125 - #44 {
INFO  02:17:22,125 - #49 int
INFO  02:17:22,126 - #49 a
INFO  02:17:22,126 - #40 (
INFO  02:17:22,126 - #49 int
INFO  02:17:22,126 - #49 x
INFO  02:17:22,126 - #39 ,
INFO  02:17:22,126 - #49 int
INFO  02:17:22,126 - #49 y
INFO  02:17:22,126 - #41 )
INFO  02:17:22,126 - #44 {
INFO  02:17:22,127 - #15 return
INFO  02:17:22,127 - #52 5
INFO  02:17:22,127 - #38 ;
INFO  02:17:22,127 - #45 }
INFO  02:17:22,127 - #14 void
INFO  02:17:22,127 - #49 main
INFO  02:17:22,127 - #40 (
INFO  02:17:22,127 - #41 )
INFO  02:17:22,127 - #49 int
INFO  02:17:22,128 - #49 niz
INFO  02:17:22,128 - #42 [
INFO  02:17:22,128 - #43 ]
INFO  02:17:22,128 - #39 ,
INFO  02:17:22,128 - #49 p
INFO  02:17:22,128 - #38 ;
INFO  02:17:22,128 - #44 {
INFO  02:17:22,128 - #49 p
INFO  02:17:22,128 - #27 =
INFO  02:17:22,128 - #49 a
INFO  02:17:22,128 - #40 (
INFO  02:17:22,128 - #52 1
INFO  02:17:22,129 - #39 ,
INFO  02:17:22,129 - #52 2
INFO  02:17:22,129 - #41 )
INFO  02:17:22,129 - #38 ;
INFO  02:17:22,129 - #45 }
INFO  02:17:22,129 - #45 }
INFO  02:17:22,133 - Line 11: Using local variable name: p
INFO  02:17:22,133 - Line 11: Method Call detected. Method name: a
INFO  02:17:22,134 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:17:29,421 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:17:29,440 - #2 program
INFO  02:17:29,440 - #49 MJProgram
INFO  02:17:29,440 - #49 int
INFO  02:17:29,441 - #49 x
INFO  02:17:29,441 - #38 ;
INFO  02:17:29,441 - #49 int
INFO  02:17:29,442 - #49 y
INFO  02:17:29,442 - #38 ;
INFO  02:17:29,442 - #44 {
INFO  02:17:29,442 - #49 int
INFO  02:17:29,442 - #49 a
INFO  02:17:29,442 - #40 (
INFO  02:17:29,442 - #49 int
INFO  02:17:29,442 - #49 x
INFO  02:17:29,442 - #39 ,
INFO  02:17:29,443 - #49 int
INFO  02:17:29,443 - #49 y
INFO  02:17:29,443 - #41 )
INFO  02:17:29,443 - #44 {
INFO  02:17:29,443 - #15 return
INFO  02:17:29,444 - #52 5
INFO  02:17:29,444 - #38 ;
INFO  02:17:29,444 - #45 }
INFO  02:17:29,444 - #14 void
INFO  02:17:29,444 - #49 main
INFO  02:17:29,445 - #40 (
INFO  02:17:29,445 - #41 )
INFO  02:17:29,445 - #49 int
INFO  02:17:29,445 - #49 niz
INFO  02:17:29,445 - #42 [
INFO  02:17:29,445 - #43 ]
INFO  02:17:29,445 - #39 ,
INFO  02:17:29,446 - #49 p
INFO  02:17:29,446 - #38 ;
INFO  02:17:29,446 - #44 {
INFO  02:17:29,446 - #49 p
INFO  02:17:29,446 - #27 =
INFO  02:17:29,446 - #49 a
INFO  02:17:29,446 - #40 (
INFO  02:17:29,446 - #52 1
INFO  02:17:29,447 - #39 ,
INFO  02:17:29,447 - #52 2
INFO  02:17:29,447 - #41 )
INFO  02:17:29,447 - #38 ;
INFO  02:17:29,448 - #12 print
INFO  02:17:29,448 - #40 (
INFO  02:17:29,448 - #49 p
INFO  02:17:29,448 - #41 )
INFO  02:17:29,449 - #38 ;
INFO  02:17:29,449 - #45 }
INFO  02:17:29,449 - #45 }
INFO  02:17:29,453 - Line 11: Using local variable name: p
INFO  02:17:29,453 - Line 11: Method Call detected. Method name: a
INFO  02:17:29,453 - Line 12: Using local variable name: p
INFO  02:17:29,454 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:19:49,926 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:19:49,944 - #2 program
INFO  02:19:49,944 - #49 MJProgram
INFO  02:19:49,944 - #49 int
INFO  02:19:49,945 - #49 x
INFO  02:19:49,945 - #38 ;
INFO  02:19:49,945 - #49 int
INFO  02:19:49,945 - #49 y
INFO  02:19:49,945 - #38 ;
INFO  02:19:49,945 - #44 {
INFO  02:19:49,945 - #49 int
INFO  02:19:49,946 - #49 a
INFO  02:19:49,946 - #40 (
INFO  02:19:49,946 - #49 int
INFO  02:19:49,946 - #49 x
INFO  02:19:49,946 - #39 ,
INFO  02:19:49,946 - #49 int
INFO  02:19:49,946 - #49 y
INFO  02:19:49,946 - #41 )
INFO  02:19:49,946 - #44 {
INFO  02:19:49,947 - #15 return
INFO  02:19:49,947 - #52 5
INFO  02:19:49,947 - #38 ;
INFO  02:19:49,947 - #45 }
INFO  02:19:49,947 - #14 void
INFO  02:19:49,947 - #49 main
INFO  02:19:49,948 - #40 (
INFO  02:19:49,948 - #41 )
INFO  02:19:49,948 - #49 int
INFO  02:19:49,948 - #49 niz
INFO  02:19:49,948 - #42 [
INFO  02:19:49,948 - #43 ]
INFO  02:19:49,948 - #39 ,
INFO  02:19:49,948 - #49 p
INFO  02:19:49,948 - #38 ;
INFO  02:19:49,948 - #44 {
INFO  02:19:49,948 - #49 p
INFO  02:19:49,948 - #27 =
INFO  02:19:49,948 - #49 a
INFO  02:19:49,948 - #40 (
INFO  02:19:49,949 - #52 1
INFO  02:19:49,949 - #39 ,
INFO  02:19:49,949 - #52 2
INFO  02:19:49,949 - #41 )
INFO  02:19:49,949 - #38 ;
INFO  02:19:49,950 - #12 print
INFO  02:19:49,950 - #40 (
INFO  02:19:49,950 - #49 p
INFO  02:19:49,950 - #41 )
INFO  02:19:49,950 - #38 ;
INFO  02:19:49,950 - #45 }
INFO  02:19:49,950 - #45 }
INFO  02:19:49,954 - Line 11: Using local variable name: p
INFO  02:19:49,954 - Line 11: Method Call detected. Method name: a
INFO  02:19:49,955 - Line 12: Using local variable name: p
INFO  02:19:49,956 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:22:22,139 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:22:22,164 - #2 program
INFO  02:22:22,164 - #49 MJProgram
INFO  02:22:22,164 - #49 int
INFO  02:22:22,164 - #49 x
INFO  02:22:22,165 - #38 ;
INFO  02:22:22,165 - #49 int
INFO  02:22:22,165 - #49 y
INFO  02:22:22,165 - #38 ;
INFO  02:22:22,165 - #44 {
INFO  02:22:22,165 - #49 int
INFO  02:22:22,166 - #49 a
INFO  02:22:22,166 - #40 (
INFO  02:22:22,166 - #49 int
INFO  02:22:22,166 - #49 x
INFO  02:22:22,166 - #39 ,
INFO  02:22:22,166 - #49 int
INFO  02:22:22,166 - #49 y
INFO  02:22:22,166 - #41 )
INFO  02:22:22,167 - #44 {
INFO  02:22:22,167 - #15 return
INFO  02:22:22,167 - #52 5
INFO  02:22:22,167 - #38 ;
INFO  02:22:22,167 - #45 }
INFO  02:22:22,168 - #14 void
INFO  02:22:22,168 - #49 main
INFO  02:22:22,168 - #40 (
INFO  02:22:22,168 - #41 )
INFO  02:22:22,168 - #49 int
INFO  02:22:22,168 - #49 niz
INFO  02:22:22,168 - #42 [
INFO  02:22:22,168 - #43 ]
INFO  02:22:22,168 - #39 ,
INFO  02:22:22,169 - #49 p
INFO  02:22:22,169 - #38 ;
INFO  02:22:22,169 - #44 {
INFO  02:22:22,169 - #49 p
INFO  02:22:22,169 - #27 =
INFO  02:22:22,169 - #49 a
INFO  02:22:22,169 - #40 (
INFO  02:22:22,169 - #52 1
INFO  02:22:22,169 - #39 ,
INFO  02:22:22,169 - #52 2
INFO  02:22:22,169 - #41 )
INFO  02:22:22,170 - #38 ;
INFO  02:22:22,170 - #12 print
INFO  02:22:22,171 - #40 (
INFO  02:22:22,171 - #49 p
INFO  02:22:22,171 - #41 )
INFO  02:22:22,171 - #38 ;
INFO  02:22:22,171 - #45 }
INFO  02:22:22,171 - #45 }
INFO  02:22:22,180 - Line 11: Using local variable name: p
INFO  02:22:41,987 - Line 11: Method Call detected. Method name: a
INFO  02:22:41,988 - Line 12: Using local variable name: p
INFO  02:24:14,488 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:24:14,505 - #2 program
INFO  02:24:14,505 - #49 MJProgram
INFO  02:24:14,505 - #49 int
INFO  02:24:14,506 - #49 x
INFO  02:24:14,506 - #38 ;
INFO  02:24:14,506 - #49 int
INFO  02:24:14,507 - #49 y
INFO  02:24:14,507 - #38 ;
INFO  02:24:14,507 - #44 {
INFO  02:24:14,507 - #49 int
INFO  02:24:14,507 - #49 a
INFO  02:24:14,507 - #40 (
INFO  02:24:14,507 - #49 int
INFO  02:24:14,507 - #49 x
INFO  02:24:14,507 - #39 ,
INFO  02:24:14,507 - #49 int
INFO  02:24:14,507 - #49 y
INFO  02:24:14,508 - #41 )
INFO  02:24:14,508 - #44 {
INFO  02:24:14,508 - #15 return
INFO  02:24:14,508 - #52 5
INFO  02:24:14,508 - #38 ;
INFO  02:24:14,508 - #45 }
INFO  02:24:14,509 - #14 void
INFO  02:24:14,509 - #49 main
INFO  02:24:14,509 - #40 (
INFO  02:24:14,509 - #41 )
INFO  02:24:14,509 - #49 int
INFO  02:24:14,509 - #49 niz
INFO  02:24:14,509 - #42 [
INFO  02:24:14,509 - #43 ]
INFO  02:24:14,509 - #39 ,
INFO  02:24:14,509 - #49 p
INFO  02:24:14,509 - #38 ;
INFO  02:24:14,510 - #44 {
INFO  02:24:14,510 - #49 p
INFO  02:24:14,510 - #27 =
INFO  02:24:14,510 - #49 a
INFO  02:24:14,510 - #40 (
INFO  02:24:14,510 - #52 1
INFO  02:24:14,510 - #39 ,
INFO  02:24:14,510 - #52 2
INFO  02:24:14,510 - #41 )
INFO  02:24:14,511 - #38 ;
INFO  02:24:14,511 - #12 print
INFO  02:24:14,511 - #40 (
INFO  02:24:14,511 - #49 p
INFO  02:24:14,511 - #41 )
INFO  02:24:14,512 - #38 ;
INFO  02:24:14,512 - #45 }
INFO  02:24:14,512 - #45 }
INFO  02:24:14,516 - Line 11: Using local variable name: p
INFO  02:24:14,516 - Line 11: Method Call detected. Method name: a
INFO  02:24:14,516 - Line 12: Using local variable name: p
INFO  02:24:14,517 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:26:36,224 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:26:36,242 - #2 program
INFO  02:26:36,242 - #49 MJProgram
INFO  02:26:36,242 - #49 int
INFO  02:26:36,242 - #49 x
INFO  02:26:36,243 - #38 ;
INFO  02:26:36,243 - #49 int
INFO  02:26:36,243 - #49 y
INFO  02:26:36,243 - #38 ;
INFO  02:26:36,243 - #44 {
INFO  02:26:36,243 - #49 int
INFO  02:26:36,244 - #49 a
INFO  02:26:36,244 - #40 (
INFO  02:26:36,244 - #49 int
INFO  02:26:36,244 - #49 x
INFO  02:26:36,244 - #39 ,
INFO  02:26:36,244 - #49 int
INFO  02:26:36,244 - #49 y
INFO  02:26:36,244 - #41 )
INFO  02:26:36,244 - #44 {
INFO  02:26:36,245 - #15 return
INFO  02:26:36,245 - #49 x
INFO  02:26:36,245 - #24 *
INFO  02:26:36,245 - #49 y
INFO  02:26:36,245 - #38 ;
INFO  02:26:36,246 - #45 }
INFO  02:26:36,246 - #14 void
INFO  02:26:36,246 - #49 main
INFO  02:26:36,246 - #40 (
INFO  02:26:36,246 - #41 )
INFO  02:26:36,246 - #49 int
INFO  02:26:36,246 - #49 niz
INFO  02:26:36,246 - #42 [
INFO  02:26:36,246 - #43 ]
INFO  02:26:36,246 - #39 ,
INFO  02:26:36,247 - #49 p
INFO  02:26:36,247 - #38 ;
INFO  02:26:36,247 - #44 {
INFO  02:26:36,247 - #49 p
INFO  02:26:36,247 - #27 =
INFO  02:26:36,247 - #49 a
INFO  02:26:36,247 - #40 (
INFO  02:26:36,247 - #52 1
INFO  02:26:36,248 - #39 ,
INFO  02:26:36,248 - #52 2
INFO  02:26:36,248 - #41 )
INFO  02:26:36,248 - #38 ;
INFO  02:26:36,248 - #12 print
INFO  02:26:36,248 - #40 (
INFO  02:26:36,248 - #49 p
INFO  02:26:36,248 - #41 )
INFO  02:26:36,249 - #38 ;
INFO  02:26:36,249 - #45 }
INFO  02:26:36,249 - #45 }
INFO  02:26:36,252 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:26:36,252 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:26:36,252 - Line 11: Using local variable name: p
INFO  02:26:36,252 - Line 11: Method Call detected. Method name: a
INFO  02:26:36,252 - Line 12: Using local variable name: p
INFO  02:26:36,254 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:26:47,027 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:26:47,047 - #2 program
INFO  02:26:47,047 - #49 MJProgram
INFO  02:26:47,047 - #49 int
INFO  02:26:47,047 - #49 x
INFO  02:26:47,047 - #38 ;
INFO  02:26:47,048 - #49 int
INFO  02:26:47,048 - #49 y
INFO  02:26:47,048 - #38 ;
INFO  02:26:47,048 - #44 {
INFO  02:26:47,048 - #49 int
INFO  02:26:47,048 - #49 a
INFO  02:26:47,048 - #40 (
INFO  02:26:47,048 - #49 int
INFO  02:26:47,048 - #49 x
INFO  02:26:47,049 - #39 ,
INFO  02:26:47,049 - #49 int
INFO  02:26:47,049 - #49 y
INFO  02:26:47,049 - #41 )
INFO  02:26:47,049 - #44 {
INFO  02:26:47,049 - #15 return
INFO  02:26:47,049 - #49 x
INFO  02:26:47,049 - #24 *
INFO  02:26:47,050 - #49 y
INFO  02:26:47,050 - #38 ;
INFO  02:26:47,050 - #45 }
INFO  02:26:47,050 - #14 void
INFO  02:26:47,050 - #49 main
INFO  02:26:47,050 - #40 (
INFO  02:26:47,050 - #41 )
INFO  02:26:47,050 - #49 int
INFO  02:26:47,050 - #49 niz
INFO  02:26:47,050 - #42 [
INFO  02:26:47,051 - #43 ]
INFO  02:26:47,051 - #39 ,
INFO  02:26:47,051 - #49 p
INFO  02:26:47,051 - #38 ;
INFO  02:26:47,051 - #44 {
INFO  02:26:47,051 - #49 p
INFO  02:26:47,051 - #27 =
INFO  02:26:47,051 - #49 a
INFO  02:26:47,051 - #40 (
INFO  02:26:47,051 - #52 1
INFO  02:26:47,051 - #39 ,
INFO  02:26:47,052 - #52 8
INFO  02:26:47,052 - #41 )
INFO  02:26:47,052 - #38 ;
INFO  02:26:47,052 - #12 print
INFO  02:26:47,052 - #40 (
INFO  02:26:47,052 - #49 p
INFO  02:26:47,052 - #41 )
INFO  02:26:47,052 - #38 ;
INFO  02:26:47,053 - #45 }
INFO  02:26:47,053 - #45 }
INFO  02:26:47,056 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:26:47,056 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:26:47,056 - Line 11: Using local variable name: p
INFO  02:26:47,056 - Line 11: Method Call detected. Method name: a
INFO  02:26:47,056 - Line 12: Using local variable name: p
INFO  02:26:47,058 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:29:44,374 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:29:44,393 - #2 program
INFO  02:29:44,393 - #49 MJProgram
INFO  02:29:44,393 - #49 int
INFO  02:29:44,393 - #49 x
INFO  02:29:44,394 - #38 ;
INFO  02:29:44,394 - #49 int
INFO  02:29:44,394 - #49 y
INFO  02:29:44,394 - #38 ;
INFO  02:29:44,394 - #44 {
INFO  02:29:44,394 - #49 int
INFO  02:29:44,394 - #49 a
INFO  02:29:44,394 - #40 (
INFO  02:29:44,395 - #49 int
INFO  02:29:44,395 - #49 x
INFO  02:29:44,395 - #39 ,
INFO  02:29:44,395 - #49 int
INFO  02:29:44,395 - #47 .
INFO  02:29:44,395 - #47 .
INFO  02:29:44,395 - #47 .
INFO  02:29:44,395 - #49 y
INFO  02:29:44,395 - #41 )
INFO  02:29:44,395 - #44 {
INFO  02:29:44,396 - #15 return
INFO  02:29:44,396 - #49 x
INFO  02:29:44,396 - #24 *
INFO  02:29:44,396 - #49 y
INFO  02:29:44,396 - #38 ;
INFO  02:29:44,396 - #45 }
INFO  02:29:44,397 - #14 void
INFO  02:29:44,397 - #49 main
INFO  02:29:44,397 - #40 (
INFO  02:29:44,397 - #41 )
INFO  02:29:44,397 - #49 int
INFO  02:29:44,397 - #49 niz
INFO  02:29:44,397 - #42 [
INFO  02:29:44,397 - #43 ]
INFO  02:29:44,397 - #39 ,
INFO  02:29:44,397 - #49 p
INFO  02:29:44,397 - #38 ;
INFO  02:29:44,398 - #44 {
INFO  02:29:44,398 - #49 p
INFO  02:29:44,398 - #27 =
INFO  02:29:44,398 - #49 a
INFO  02:29:44,398 - #40 (
INFO  02:29:44,398 - #52 1
INFO  02:29:44,398 - #39 ,
INFO  02:29:44,399 - #52 8
INFO  02:29:44,399 - #41 )
INFO  02:29:44,399 - #38 ;
INFO  02:29:44,399 - #12 print
INFO  02:29:44,399 - #40 (
INFO  02:29:44,399 - #49 p
INFO  02:29:44,399 - #41 )
INFO  02:29:44,400 - #38 ;
INFO  02:29:44,400 - #45 }
INFO  02:29:44,400 - #45 }
INFO  02:29:44,403 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:29:44,403 - Line 7: Access to formal argument detected. Method name: a, argument name: y
ERROR 02:29:44,403 - Line 7: Invalid argument types for operation: multiplication
ERROR 02:29:44,403 - Cannot invoke "rs.etf.pp1.symboltable.concepts.Obj.getType()" because "rs.ac.bg.etf.pp1.ast.SingleReturnExprStatement.getExpr().obj" is null
INFO  02:30:00,768 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:30:00,787 - #2 program
INFO  02:30:00,787 - #49 MJProgram
INFO  02:30:00,787 - #49 int
INFO  02:30:00,787 - #49 x
INFO  02:30:00,787 - #38 ;
INFO  02:30:00,788 - #49 int
INFO  02:30:00,788 - #49 y
INFO  02:30:00,788 - #38 ;
INFO  02:30:00,788 - #44 {
INFO  02:30:00,788 - #49 int
INFO  02:30:00,788 - #49 a
INFO  02:30:00,788 - #40 (
INFO  02:30:00,788 - #49 int
INFO  02:30:00,789 - #49 x
INFO  02:30:00,789 - #39 ,
INFO  02:30:00,789 - #49 int
INFO  02:30:00,789 - #47 .
INFO  02:30:00,789 - #47 .
INFO  02:30:00,789 - #47 .
INFO  02:30:00,789 - #49 y
INFO  02:30:00,789 - #41 )
INFO  02:30:00,789 - #44 {
INFO  02:30:00,789 - #15 return
INFO  02:30:00,790 - #49 x
INFO  02:30:00,790 - #38 ;
INFO  02:30:00,790 - #45 }
INFO  02:30:00,790 - #14 void
INFO  02:30:00,790 - #49 main
INFO  02:30:00,790 - #40 (
INFO  02:30:00,790 - #41 )
INFO  02:30:00,790 - #49 int
INFO  02:30:00,790 - #49 niz
INFO  02:30:00,790 - #42 [
INFO  02:30:00,790 - #43 ]
INFO  02:30:00,790 - #39 ,
INFO  02:30:00,791 - #49 p
INFO  02:30:00,791 - #38 ;
INFO  02:30:00,791 - #44 {
INFO  02:30:00,791 - #49 p
INFO  02:30:00,791 - #27 =
INFO  02:30:00,791 - #49 a
INFO  02:30:00,791 - #40 (
INFO  02:30:00,791 - #52 1
INFO  02:30:00,791 - #39 ,
INFO  02:30:00,791 - #52 8
INFO  02:30:00,791 - #41 )
INFO  02:30:00,791 - #38 ;
INFO  02:30:00,792 - #12 print
INFO  02:30:00,792 - #40 (
INFO  02:30:00,792 - #49 p
INFO  02:30:00,792 - #41 )
INFO  02:30:00,792 - #38 ;
INFO  02:30:00,792 - #45 }
INFO  02:30:00,793 - #45 }
INFO  02:30:00,796 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:30:00,796 - Line 11: Using local variable name: p
INFO  02:30:00,796 - Line 11: Method Call detected. Method name: a
INFO  02:30:00,796 - Method a has varArgs with 1 args
INFO  02:30:00,796 - Line 12: Using local variable name: p
INFO  02:30:00,797 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:30:18,710 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:30:18,729 - #2 program
INFO  02:30:18,729 - #49 MJProgram
INFO  02:30:18,729 - #49 int
INFO  02:30:18,730 - #49 x
INFO  02:30:18,730 - #38 ;
INFO  02:30:18,730 - #49 int
INFO  02:30:18,730 - #49 y
INFO  02:30:18,730 - #38 ;
INFO  02:30:18,730 - #44 {
INFO  02:30:18,731 - #49 int
INFO  02:30:18,731 - #49 a
INFO  02:30:18,731 - #40 (
INFO  02:30:18,731 - #49 int
INFO  02:30:18,731 - #49 x
INFO  02:30:18,731 - #39 ,
INFO  02:30:18,731 - #49 int
INFO  02:30:18,731 - #47 .
INFO  02:30:18,731 - #47 .
INFO  02:30:18,731 - #47 .
INFO  02:30:18,731 - #49 y
INFO  02:30:18,731 - #41 )
INFO  02:30:18,731 - #44 {
INFO  02:30:18,732 - #15 return
INFO  02:30:18,732 - #49 x
INFO  02:30:18,732 - #22 +
INFO  02:30:18,732 - #49 y
INFO  02:30:18,732 - #42 [
INFO  02:30:18,733 - #52 0
INFO  02:30:18,733 - #43 ]
INFO  02:30:18,733 - #38 ;
INFO  02:30:18,733 - #45 }
INFO  02:30:18,733 - #14 void
INFO  02:30:18,733 - #49 main
INFO  02:30:18,733 - #40 (
INFO  02:30:18,733 - #41 )
INFO  02:30:18,733 - #49 int
INFO  02:30:18,733 - #49 niz
INFO  02:30:18,733 - #42 [
INFO  02:30:18,733 - #43 ]
INFO  02:30:18,733 - #39 ,
INFO  02:30:18,734 - #49 p
INFO  02:30:18,734 - #38 ;
INFO  02:30:18,734 - #44 {
INFO  02:30:18,734 - #49 p
INFO  02:30:18,734 - #27 =
INFO  02:30:18,734 - #49 a
INFO  02:30:18,734 - #40 (
INFO  02:30:18,734 - #52 1
INFO  02:30:18,735 - #39 ,
INFO  02:30:18,735 - #52 8
INFO  02:30:18,735 - #41 )
INFO  02:30:18,735 - #38 ;
INFO  02:30:18,735 - #12 print
INFO  02:30:18,735 - #40 (
INFO  02:30:18,736 - #49 p
INFO  02:30:18,736 - #41 )
INFO  02:30:18,736 - #38 ;
INFO  02:30:18,736 - #45 }
INFO  02:30:18,736 - #45 }
INFO  02:30:18,739 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:30:18,739 - Line 7: Access to array element detected. Array name: y
INFO  02:30:18,739 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:30:18,739 - Line 11: Using local variable name: p
INFO  02:30:18,739 - Line 11: Method Call detected. Method name: a
INFO  02:30:18,740 - Method a has varArgs with 1 args
INFO  02:30:18,740 - Line 12: Using local variable name: p
INFO  02:30:18,741 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:31:00,986 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:31:01,009 - #2 program
INFO  02:31:01,009 - #49 MJProgram
INFO  02:31:01,009 - #49 int
INFO  02:31:01,010 - #49 x
INFO  02:31:01,010 - #38 ;
INFO  02:31:01,011 - #49 int
INFO  02:31:01,011 - #49 y
INFO  02:31:01,011 - #38 ;
INFO  02:31:01,012 - #44 {
INFO  02:31:01,012 - #49 int
INFO  02:31:01,012 - #49 a
INFO  02:31:01,012 - #40 (
INFO  02:31:01,012 - #49 int
INFO  02:31:01,012 - #49 x
INFO  02:31:01,012 - #39 ,
INFO  02:31:01,012 - #49 int
INFO  02:31:01,013 - #47 .
INFO  02:31:01,013 - #47 .
INFO  02:31:01,013 - #47 .
INFO  02:31:01,013 - #49 y
INFO  02:31:01,013 - #41 )
INFO  02:31:01,013 - #44 {
INFO  02:31:01,013 - #15 return
INFO  02:31:01,013 - #49 x
INFO  02:31:01,013 - #22 +
INFO  02:31:01,014 - #49 y
INFO  02:31:01,014 - #42 [
INFO  02:31:01,014 - #52 0
INFO  02:31:01,014 - #43 ]
INFO  02:31:01,014 - #38 ;
INFO  02:31:01,014 - #45 }
INFO  02:31:01,015 - #14 void
INFO  02:31:01,015 - #49 main
INFO  02:31:01,015 - #40 (
INFO  02:31:01,015 - #41 )
INFO  02:31:01,015 - #49 int
INFO  02:31:01,015 - #49 niz
INFO  02:31:01,015 - #42 [
INFO  02:31:01,015 - #43 ]
INFO  02:31:01,015 - #39 ,
INFO  02:31:01,016 - #49 p
INFO  02:31:01,016 - #38 ;
INFO  02:31:01,016 - #44 {
INFO  02:31:01,016 - #49 p
INFO  02:31:01,016 - #27 =
INFO  02:31:01,016 - #49 a
INFO  02:31:01,016 - #40 (
INFO  02:31:01,016 - #52 1
INFO  02:31:01,016 - #39 ,
INFO  02:31:01,016 - #52 8
INFO  02:31:01,016 - #41 )
INFO  02:31:01,017 - #38 ;
INFO  02:31:01,017 - #12 print
INFO  02:31:01,017 - #40 (
INFO  02:31:01,017 - #49 p
INFO  02:31:01,017 - #41 )
INFO  02:31:01,018 - #38 ;
INFO  02:31:01,018 - #45 }
INFO  02:31:01,018 - #45 }
INFO  02:31:07,542 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:31:10,236 - Line 7: Access to array element detected. Array name: y
INFO  02:31:10,236 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:31:10,236 - Line 11: Using local variable name: p
INFO  02:31:10,236 - Line 11: Method Call detected. Method name: a
INFO  02:31:10,236 - Method a has varArgs with 1 args
INFO  02:31:10,236 - Line 12: Using local variable name: p
INFO  02:31:51,869 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:31:51,894 - #2 program
INFO  02:31:51,894 - #49 MJProgram
INFO  02:31:51,894 - #49 int
INFO  02:31:51,894 - #49 x
INFO  02:31:51,895 - #38 ;
INFO  02:31:51,895 - #49 int
INFO  02:31:51,895 - #49 y
INFO  02:31:51,895 - #38 ;
INFO  02:31:51,895 - #44 {
INFO  02:31:51,895 - #49 int
INFO  02:31:51,895 - #49 a
INFO  02:31:51,896 - #40 (
INFO  02:31:51,896 - #49 int
INFO  02:31:51,896 - #49 x
INFO  02:31:51,896 - #39 ,
INFO  02:31:51,896 - #49 int
INFO  02:31:51,896 - #47 .
INFO  02:31:51,896 - #47 .
INFO  02:31:51,896 - #47 .
INFO  02:31:51,896 - #49 y
INFO  02:31:51,896 - #41 )
INFO  02:31:51,897 - #44 {
INFO  02:31:51,897 - #15 return
INFO  02:31:51,897 - #49 x
INFO  02:31:51,897 - #22 +
INFO  02:31:51,898 - #49 y
INFO  02:31:51,898 - #42 [
INFO  02:31:51,898 - #52 0
INFO  02:31:51,898 - #43 ]
INFO  02:31:51,899 - #38 ;
INFO  02:31:51,899 - #45 }
INFO  02:31:51,899 - #14 void
INFO  02:31:51,899 - #49 main
INFO  02:31:51,899 - #40 (
INFO  02:31:51,899 - #41 )
INFO  02:31:51,899 - #49 int
INFO  02:31:51,899 - #49 niz
INFO  02:31:51,899 - #42 [
INFO  02:31:51,899 - #43 ]
INFO  02:31:51,899 - #39 ,
INFO  02:31:51,900 - #49 p
INFO  02:31:51,900 - #38 ;
INFO  02:31:51,900 - #44 {
INFO  02:31:51,900 - #49 p
INFO  02:31:51,900 - #27 =
INFO  02:31:51,900 - #49 a
INFO  02:31:51,900 - #40 (
INFO  02:31:51,900 - #52 1
INFO  02:31:51,900 - #39 ,
INFO  02:31:51,900 - #52 8
INFO  02:31:51,900 - #41 )
INFO  02:31:51,901 - #38 ;
INFO  02:31:51,901 - #12 print
INFO  02:31:51,901 - #40 (
INFO  02:31:51,901 - #49 p
INFO  02:31:51,901 - #41 )
INFO  02:31:51,902 - #38 ;
INFO  02:31:51,902 - #45 }
INFO  02:31:51,902 - #45 }
INFO  02:31:51,910 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:31:55,550 - Line 7: Access to array element detected. Array name: y
INFO  02:31:55,550 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:31:55,550 - Line 11: Using local variable name: p
INFO  02:31:55,551 - Line 11: Method Call detected. Method name: a
INFO  02:31:55,551 - Method a has varArgs with 1 args
INFO  02:31:55,551 - Line 12: Using local variable name: p
INFO  02:56:33,688 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:56:33,707 - #2 program
INFO  02:56:33,707 - #49 MJProgram
INFO  02:56:33,707 - #49 int
INFO  02:56:33,707 - #49 x
INFO  02:56:33,707 - #38 ;
INFO  02:56:33,708 - #49 int
INFO  02:56:33,708 - #49 y
INFO  02:56:33,708 - #38 ;
INFO  02:56:33,708 - #44 {
INFO  02:56:33,708 - #49 int
INFO  02:56:33,708 - #49 a
INFO  02:56:33,708 - #40 (
INFO  02:56:33,709 - #49 int
INFO  02:56:33,709 - #49 x
INFO  02:56:33,709 - #39 ,
INFO  02:56:33,709 - #49 int
INFO  02:56:33,709 - #47 .
INFO  02:56:33,709 - #47 .
INFO  02:56:33,709 - #47 .
INFO  02:56:33,709 - #49 y
INFO  02:56:33,709 - #41 )
INFO  02:56:33,709 - #44 {
INFO  02:56:33,710 - #15 return
INFO  02:56:33,710 - #49 x
INFO  02:56:33,710 - #22 +
INFO  02:56:33,710 - #49 y
INFO  02:56:33,710 - #42 [
INFO  02:56:33,710 - #52 0
INFO  02:56:33,710 - #43 ]
INFO  02:56:33,711 - #38 ;
INFO  02:56:33,711 - #45 }
INFO  02:56:33,711 - #14 void
INFO  02:56:33,711 - #49 main
INFO  02:56:33,711 - #40 (
INFO  02:56:33,711 - #41 )
INFO  02:56:33,711 - #49 int
INFO  02:56:33,711 - #49 niz
INFO  02:56:33,711 - #42 [
INFO  02:56:33,711 - #43 ]
INFO  02:56:33,711 - #39 ,
INFO  02:56:33,712 - #49 p
INFO  02:56:33,712 - #38 ;
INFO  02:56:33,712 - #44 {
INFO  02:56:33,712 - #49 p
INFO  02:56:33,712 - #27 =
INFO  02:56:33,712 - #49 a
INFO  02:56:33,712 - #40 (
INFO  02:56:33,712 - #52 1
INFO  02:56:33,712 - #39 ,
INFO  02:56:33,713 - #52 8
INFO  02:56:33,713 - #41 )
INFO  02:56:33,713 - #38 ;
INFO  02:56:33,713 - #12 print
INFO  02:56:33,713 - #40 (
INFO  02:56:33,713 - #49 p
INFO  02:56:33,713 - #41 )
INFO  02:56:33,714 - #38 ;
INFO  02:56:33,714 - #45 }
INFO  02:56:33,714 - #45 }
INFO  02:56:33,717 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  02:56:33,718 - Line 7: Access to array element detected. Array name: y
INFO  02:56:33,718 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  02:56:33,718 - Line 11: Using local variable name: p
INFO  02:56:33,718 - Line 11: Method Call detected. Method name: a
INFO  02:56:33,718 - Method a has varArgs with 1 args
INFO  02:56:33,718 - Line 12: Using local variable name: p
INFO  02:56:33,719 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:56:56,792 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:56:56,810 - #2 program
INFO  02:56:56,810 - #49 MJProgram
INFO  02:56:56,810 - #49 int
INFO  02:56:56,811 - #49 x
INFO  02:56:56,811 - #38 ;
INFO  02:56:56,811 - #49 int
INFO  02:56:56,811 - #49 y
INFO  02:56:56,811 - #38 ;
INFO  02:56:56,811 - #44 {
INFO  02:56:56,811 - #49 int
INFO  02:56:56,812 - #49 a
INFO  02:56:56,812 - #40 (
INFO  02:56:56,812 - #49 int
INFO  02:56:56,812 - #49 x
INFO  02:56:56,812 - #39 ,
INFO  02:56:56,812 - #49 int
INFO  02:56:56,812 - #47 .
INFO  02:56:56,812 - #47 .
INFO  02:56:56,812 - #47 .
INFO  02:56:56,812 - #49 y
INFO  02:56:56,812 - #41 )
INFO  02:56:56,813 - #44 {
INFO  02:56:56,813 - #15 return
INFO  02:56:56,813 - #49 x
INFO  02:56:56,813 - #22 +
INFO  02:56:56,813 - #49 y
INFO  02:56:56,814 - #42 [
INFO  02:56:56,814 - #52 0
INFO  02:56:56,814 - #43 ]
INFO  02:56:56,814 - #38 ;
INFO  02:56:56,814 - #45 }
INFO  02:56:56,814 - #14 void
INFO  02:56:56,814 - #49 main
INFO  02:56:56,815 - #40 (
INFO  02:56:56,815 - #41 )
INFO  02:56:56,815 - #49 int
INFO  02:56:56,815 - #49 niz
INFO  02:56:56,815 - #42 [
INFO  02:56:56,815 - #43 ]
INFO  02:56:56,815 - #39 ,
INFO  02:56:56,815 - #49 p
INFO  02:56:56,815 - #38 ;
INFO  02:56:56,815 - #44 {
INFO  02:56:56,816 - #49 p
INFO  02:56:56,816 - #27 =
INFO  02:56:56,816 - #49 a
INFO  02:56:56,816 - #40 (
INFO  02:56:56,816 - #52 1
INFO  02:56:56,816 - #39 ,
INFO  02:56:56,816 - #52 8
INFO  02:56:56,816 - #41 )
INFO  02:56:56,816 - #38 ;
INFO  02:56:56,817 - #12 print
INFO  02:56:56,817 - #40 (
INFO  02:56:56,817 - #49 p
INFO  02:56:56,817 - #41 )
INFO  02:56:56,817 - #38 ;
INFO  02:56:56,817 - #45 }
INFO  02:56:56,817 - #45 }
INFO  02:56:56,821 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  02:56:56,828 - Line 6: Access to array element detected. Array name: y
INFO  02:56:56,828 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  02:56:56,828 - Line 10: Using local variable name: p
INFO  02:56:56,828 - Line 10: Method Call detected. Method name: a
INFO  02:56:56,828 - Method a has varArgs with 1 args
INFO  02:56:56,828 - Line 11: Using local variable name: p
INFO  02:56:56,829 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  02:59:57,754 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  02:59:57,779 - #2 program
INFO  02:59:57,779 - #49 MJProgram
INFO  02:59:57,780 - #49 int
INFO  02:59:57,780 - #49 x
INFO  02:59:57,780 - #38 ;
INFO  02:59:57,781 - #49 int
INFO  02:59:57,781 - #49 y
INFO  02:59:57,781 - #38 ;
INFO  02:59:57,781 - #44 {
INFO  02:59:57,781 - #49 int
INFO  02:59:57,781 - #49 a
INFO  02:59:57,781 - #40 (
INFO  02:59:57,782 - #49 int
INFO  02:59:57,782 - #49 x
INFO  02:59:57,782 - #39 ,
INFO  02:59:57,782 - #49 int
INFO  02:59:57,782 - #47 .
INFO  02:59:57,782 - #47 .
INFO  02:59:57,782 - #47 .
INFO  02:59:57,782 - #49 y
INFO  02:59:57,782 - #41 )
INFO  02:59:57,782 - #44 {
INFO  02:59:57,783 - #15 return
INFO  02:59:57,783 - #49 x
INFO  02:59:57,783 - #22 +
INFO  02:59:57,783 - #49 y
INFO  02:59:57,783 - #42 [
INFO  02:59:57,784 - #52 0
INFO  02:59:57,784 - #43 ]
INFO  02:59:57,784 - #38 ;
INFO  02:59:57,784 - #45 }
INFO  02:59:57,784 - #14 void
INFO  02:59:57,784 - #49 main
INFO  02:59:57,784 - #40 (
INFO  02:59:57,784 - #41 )
INFO  02:59:57,784 - #49 int
INFO  02:59:57,785 - #49 niz
INFO  02:59:57,785 - #42 [
INFO  02:59:57,785 - #43 ]
INFO  02:59:57,785 - #39 ,
INFO  02:59:57,785 - #49 p
INFO  02:59:57,785 - #38 ;
INFO  02:59:57,785 - #44 {
INFO  02:59:57,785 - #49 p
INFO  02:59:57,785 - #27 =
INFO  02:59:57,785 - #49 a
INFO  02:59:57,785 - #40 (
INFO  02:59:57,785 - #52 1
INFO  02:59:57,786 - #39 ,
INFO  02:59:57,786 - #52 8
INFO  02:59:57,786 - #41 )
INFO  02:59:57,786 - #38 ;
INFO  02:59:57,787 - #12 print
INFO  02:59:57,787 - #40 (
INFO  02:59:57,787 - #49 p
INFO  02:59:57,787 - #41 )
INFO  02:59:57,787 - #38 ;
INFO  02:59:57,787 - #45 }
INFO  02:59:57,787 - #45 }
INFO  02:59:57,795 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  02:59:57,795 - Line 6: Access to array element detected. Array name: y
INFO  02:59:57,795 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  02:59:57,795 - Line 10: Using local variable name: p
INFO  02:59:57,795 - Line 10: Method Call detected. Method name: a
INFO  02:59:57,796 - Method a has varArgs with 1 args
INFO  02:59:57,796 - Line 11: Using local variable name: p
INFO  03:00:37,639 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:00:37,659 - #2 program
INFO  03:00:37,659 - #49 MJProgram
INFO  03:00:37,659 - #49 int
INFO  03:00:37,659 - #49 x
INFO  03:00:37,659 - #38 ;
INFO  03:00:37,659 - #49 int
INFO  03:00:37,660 - #49 y
INFO  03:00:37,660 - #38 ;
INFO  03:00:37,660 - #44 {
INFO  03:00:37,660 - #49 int
INFO  03:00:37,660 - #49 a
INFO  03:00:37,660 - #40 (
INFO  03:00:37,660 - #49 int
INFO  03:00:37,660 - #49 x
INFO  03:00:37,660 - #39 ,
INFO  03:00:37,660 - #49 int
INFO  03:00:37,661 - #47 .
INFO  03:00:37,661 - #47 .
INFO  03:00:37,661 - #47 .
INFO  03:00:37,661 - #49 y
INFO  03:00:37,661 - #41 )
INFO  03:00:37,661 - #44 {
INFO  03:00:37,661 - #15 return
INFO  03:00:37,661 - #49 x
INFO  03:00:37,661 - #22 +
INFO  03:00:37,662 - #49 y
INFO  03:00:37,662 - #42 [
INFO  03:00:37,662 - #52 0
INFO  03:00:37,662 - #43 ]
INFO  03:00:37,662 - #38 ;
INFO  03:00:37,662 - #45 }
INFO  03:00:37,662 - #14 void
INFO  03:00:37,662 - #49 main
INFO  03:00:37,663 - #40 (
INFO  03:00:37,663 - #41 )
INFO  03:00:37,663 - #49 int
INFO  03:00:37,663 - #49 niz
INFO  03:00:37,663 - #42 [
INFO  03:00:37,663 - #43 ]
INFO  03:00:37,663 - #39 ,
INFO  03:00:37,663 - #49 p
INFO  03:00:37,663 - #38 ;
INFO  03:00:37,663 - #44 {
INFO  03:00:37,663 - #49 p
INFO  03:00:37,664 - #27 =
INFO  03:00:37,664 - #49 a
INFO  03:00:37,664 - #40 (
INFO  03:00:37,664 - #52 1
INFO  03:00:37,664 - #39 ,
INFO  03:00:37,664 - #52 8
INFO  03:00:37,664 - #41 )
INFO  03:00:37,664 - #38 ;
INFO  03:00:37,665 - #12 print
INFO  03:00:37,665 - #40 (
INFO  03:00:37,665 - #49 p
INFO  03:00:37,665 - #41 )
INFO  03:00:37,665 - #38 ;
INFO  03:00:37,665 - #45 }
INFO  03:00:37,665 - #45 }
INFO  03:00:37,668 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:00:37,669 - Line 6: Access to array element detected. Array name: y
INFO  03:00:37,669 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:00:37,669 - Line 10: Using local variable name: p
INFO  03:00:37,669 - Line 10: Method Call detected. Method name: a
INFO  03:00:37,669 - Method a has varArgs with 1 args
INFO  03:00:37,669 - Line 11: Using local variable name: p
INFO  03:00:37,670 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:04:05,862 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:04:05,881 - #2 program
INFO  03:04:05,881 - #49 MJProgram
INFO  03:04:05,882 - #49 int
INFO  03:04:05,882 - #49 x
INFO  03:04:05,882 - #38 ;
INFO  03:04:05,883 - #49 int
INFO  03:04:05,883 - #49 y
INFO  03:04:05,883 - #38 ;
INFO  03:04:05,883 - #44 {
INFO  03:04:05,883 - #49 int
INFO  03:04:05,883 - #49 a
INFO  03:04:05,883 - #40 (
INFO  03:04:05,883 - #49 int
INFO  03:04:05,883 - #49 x
INFO  03:04:05,883 - #39 ,
INFO  03:04:05,884 - #49 int
INFO  03:04:05,884 - #47 .
INFO  03:04:05,884 - #47 .
INFO  03:04:05,884 - #47 .
INFO  03:04:05,884 - #49 y
INFO  03:04:05,884 - #41 )
INFO  03:04:05,884 - #44 {
INFO  03:04:05,884 - #15 return
INFO  03:04:05,884 - #49 x
INFO  03:04:05,884 - #22 +
INFO  03:04:05,885 - #49 y
INFO  03:04:05,885 - #42 [
INFO  03:04:05,885 - #52 0
INFO  03:04:05,885 - #43 ]
INFO  03:04:05,885 - #38 ;
INFO  03:04:05,885 - #45 }
INFO  03:04:05,885 - #14 void
INFO  03:04:05,885 - #49 main
INFO  03:04:05,886 - #40 (
INFO  03:04:05,886 - #41 )
INFO  03:04:05,886 - #49 int
INFO  03:04:05,886 - #49 niz
INFO  03:04:05,886 - #42 [
INFO  03:04:05,886 - #43 ]
INFO  03:04:05,886 - #39 ,
INFO  03:04:05,886 - #49 p
INFO  03:04:05,886 - #38 ;
INFO  03:04:05,886 - #44 {
INFO  03:04:05,887 - #49 p
INFO  03:04:05,887 - #27 =
INFO  03:04:05,887 - #49 a
INFO  03:04:05,887 - #40 (
INFO  03:04:05,887 - #52 1
INFO  03:04:05,887 - #39 ,
INFO  03:04:05,888 - #52 8
INFO  03:04:05,888 - #41 )
INFO  03:04:05,888 - #38 ;
INFO  03:04:05,888 - #12 print
INFO  03:04:05,888 - #40 (
INFO  03:04:05,888 - #49 p
INFO  03:04:05,888 - #41 )
INFO  03:04:05,889 - #38 ;
INFO  03:04:05,889 - #45 }
INFO  03:04:05,889 - #45 }
INFO  03:04:05,892 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:04:05,892 - Line 6: Access to array element detected. Array name: y
INFO  03:04:05,892 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:04:05,892 - Line 10: Using local variable name: p
INFO  03:04:05,893 - Line 10: Method Call detected. Method name: a
INFO  03:04:05,893 - Method a has varArgs with 1 args
INFO  03:04:05,893 - Line 11: Using local variable name: p
INFO  03:04:05,894 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:04:47,355 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:04:47,373 - #2 program
INFO  03:04:47,373 - #49 MJProgram
INFO  03:04:47,373 - #49 int
INFO  03:04:47,373 - #49 x
INFO  03:04:47,373 - #38 ;
INFO  03:04:47,374 - #49 int
INFO  03:04:47,374 - #49 y
INFO  03:04:47,374 - #38 ;
INFO  03:04:47,374 - #44 {
INFO  03:04:47,374 - #49 int
INFO  03:04:47,374 - #49 a
INFO  03:04:47,374 - #40 (
INFO  03:04:47,374 - #49 int
INFO  03:04:47,375 - #49 x
INFO  03:04:47,375 - #39 ,
INFO  03:04:47,375 - #49 int
INFO  03:04:47,375 - #47 .
INFO  03:04:47,375 - #47 .
INFO  03:04:47,375 - #47 .
INFO  03:04:47,375 - #49 y
INFO  03:04:47,375 - #41 )
INFO  03:04:47,375 - #44 {
INFO  03:04:47,375 - #15 return
INFO  03:04:47,376 - #49 x
INFO  03:04:47,376 - #22 +
INFO  03:04:47,376 - #49 y
INFO  03:04:47,376 - #42 [
INFO  03:04:47,376 - #52 0
INFO  03:04:47,376 - #43 ]
INFO  03:04:47,376 - #38 ;
INFO  03:04:47,376 - #45 }
INFO  03:04:47,376 - #14 void
INFO  03:04:47,377 - #49 main
INFO  03:04:47,377 - #40 (
INFO  03:04:47,377 - #41 )
INFO  03:04:47,377 - #49 int
INFO  03:04:47,377 - #49 niz
INFO  03:04:47,377 - #42 [
INFO  03:04:47,377 - #43 ]
INFO  03:04:47,377 - #39 ,
INFO  03:04:47,377 - #49 p
INFO  03:04:47,377 - #38 ;
INFO  03:04:47,378 - #44 {
INFO  03:04:47,378 - #49 p
INFO  03:04:47,379 - #27 =
INFO  03:04:47,379 - #49 a
INFO  03:04:47,379 - #40 (
INFO  03:04:47,379 - #52 1
INFO  03:04:47,379 - #39 ,
INFO  03:04:47,379 - #52 8
INFO  03:04:47,379 - #41 )
INFO  03:04:47,379 - #38 ;
INFO  03:04:47,380 - #12 print
INFO  03:04:47,380 - #40 (
INFO  03:04:47,380 - #49 p
INFO  03:04:47,380 - #41 )
INFO  03:04:47,380 - #38 ;
INFO  03:04:47,380 - #45 }
INFO  03:04:47,380 - #45 }
INFO  03:04:47,383 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:04:47,383 - Line 6: Access to array element detected. Array name: y
INFO  03:04:47,383 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:04:47,383 - Line 10: Using local variable name: p
INFO  03:04:47,383 - Line 10: Method Call detected. Method name: a
INFO  03:04:47,383 - Method a has varArgs with 1 args
INFO  03:04:47,383 - Line 11: Using local variable name: p
INFO  03:04:47,384 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:10:30,459 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:10:30,478 - #2 program
INFO  03:10:30,478 - #49 MJProgram
INFO  03:10:30,478 - #49 int
INFO  03:10:30,478 - #49 x
INFO  03:10:30,478 - #38 ;
INFO  03:10:30,479 - #49 int
INFO  03:10:30,479 - #49 y
INFO  03:10:30,479 - #38 ;
INFO  03:10:30,479 - #44 {
INFO  03:10:30,479 - #49 int
INFO  03:10:30,479 - #49 a
INFO  03:10:30,479 - #40 (
INFO  03:10:30,480 - #49 int
INFO  03:10:30,480 - #49 x
INFO  03:10:30,480 - #39 ,
INFO  03:10:30,480 - #49 int
INFO  03:10:30,480 - #47 .
INFO  03:10:30,480 - #47 .
INFO  03:10:30,480 - #47 .
INFO  03:10:30,480 - #49 y
INFO  03:10:30,480 - #41 )
INFO  03:10:30,480 - #44 {
INFO  03:10:30,481 - #15 return
INFO  03:10:30,481 - #49 x
INFO  03:10:30,481 - #22 +
INFO  03:10:30,481 - #49 y
INFO  03:10:30,481 - #42 [
INFO  03:10:30,482 - #52 0
INFO  03:10:30,482 - #43 ]
INFO  03:10:30,482 - #38 ;
INFO  03:10:30,482 - #45 }
INFO  03:10:30,482 - #14 void
INFO  03:10:30,482 - #49 main
INFO  03:10:30,482 - #40 (
INFO  03:10:30,482 - #41 )
INFO  03:10:30,482 - #49 int
INFO  03:10:30,482 - #49 niz
INFO  03:10:30,482 - #42 [
INFO  03:10:30,482 - #43 ]
INFO  03:10:30,482 - #39 ,
INFO  03:10:30,483 - #49 p
INFO  03:10:30,483 - #38 ;
INFO  03:10:30,483 - #44 {
INFO  03:10:30,483 - #49 p
INFO  03:10:30,483 - #27 =
INFO  03:10:30,484 - #49 a
INFO  03:10:30,484 - #40 (
INFO  03:10:30,484 - #52 1
INFO  03:10:30,484 - #39 ,
INFO  03:10:30,484 - #52 8
INFO  03:10:30,484 - #41 )
INFO  03:10:30,484 - #38 ;
INFO  03:10:30,485 - #12 print
INFO  03:10:30,485 - #40 (
INFO  03:10:30,485 - #49 p
INFO  03:10:30,485 - #41 )
INFO  03:10:30,485 - #38 ;
INFO  03:10:30,485 - #45 }
INFO  03:10:30,485 - #45 }
INFO  03:10:30,489 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:10:30,489 - Line 6: Access to array element detected. Array name: y
INFO  03:10:30,489 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:10:30,489 - Line 10: Using local variable name: p
INFO  03:10:30,489 - Line 10: Method Call detected. Method name: a
INFO  03:10:30,489 - Method a has varArgs with 1 args
INFO  03:10:30,489 - Line 11: Using local variable name: p
INFO  03:10:30,490 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:10:56,440 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:10:56,459 - #2 program
INFO  03:10:56,459 - #49 MJProgram
INFO  03:10:56,459 - #49 int
INFO  03:10:56,460 - #49 x
INFO  03:10:56,460 - #38 ;
INFO  03:10:56,460 - #49 int
INFO  03:10:56,460 - #49 y
INFO  03:10:56,460 - #38 ;
INFO  03:10:56,460 - #44 {
INFO  03:10:56,460 - #49 int
INFO  03:10:56,461 - #49 a
INFO  03:10:56,461 - #40 (
INFO  03:10:56,461 - #49 int
INFO  03:10:56,461 - #49 x
INFO  03:10:56,461 - #39 ,
INFO  03:10:56,461 - #49 int
INFO  03:10:56,461 - #47 .
INFO  03:10:56,461 - #47 .
INFO  03:10:56,461 - #47 .
INFO  03:10:56,461 - #49 y
INFO  03:10:56,461 - #41 )
INFO  03:10:56,461 - #44 {
INFO  03:10:56,462 - #15 return
INFO  03:10:56,462 - #49 x
INFO  03:10:56,462 - #22 +
INFO  03:10:56,462 - #49 y
INFO  03:10:56,462 - #42 [
INFO  03:10:56,463 - #52 2
INFO  03:10:56,463 - #43 ]
INFO  03:10:56,463 - #38 ;
INFO  03:10:56,463 - #45 }
INFO  03:10:56,463 - #14 void
INFO  03:10:56,463 - #49 main
INFO  03:10:56,463 - #40 (
INFO  03:10:56,463 - #41 )
INFO  03:10:56,463 - #49 int
INFO  03:10:56,463 - #49 niz
INFO  03:10:56,463 - #42 [
INFO  03:10:56,463 - #43 ]
INFO  03:10:56,463 - #39 ,
INFO  03:10:56,464 - #49 p
INFO  03:10:56,464 - #38 ;
INFO  03:10:56,464 - #44 {
INFO  03:10:56,464 - #49 p
INFO  03:10:56,464 - #27 =
INFO  03:10:56,464 - #49 a
INFO  03:10:56,464 - #40 (
INFO  03:10:56,464 - #52 1
INFO  03:10:56,465 - #39 ,
INFO  03:10:56,465 - #52 8
INFO  03:10:56,465 - #39 ,
INFO  03:10:56,465 - #52 9
INFO  03:10:56,465 - #39 ,
INFO  03:10:56,465 - #52 10
INFO  03:10:56,465 - #41 )
INFO  03:10:56,465 - #38 ;
INFO  03:10:56,466 - #12 print
INFO  03:10:56,466 - #40 (
INFO  03:10:56,466 - #49 p
INFO  03:10:56,466 - #41 )
INFO  03:10:56,466 - #38 ;
INFO  03:10:56,466 - #45 }
INFO  03:10:56,466 - #45 }
INFO  03:10:56,470 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:10:56,470 - Line 6: Access to array element detected. Array name: y
INFO  03:10:56,470 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:10:56,470 - Line 10: Using local variable name: p
INFO  03:10:56,470 - Line 10: Method Call detected. Method name: a
INFO  03:10:56,470 - Method a has varArgs with 3 args
INFO  03:10:56,470 - Line 11: Using local variable name: p
INFO  03:10:56,471 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:11:09,574 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:11:09,592 - #2 program
INFO  03:11:09,592 - #49 MJProgram
INFO  03:11:09,592 - #49 int
INFO  03:11:09,593 - #49 x
INFO  03:11:09,593 - #38 ;
INFO  03:11:09,593 - #49 int
INFO  03:11:09,593 - #49 y
INFO  03:11:09,594 - #38 ;
INFO  03:11:09,594 - #44 {
INFO  03:11:09,594 - #49 int
INFO  03:11:09,594 - #49 a
INFO  03:11:09,594 - #40 (
INFO  03:11:09,594 - #49 int
INFO  03:11:09,594 - #49 x
INFO  03:11:09,594 - #39 ,
INFO  03:11:09,594 - #49 int
INFO  03:11:09,594 - #47 .
INFO  03:11:09,594 - #47 .
INFO  03:11:09,594 - #47 .
INFO  03:11:09,594 - #49 y
INFO  03:11:09,594 - #41 )
INFO  03:11:09,595 - #44 {
INFO  03:11:09,595 - #15 return
INFO  03:11:09,595 - #49 x
INFO  03:11:09,595 - #22 +
INFO  03:11:09,595 - #49 y
INFO  03:11:09,596 - #42 [
INFO  03:11:09,596 - #52 1
INFO  03:11:09,596 - #43 ]
INFO  03:11:09,596 - #38 ;
INFO  03:11:09,596 - #45 }
INFO  03:11:09,596 - #14 void
INFO  03:11:09,596 - #49 main
INFO  03:11:09,596 - #40 (
INFO  03:11:09,596 - #41 )
INFO  03:11:09,596 - #49 int
INFO  03:11:09,597 - #49 niz
INFO  03:11:09,597 - #42 [
INFO  03:11:09,597 - #43 ]
INFO  03:11:09,597 - #39 ,
INFO  03:11:09,597 - #49 p
INFO  03:11:09,597 - #38 ;
INFO  03:11:09,597 - #44 {
INFO  03:11:09,597 - #49 p
INFO  03:11:09,598 - #27 =
INFO  03:11:09,598 - #49 a
INFO  03:11:09,598 - #40 (
INFO  03:11:09,598 - #52 1
INFO  03:11:09,598 - #39 ,
INFO  03:11:09,598 - #52 8
INFO  03:11:09,598 - #39 ,
INFO  03:11:09,598 - #52 9
INFO  03:11:09,598 - #39 ,
INFO  03:11:09,598 - #52 10
INFO  03:11:09,598 - #41 )
INFO  03:11:09,598 - #38 ;
INFO  03:11:09,599 - #12 print
INFO  03:11:09,599 - #40 (
INFO  03:11:09,599 - #49 p
INFO  03:11:09,599 - #41 )
INFO  03:11:09,599 - #38 ;
INFO  03:11:09,599 - #45 }
INFO  03:11:09,599 - #45 }
INFO  03:11:09,603 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:11:09,603 - Line 6: Access to array element detected. Array name: y
INFO  03:11:09,603 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:11:09,603 - Line 10: Using local variable name: p
INFO  03:11:09,603 - Line 10: Method Call detected. Method name: a
INFO  03:11:09,603 - Method a has varArgs with 3 args
INFO  03:11:09,603 - Line 11: Using local variable name: p
INFO  03:11:09,604 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:11:25,770 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:11:25,789 - #2 program
INFO  03:11:25,789 - #49 MJProgram
INFO  03:11:25,789 - #49 int
INFO  03:11:25,789 - #49 x
INFO  03:11:25,789 - #38 ;
INFO  03:11:25,790 - #49 int
INFO  03:11:25,790 - #49 y
INFO  03:11:25,790 - #38 ;
INFO  03:11:25,790 - #44 {
INFO  03:11:25,790 - #49 int
INFO  03:11:25,790 - #49 a
INFO  03:11:25,790 - #40 (
INFO  03:11:25,791 - #49 int
INFO  03:11:25,791 - #49 x
INFO  03:11:25,791 - #39 ,
INFO  03:11:25,791 - #49 int
INFO  03:11:25,791 - #47 .
INFO  03:11:25,791 - #47 .
INFO  03:11:25,791 - #47 .
INFO  03:11:25,791 - #49 y
INFO  03:11:25,791 - #41 )
INFO  03:11:25,791 - #44 {
INFO  03:11:25,791 - #15 return
INFO  03:11:25,792 - #49 x
INFO  03:11:25,792 - #22 +
INFO  03:11:25,792 - #49 y
INFO  03:11:25,792 - #42 [
INFO  03:11:25,792 - #52 0
INFO  03:11:25,792 - #43 ]
INFO  03:11:25,792 - #38 ;
INFO  03:11:25,793 - #45 }
INFO  03:11:25,793 - #14 void
INFO  03:11:25,793 - #49 main
INFO  03:11:25,793 - #40 (
INFO  03:11:25,793 - #41 )
INFO  03:11:25,793 - #49 int
INFO  03:11:25,793 - #49 niz
INFO  03:11:25,793 - #42 [
INFO  03:11:25,793 - #43 ]
INFO  03:11:25,793 - #39 ,
INFO  03:11:25,793 - #49 p
INFO  03:11:25,793 - #38 ;
INFO  03:11:25,794 - #44 {
INFO  03:11:25,794 - #49 p
INFO  03:11:25,794 - #27 =
INFO  03:11:25,794 - #49 a
INFO  03:11:25,794 - #40 (
INFO  03:11:25,794 - #52 1
INFO  03:11:25,794 - #39 ,
INFO  03:11:25,794 - #52 8
INFO  03:11:25,794 - #39 ,
INFO  03:11:25,794 - #52 9
INFO  03:11:25,794 - #39 ,
INFO  03:11:25,794 - #52 10
INFO  03:11:25,795 - #41 )
INFO  03:11:25,795 - #38 ;
INFO  03:11:25,795 - #12 print
INFO  03:11:25,795 - #40 (
INFO  03:11:25,795 - #49 p
INFO  03:11:25,795 - #41 )
INFO  03:11:25,795 - #38 ;
INFO  03:11:25,795 - #45 }
INFO  03:11:25,795 - #45 }
INFO  03:11:25,799 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:11:25,799 - Line 6: Access to array element detected. Array name: y
INFO  03:11:25,799 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:11:25,799 - Line 10: Using local variable name: p
INFO  03:11:25,800 - Line 10: Method Call detected. Method name: a
INFO  03:11:25,800 - Method a has varArgs with 3 args
INFO  03:11:25,800 - Line 11: Using local variable name: p
INFO  03:11:25,801 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:14:53,724 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:14:53,742 - #2 program
INFO  03:14:53,742 - #49 MJProgram
INFO  03:14:53,743 - #49 int
INFO  03:14:53,743 - #49 x
INFO  03:14:53,743 - #38 ;
INFO  03:14:53,743 - #49 int
INFO  03:14:53,744 - #49 y
INFO  03:14:53,744 - #38 ;
INFO  03:14:53,744 - #44 {
INFO  03:14:53,744 - #49 int
INFO  03:14:53,744 - #49 a
INFO  03:14:53,744 - #40 (
INFO  03:14:53,744 - #49 int
INFO  03:14:53,744 - #49 x
INFO  03:14:53,744 - #39 ,
INFO  03:14:53,744 - #49 int
INFO  03:14:53,745 - #47 .
INFO  03:14:53,745 - #47 .
INFO  03:14:53,745 - #47 .
INFO  03:14:53,745 - #49 y
INFO  03:14:53,745 - #41 )
INFO  03:14:53,745 - #44 {
INFO  03:14:53,745 - #15 return
INFO  03:14:53,745 - #49 x
INFO  03:14:53,746 - #22 +
INFO  03:14:53,746 - #49 y
INFO  03:14:53,746 - #42 [
INFO  03:14:53,746 - #52 0
INFO  03:14:53,746 - #43 ]
INFO  03:14:53,746 - #38 ;
INFO  03:14:53,746 - #45 }
INFO  03:14:53,747 - #14 void
INFO  03:14:53,747 - #49 main
INFO  03:14:53,747 - #40 (
INFO  03:14:53,747 - #41 )
INFO  03:14:53,747 - #49 int
INFO  03:14:53,747 - #49 niz
INFO  03:14:53,747 - #42 [
INFO  03:14:53,747 - #43 ]
INFO  03:14:53,747 - #39 ,
INFO  03:14:53,748 - #49 p
INFO  03:14:53,748 - #38 ;
INFO  03:14:53,748 - #44 {
INFO  03:14:53,748 - #49 p
INFO  03:14:53,748 - #27 =
INFO  03:14:53,748 - #49 a
INFO  03:14:53,748 - #40 (
INFO  03:14:53,748 - #52 1
INFO  03:14:53,749 - #39 ,
INFO  03:14:53,749 - #52 8
INFO  03:14:53,749 - #39 ,
INFO  03:14:53,749 - #52 9
INFO  03:14:53,749 - #39 ,
INFO  03:14:53,749 - #52 10
INFO  03:14:53,749 - #41 )
INFO  03:14:53,749 - #38 ;
INFO  03:14:53,750 - #12 print
INFO  03:14:53,750 - #40 (
INFO  03:14:53,750 - #49 p
INFO  03:14:53,750 - #41 )
INFO  03:14:53,750 - #38 ;
INFO  03:14:53,750 - #45 }
INFO  03:14:53,750 - #45 }
INFO  03:14:53,754 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:14:53,754 - Line 6: Access to array element detected. Array name: y
INFO  03:14:53,754 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:14:53,754 - Line 10: Using local variable name: p
INFO  03:14:53,754 - Line 10: Method Call detected. Method name: a
INFO  03:14:53,754 - Method a has varArgs with 3 args
INFO  03:14:53,754 - Line 11: Using local variable name: p
INFO  03:14:53,756 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:15:09,993 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:15:10,012 - #2 program
INFO  03:15:10,012 - #49 MJProgram
INFO  03:15:10,012 - #49 int
INFO  03:15:10,012 - #49 x
INFO  03:15:10,012 - #38 ;
INFO  03:15:10,013 - #49 int
INFO  03:15:10,013 - #49 y
INFO  03:15:10,013 - #38 ;
INFO  03:15:10,013 - #44 {
INFO  03:15:10,013 - #49 int
INFO  03:15:10,013 - #49 a
INFO  03:15:10,013 - #40 (
INFO  03:15:10,013 - #49 int
INFO  03:15:10,013 - #49 x
INFO  03:15:10,013 - #39 ,
INFO  03:15:10,014 - #49 int
INFO  03:15:10,014 - #47 .
INFO  03:15:10,014 - #47 .
INFO  03:15:10,014 - #47 .
INFO  03:15:10,014 - #49 y
INFO  03:15:10,014 - #41 )
INFO  03:15:10,014 - #44 {
INFO  03:15:10,014 - #15 return
INFO  03:15:10,015 - #49 x
INFO  03:15:10,015 - #22 +
INFO  03:15:10,015 - #49 y
INFO  03:15:10,015 - #42 [
INFO  03:15:10,015 - #52 0
INFO  03:15:10,015 - #43 ]
INFO  03:15:10,015 - #38 ;
INFO  03:15:10,016 - #45 }
INFO  03:15:10,016 - #14 void
INFO  03:15:10,016 - #49 main
INFO  03:15:10,016 - #40 (
INFO  03:15:10,016 - #41 )
INFO  03:15:10,016 - #49 int
INFO  03:15:10,016 - #49 niz
INFO  03:15:10,016 - #42 [
INFO  03:15:10,016 - #43 ]
INFO  03:15:10,016 - #39 ,
INFO  03:15:10,017 - #49 p
INFO  03:15:10,017 - #38 ;
INFO  03:15:10,017 - #44 {
INFO  03:15:10,017 - #49 p
INFO  03:15:10,017 - #27 =
INFO  03:15:10,017 - #49 a
INFO  03:15:10,017 - #40 (
INFO  03:15:10,017 - #52 1
INFO  03:15:10,017 - #39 ,
INFO  03:15:10,017 - #52 8
INFO  03:15:10,018 - #39 ,
INFO  03:15:10,018 - #52 9
INFO  03:15:10,018 - #39 ,
INFO  03:15:10,018 - #52 10
INFO  03:15:10,018 - #41 )
INFO  03:15:10,018 - #38 ;
INFO  03:15:10,018 - #12 print
INFO  03:15:10,018 - #40 (
INFO  03:15:10,018 - #49 p
INFO  03:15:10,018 - #41 )
INFO  03:15:10,019 - #38 ;
INFO  03:15:10,019 - #45 }
INFO  03:15:10,019 - #45 }
INFO  03:15:10,022 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:15:10,023 - Line 6: Access to array element detected. Array name: y
INFO  03:15:10,023 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:15:10,023 - Line 10: Using local variable name: p
INFO  03:15:10,023 - Line 10: Method Call detected. Method name: a
INFO  03:15:10,023 - Method a has varArgs with 3 args
INFO  03:15:10,023 - Line 11: Using local variable name: p
INFO  03:15:10,024 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:15:25,032 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:15:25,051 - #2 program
INFO  03:15:25,051 - #49 MJProgram
INFO  03:15:25,051 - #49 int
INFO  03:15:25,051 - #49 x
INFO  03:15:25,052 - #38 ;
INFO  03:15:25,052 - #49 int
INFO  03:15:25,052 - #49 y
INFO  03:15:25,052 - #38 ;
INFO  03:15:25,052 - #44 {
INFO  03:15:25,052 - #49 int
INFO  03:15:25,053 - #49 a
INFO  03:15:25,053 - #40 (
INFO  03:15:25,053 - #49 int
INFO  03:15:25,053 - #49 x
INFO  03:15:25,053 - #39 ,
INFO  03:15:25,053 - #49 int
INFO  03:15:25,053 - #47 .
INFO  03:15:25,053 - #47 .
INFO  03:15:25,053 - #47 .
INFO  03:15:25,053 - #49 y
INFO  03:15:25,053 - #41 )
INFO  03:15:25,053 - #44 {
INFO  03:15:25,054 - #15 return
INFO  03:15:25,054 - #49 x
INFO  03:15:25,054 - #22 +
INFO  03:15:25,054 - #49 y
INFO  03:15:25,055 - #42 [
INFO  03:15:25,055 - #52 1
INFO  03:15:25,055 - #43 ]
INFO  03:15:25,055 - #38 ;
INFO  03:15:25,055 - #45 }
INFO  03:15:25,055 - #14 void
INFO  03:15:25,055 - #49 main
INFO  03:15:25,055 - #40 (
INFO  03:15:25,055 - #41 )
INFO  03:15:25,056 - #49 int
INFO  03:15:25,056 - #49 niz
INFO  03:15:25,056 - #42 [
INFO  03:15:25,056 - #43 ]
INFO  03:15:25,056 - #39 ,
INFO  03:15:25,056 - #49 p
INFO  03:15:25,056 - #38 ;
INFO  03:15:25,056 - #44 {
INFO  03:15:25,056 - #49 p
INFO  03:15:25,056 - #27 =
INFO  03:15:25,056 - #49 a
INFO  03:15:25,057 - #40 (
INFO  03:15:25,057 - #52 1
INFO  03:15:25,057 - #39 ,
INFO  03:15:25,057 - #52 8
INFO  03:15:25,057 - #39 ,
INFO  03:15:25,057 - #52 9
INFO  03:15:25,057 - #39 ,
INFO  03:15:25,057 - #52 10
INFO  03:15:25,057 - #41 )
INFO  03:15:25,057 - #38 ;
INFO  03:15:25,058 - #12 print
INFO  03:15:25,058 - #40 (
INFO  03:15:25,058 - #49 p
INFO  03:15:25,058 - #41 )
INFO  03:15:25,058 - #38 ;
INFO  03:15:25,058 - #45 }
INFO  03:15:25,058 - #45 }
INFO  03:15:25,062 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:15:25,062 - Line 6: Access to array element detected. Array name: y
INFO  03:15:25,062 - Line 6: Access to formal argument detected. Method name: a, argument name: y
INFO  03:15:25,062 - Line 10: Using local variable name: p
INFO  03:15:25,062 - Line 10: Method Call detected. Method name: a
INFO  03:15:25,062 - Method a has varArgs with 3 args
INFO  03:15:25,062 - Line 11: Using local variable name: p
INFO  03:15:25,064 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:16:12,514 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:16:12,532 - #2 program
INFO  03:16:12,532 - #49 MJProgram
INFO  03:16:12,532 - #49 int
INFO  03:16:12,532 - #49 x
INFO  03:16:12,532 - #38 ;
INFO  03:16:12,533 - #49 int
INFO  03:16:12,533 - #49 y
INFO  03:16:12,533 - #38 ;
INFO  03:16:12,533 - #44 {
INFO  03:16:12,533 - #49 int
INFO  03:16:12,533 - #49 a
INFO  03:16:12,533 - #40 (
INFO  03:16:12,533 - #49 int
INFO  03:16:12,533 - #49 x
INFO  03:16:12,533 - #39 ,
INFO  03:16:12,534 - #49 int
INFO  03:16:12,534 - #47 .
INFO  03:16:12,534 - #47 .
INFO  03:16:12,534 - #47 .
INFO  03:16:12,534 - #49 y
INFO  03:16:12,534 - #41 )
INFO  03:16:12,534 - #44 {
INFO  03:16:12,534 - #49 x
INFO  03:16:12,535 - #27 =
INFO  03:16:12,535 - #52 0
INFO  03:16:12,535 - #38 ;
INFO  03:16:12,535 - #9 do
INFO  03:16:12,535 - #44 {
INFO  03:16:12,535 - #12 print
INFO  03:16:12,535 - #40 (
INFO  03:16:12,535 - #49 y
INFO  03:16:12,535 - #42 [
INFO  03:16:12,535 - #49 x
INFO  03:16:12,536 - #43 ]
INFO  03:16:12,536 - #41 )
INFO  03:16:12,536 - #38 ;
INFO  03:16:12,536 - #12 print
INFO  03:16:12,536 - #40 (
INFO  03:16:12,536 - #49 eol
INFO  03:16:12,536 - #41 )
INFO  03:16:12,536 - #38 ;
INFO  03:16:12,536 - #49 x
INFO  03:16:12,536 - #36 ++
INFO  03:16:12,536 - #38 ;
INFO  03:16:12,536 - #45 }
INFO  03:16:12,536 - #10 while
INFO  03:16:12,536 - #40 (
INFO  03:16:12,537 - #49 x
INFO  03:16:12,537 - #32 <
INFO  03:16:12,537 - #52 3
INFO  03:16:12,537 - #41 )
INFO  03:16:12,537 - #38 ;
INFO  03:16:12,538 - #45 }
INFO  03:16:12,538 - #14 void
INFO  03:16:12,538 - #49 main
INFO  03:16:12,538 - #40 (
INFO  03:16:12,538 - #41 )
INFO  03:16:12,538 - #49 int
INFO  03:16:12,538 - #49 niz
INFO  03:16:12,538 - #42 [
INFO  03:16:12,538 - #43 ]
INFO  03:16:12,538 - #39 ,
INFO  03:16:12,539 - #49 p
INFO  03:16:12,539 - #38 ;
INFO  03:16:12,539 - #44 {
INFO  03:16:12,539 - #49 p
INFO  03:16:12,539 - #27 =
INFO  03:16:12,539 - #49 a
INFO  03:16:12,539 - #40 (
INFO  03:16:12,539 - #52 1
INFO  03:16:12,539 - #39 ,
INFO  03:16:12,539 - #52 8
INFO  03:16:12,539 - #39 ,
INFO  03:16:12,539 - #52 9
INFO  03:16:12,539 - #39 ,
INFO  03:16:12,539 - #52 10
INFO  03:16:12,539 - #41 )
INFO  03:16:12,540 - #38 ;
INFO  03:16:12,540 - #12 print
INFO  03:16:12,540 - #40 (
INFO  03:16:12,540 - #49 p
INFO  03:16:12,540 - #41 )
INFO  03:16:12,540 - #38 ;
INFO  03:16:12,540 - #45 }
INFO  03:16:12,540 - #45 }
INFO  03:16:12,544 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:12,544 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:12,544 - Line 8: Access to array element detected. Array name: y
INFO  03:16:12,544 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  03:16:12,544 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:12,544 - Line 11: Access to formal argument detected. Method name: a, argument name: x
ERROR 03:16:12,544 - Line 5: Missing return statement for method of type int
INFO  03:16:12,544 - Line 15: Using local variable name: p
INFO  03:16:12,544 - Line 15: Method Call detected. Method name: a
INFO  03:16:12,544 - Method a has varArgs with 3 args
INFO  03:16:12,544 - Line 16: Using local variable name: p
ERROR 03:16:12,544 - One or more semantic errors found! Compiling unsuccessful!
INFO  03:16:30,977 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:16:30,995 - #2 program
INFO  03:16:30,995 - #49 MJProgram
INFO  03:16:30,996 - #49 int
INFO  03:16:30,996 - #49 x
INFO  03:16:30,996 - #38 ;
INFO  03:16:30,996 - #49 int
INFO  03:16:30,997 - #49 y
INFO  03:16:30,997 - #38 ;
INFO  03:16:30,997 - #44 {
INFO  03:16:30,997 - #49 int
INFO  03:16:30,997 - #49 a
INFO  03:16:30,997 - #40 (
INFO  03:16:30,997 - #49 int
INFO  03:16:30,997 - #49 x
INFO  03:16:30,997 - #39 ,
INFO  03:16:30,997 - #49 int
INFO  03:16:30,998 - #47 .
INFO  03:16:30,998 - #47 .
INFO  03:16:30,998 - #47 .
INFO  03:16:30,998 - #49 y
INFO  03:16:30,998 - #41 )
INFO  03:16:30,998 - #44 {
INFO  03:16:30,998 - #49 x
INFO  03:16:30,998 - #27 =
INFO  03:16:30,998 - #52 0
INFO  03:16:30,998 - #38 ;
INFO  03:16:30,999 - #9 do
INFO  03:16:30,999 - #44 {
INFO  03:16:30,999 - #12 print
INFO  03:16:30,999 - #40 (
INFO  03:16:30,999 - #49 y
INFO  03:16:30,999 - #42 [
INFO  03:16:30,999 - #49 x
INFO  03:16:30,999 - #43 ]
INFO  03:16:30,999 - #41 )
INFO  03:16:30,999 - #38 ;
INFO  03:16:30,999 - #12 print
INFO  03:16:31,000 - #40 (
INFO  03:16:31,000 - #49 eol
INFO  03:16:31,000 - #41 )
INFO  03:16:31,000 - #38 ;
INFO  03:16:31,000 - #49 x
INFO  03:16:31,000 - #36 ++
INFO  03:16:31,000 - #38 ;
INFO  03:16:31,000 - #45 }
INFO  03:16:31,000 - #10 while
INFO  03:16:31,000 - #40 (
INFO  03:16:31,000 - #49 x
INFO  03:16:31,000 - #32 <
INFO  03:16:31,001 - #52 3
INFO  03:16:31,001 - #41 )
INFO  03:16:31,001 - #38 ;
INFO  03:16:31,001 - #15 return
INFO  03:16:31,001 - #52 0
INFO  03:16:31,001 - #38 ;
INFO  03:16:31,001 - #45 }
INFO  03:16:31,002 - #14 void
INFO  03:16:31,002 - #49 main
INFO  03:16:31,002 - #40 (
INFO  03:16:31,002 - #41 )
INFO  03:16:31,002 - #49 int
INFO  03:16:31,002 - #49 niz
INFO  03:16:31,002 - #42 [
INFO  03:16:31,002 - #43 ]
INFO  03:16:31,002 - #39 ,
INFO  03:16:31,003 - #49 p
INFO  03:16:31,003 - #38 ;
INFO  03:16:31,003 - #44 {
INFO  03:16:31,003 - #49 p
INFO  03:16:31,003 - #27 =
INFO  03:16:31,003 - #49 a
INFO  03:16:31,003 - #40 (
INFO  03:16:31,003 - #52 1
INFO  03:16:31,003 - #39 ,
INFO  03:16:31,003 - #52 8
INFO  03:16:31,003 - #39 ,
INFO  03:16:31,003 - #52 9
INFO  03:16:31,003 - #39 ,
INFO  03:16:31,003 - #52 10
INFO  03:16:31,003 - #41 )
INFO  03:16:31,003 - #38 ;
INFO  03:16:31,004 - #12 print
INFO  03:16:31,004 - #40 (
INFO  03:16:31,004 - #49 eol
INFO  03:16:31,004 - #41 )
INFO  03:16:31,004 - #38 ;
INFO  03:16:31,004 - #12 print
INFO  03:16:31,004 - #40 (
INFO  03:16:31,004 - #49 p
INFO  03:16:31,004 - #41 )
INFO  03:16:31,004 - #38 ;
INFO  03:16:31,004 - #45 }
INFO  03:16:31,004 - #45 }
INFO  03:16:31,008 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:31,008 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:31,008 - Line 8: Access to array element detected. Array name: y
INFO  03:16:31,008 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  03:16:31,008 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:31,008 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  03:16:31,008 - Line 17: Using local variable name: p
INFO  03:16:31,008 - Line 17: Method Call detected. Method name: a
INFO  03:16:31,008 - Method a has varArgs with 3 args
INFO  03:16:31,008 - Line 19: Using local variable name: p
INFO  03:16:31,010 - ---------------------------
Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:17:38,147 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:17:38,166 - #2 program
INFO  03:17:38,166 - #49 test301
INFO  03:17:38,166 - #7 const
INFO  03:17:38,166 - #49 int
INFO  03:17:38,166 - #49 nula
INFO  03:17:38,166 - #27 =
INFO  03:17:38,166 - #52 0
INFO  03:17:38,166 - #38 ;
INFO  03:17:38,167 - #7 const
INFO  03:17:38,167 - #49 int
INFO  03:17:38,167 - #49 jedan
INFO  03:17:38,167 - #27 =
INFO  03:17:38,167 - #52 1
INFO  03:17:38,167 - #38 ;
INFO  03:17:38,167 - #7 const
INFO  03:17:38,167 - #49 int
INFO  03:17:38,167 - #49 pet
INFO  03:17:38,167 - #27 =
INFO  03:17:38,167 - #52 5
INFO  03:17:38,167 - #38 ;
INFO  03:17:38,167 - #49 int
INFO  03:17:38,167 - #49 niz
INFO  03:17:38,167 - #42 [
INFO  03:17:38,167 - #43 ]
INFO  03:17:38,167 - #38 ;
INFO  03:17:38,168 - #49 char
INFO  03:17:38,168 - #49 nizch
INFO  03:17:38,168 - #42 [
INFO  03:17:38,168 - #43 ]
INFO  03:17:38,168 - #38 ;
INFO  03:17:38,168 - #44 {
INFO  03:17:38,168 - #14 void
INFO  03:17:38,168 - #49 main
INFO  03:17:38,169 - #40 (
INFO  03:17:38,169 - #41 )
INFO  03:17:38,169 - #49 int
INFO  03:17:38,169 - #49 bodovi
INFO  03:17:38,169 - #38 ;
INFO  03:17:38,170 - #49 bool
INFO  03:17:38,170 - #49 bt
INFO  03:17:38,170 - #38 ;
INFO  03:17:38,170 - #44 {
INFO  03:17:38,170 - #49 bodovi
INFO  03:17:38,170 - #27 =
INFO  03:17:38,170 - #52 0
INFO  03:17:38,170 - #38 ;
INFO  03:17:38,170 - #49 bodovi
INFO  03:17:38,171 - #36 ++
INFO  03:17:38,171 - #38 ;
INFO  03:17:38,171 - #49 bodovi
INFO  03:17:38,171 - #27 =
INFO  03:17:38,171 - #49 bodovi
INFO  03:17:38,171 - #22 +
INFO  03:17:38,171 - #49 jedan
INFO  03:17:38,171 - #38 ;
INFO  03:17:38,171 - #49 bodovi
INFO  03:17:38,171 - #27 =
INFO  03:17:38,171 - #49 bodovi
INFO  03:17:38,171 - #24 *
INFO  03:17:38,171 - #49 pet
INFO  03:17:38,172 - #38 ;
INFO  03:17:38,172 - #49 bodovi
INFO  03:17:38,172 - #37 --
INFO  03:17:38,172 - #38 ;
INFO  03:17:38,172 - #12 print
INFO  03:17:38,172 - #40 (
INFO  03:17:38,172 - #49 bodovi
INFO  03:17:38,172 - #41 )
INFO  03:17:38,172 - #38 ;
INFO  03:17:38,172 - #49 niz
INFO  03:17:38,172 - #27 =
INFO  03:17:38,172 - #11 new
INFO  03:17:38,172 - #49 int
INFO  03:17:38,172 - #42 [
INFO  03:17:38,172 - #52 3
INFO  03:17:38,172 - #43 ]
INFO  03:17:38,172 - #38 ;
INFO  03:17:38,173 - #49 niz
INFO  03:17:38,173 - #42 [
INFO  03:17:38,173 - #49 nula
INFO  03:17:38,173 - #43 ]
INFO  03:17:38,173 - #27 =
INFO  03:17:38,173 - #49 jedan
INFO  03:17:38,173 - #38 ;
INFO  03:17:38,173 - #49 niz
INFO  03:17:38,173 - #42 [
INFO  03:17:38,173 - #52 1
INFO  03:17:38,173 - #43 ]
INFO  03:17:38,173 - #27 =
INFO  03:17:38,173 - #52 2
INFO  03:17:38,173 - #38 ;
INFO  03:17:38,173 - #49 niz
INFO  03:17:38,173 - #42 [
INFO  03:17:38,173 - #49 niz
INFO  03:17:38,173 - #42 [
INFO  03:17:38,173 - #49 jedan
INFO  03:17:38,173 - #43 ]
INFO  03:17:38,174 - #43 ]
INFO  03:17:38,174 - #27 =
INFO  03:17:38,174 - #49 niz
INFO  03:17:38,174 - #42 [
INFO  03:17:38,174 - #49 niz
INFO  03:17:38,174 - #42 [
INFO  03:17:38,174 - #52 0
INFO  03:17:38,174 - #43 ]
INFO  03:17:38,174 - #43 ]
INFO  03:17:38,174 - #24 *
INFO  03:17:38,174 - #52 3
INFO  03:17:38,174 - #38 ;
INFO  03:17:38,174 - #49 bodovi
INFO  03:17:38,174 - #27 =
INFO  03:17:38,174 - #49 niz
INFO  03:17:38,174 - #42 [
INFO  03:17:38,174 - #52 2
INFO  03:17:38,174 - #43 ]
INFO  03:17:38,174 - #25 /
INFO  03:17:38,174 - #49 niz
INFO  03:17:38,174 - #42 [
INFO  03:17:38,175 - #52 0
INFO  03:17:38,175 - #43 ]
INFO  03:17:38,175 - #38 ;
INFO  03:17:38,175 - #12 print
INFO  03:17:38,175 - #40 (
INFO  03:17:38,175 - #49 bodovi
INFO  03:17:38,175 - #41 )
INFO  03:17:38,175 - #38 ;
INFO  03:17:38,175 - #12 print
INFO  03:17:38,175 - #40 (
INFO  03:17:38,175 - #49 niz
INFO  03:17:38,175 - #42 [
INFO  03:17:38,175 - #52 2
INFO  03:17:38,175 - #43 ]
INFO  03:17:38,175 - #41 )
INFO  03:17:38,175 - #38 ;
INFO  03:17:38,175 - #49 nizch
INFO  03:17:38,175 - #27 =
INFO  03:17:38,175 - #11 new
INFO  03:17:38,175 - #49 char
INFO  03:17:38,175 - #42 [
INFO  03:17:38,175 - #52 3
INFO  03:17:38,175 - #43 ]
INFO  03:17:38,175 - #38 ;
INFO  03:17:38,175 - #49 nizch
INFO  03:17:38,175 - #42 [
INFO  03:17:38,175 - #52 0
INFO  03:17:38,175 - #43 ]
INFO  03:17:38,175 - #27 =
INFO  03:17:38,175 - #51 a
INFO  03:17:38,175 - #38 ;
INFO  03:17:38,175 - #49 nizch
INFO  03:17:38,175 - #42 [
INFO  03:17:38,175 - #49 jedan
INFO  03:17:38,175 - #43 ]
INFO  03:17:38,175 - #27 =
INFO  03:17:38,176 - #51 b
INFO  03:17:38,176 - #38 ;
INFO  03:17:38,176 - #49 nizch
INFO  03:17:38,176 - #42 [
INFO  03:17:38,176 - #49 pet
INFO  03:17:38,176 - #23 -
INFO  03:17:38,176 - #52 3
INFO  03:17:38,176 - #43 ]
INFO  03:17:38,176 - #27 =
INFO  03:17:38,176 - #51 c
INFO  03:17:38,176 - #38 ;
INFO  03:17:38,176 - #12 print
INFO  03:17:38,176 - #40 (
INFO  03:17:38,176 - #49 nizch
INFO  03:17:38,176 - #42 [
INFO  03:17:38,176 - #52 1
INFO  03:17:38,176 - #43 ]
INFO  03:17:38,176 - #41 )
INFO  03:17:38,176 - #38 ;
INFO  03:17:38,176 - #12 print
INFO  03:17:38,176 - #40 (
INFO  03:17:38,176 - #49 nizch
INFO  03:17:38,176 - #42 [
INFO  03:17:38,176 - #49 jedan
INFO  03:17:38,176 - #24 *
INFO  03:17:38,176 - #52 2
INFO  03:17:38,176 - #43 ]
INFO  03:17:38,176 - #41 )
INFO  03:17:38,176 - #38 ;
INFO  03:17:38,176 - #49 bodovi
INFO  03:17:38,176 - #27 =
INFO  03:17:38,176 - #49 bodovi
INFO  03:17:38,176 - #22 +
INFO  03:17:38,176 - #40 (
INFO  03:17:38,176 - #49 pet
INFO  03:17:38,176 - #24 *
INFO  03:17:38,176 - #49 jedan
INFO  03:17:38,176 - #23 -
INFO  03:17:38,177 - #52 1
INFO  03:17:38,177 - #41 )
INFO  03:17:38,177 - #24 *
INFO  03:17:38,177 - #49 bodovi
INFO  03:17:38,177 - #23 -
INFO  03:17:38,177 - #40 (
INFO  03:17:38,177 - #52 3
INFO  03:17:38,177 - #26 %
INFO  03:17:38,177 - #52 2
INFO  03:17:38,177 - #22 +
INFO  03:17:38,177 - #52 3
INFO  03:17:38,177 - #24 *
INFO  03:17:38,177 - #52 2
INFO  03:17:38,177 - #23 -
INFO  03:17:38,177 - #52 3
INFO  03:17:38,177 - #41 )
INFO  03:17:38,177 - #38 ;
INFO  03:17:38,177 - #12 print
INFO  03:17:38,177 - #40 (
INFO  03:17:38,177 - #49 bodovi
INFO  03:17:38,177 - #41 )
INFO  03:17:38,177 - #38 ;
INFO  03:17:38,177 - #13 read
INFO  03:17:38,177 - #40 (
INFO  03:17:38,177 - #49 bodovi
INFO  03:17:38,177 - #41 )
INFO  03:17:38,177 - #38 ;
INFO  03:17:38,177 - #12 print
INFO  03:17:38,177 - #40 (
INFO  03:17:38,177 - #49 bodovi
INFO  03:17:38,177 - #41 )
INFO  03:17:38,177 - #38 ;
INFO  03:17:38,177 - #45 }
INFO  03:17:38,178 - #45 }
INFO  03:17:38,182 - Line 17: Using local variable name: bodovi
INFO  03:17:38,182 - Line 18: Using local variable name: bodovi
INFO  03:17:38,182 - Line 19: Using local variable name: bodovi
INFO  03:17:38,182 - Line 19: Using local variable name: bodovi
INFO  03:17:38,182 - Line 20: Using local variable name: bodovi
INFO  03:17:38,182 - Line 20: Using local variable name: bodovi
INFO  03:17:38,182 - Line 21: Using local variable name: bodovi
INFO  03:17:38,182 - Line 22: Using local variable name: bodovi
INFO  03:17:38,182 - Line 25: Using global variable name: niz
INFO  03:17:38,182 - Line 26: Using global variable name: niz
INFO  03:17:38,182 - Line 26: Access to array element detected. Array name: niz
INFO  03:17:38,182 - Line 27: Using global variable name: niz
INFO  03:17:38,182 - Line 27: Access to array element detected. Array name: niz
INFO  03:17:38,182 - Line 28: Using global variable name: niz
INFO  03:17:38,182 - Line 28: Access to array element detected. Array name: niz
INFO  03:17:38,182 - Line 28: Using global variable name: niz
INFO  03:17:38,183 - Line 28: Access to array element detected. Array name: niz
INFO  03:17:38,183 - Line 28: Using global variable name: niz
INFO  03:17:38,183 - Line 28: Access to array element detected. Array name: niz
INFO  03:17:38,183 - Line 28: Using global variable name: niz
INFO  03:17:38,183 - Line 28: Access to array element detected. Array name: niz
INFO  03:17:38,183 - Line 29: Using local variable name: bodovi
INFO  03:17:38,183 - Line 29: Using global variable name: niz
INFO  03:17:38,183 - Line 29: Access to array element detected. Array name: niz
INFO  03:17:38,183 - Line 29: Using global variable name: niz
INFO  03:17:38,183 - Line 29: Access to array element detected. Array name: niz
INFO  03:17:38,183 - Line 30: Using local variable name: bodovi
INFO  03:17:38,183 - Line 31: Using global variable name: niz
INFO  03:17:38,183 - Line 31: Access to array element detected. Array name: niz
INFO  03:17:38,183 - Line 34: Using global variable name: nizch
ERROR 03:17:38,183 - Line 34: Invalid assignment. Types are incompatible.
INFO  03:17:38,183 - Line 35: Using global variable name: nizch
INFO  03:17:38,183 - Line 35: Access to array element detected. Array name: nizch
INFO  03:17:38,183 - Line 36: Using global variable name: nizch
INFO  03:17:38,183 - Line 36: Access to array element detected. Array name: nizch
INFO  03:17:38,183 - Line 37: Using global variable name: nizch
INFO  03:17:38,183 - Line 37: Access to array element detected. Array name: nizch
INFO  03:17:38,183 - Line 38: Using global variable name: nizch
INFO  03:17:38,183 - Line 38: Access to array element detected. Array name: nizch
INFO  03:17:38,183 - Line 39: Using global variable name: nizch
INFO  03:17:38,183 - Line 39: Access to array element detected. Array name: nizch
INFO  03:17:38,183 - Line 42: Using local variable name: bodovi
INFO  03:17:38,183 - Line 42: Using local variable name: bodovi
INFO  03:17:38,183 - Line 42: Using local variable name: bodovi
INFO  03:17:38,183 - Line 43: Using local variable name: bodovi
INFO  03:17:38,183 - Line 45: Using local variable name: bodovi
INFO  03:17:38,183 - Line 46: Using local variable name: bodovi
ERROR 03:17:38,183 - One or more semantic errors found! Compiling unsuccessful!
INFO  03:19:11,642 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:19:11,660 - #2 program
INFO  03:19:11,660 - #49 test301
INFO  03:19:11,660 - #7 const
INFO  03:19:11,661 - #49 int
INFO  03:19:11,661 - #49 nula
INFO  03:19:11,661 - #27 =
INFO  03:19:11,661 - #52 0
INFO  03:19:11,661 - #38 ;
INFO  03:19:11,661 - #7 const
INFO  03:19:11,661 - #49 int
INFO  03:19:11,662 - #49 jedan
INFO  03:19:11,662 - #27 =
INFO  03:19:11,662 - #52 1
INFO  03:19:11,662 - #38 ;
INFO  03:19:11,662 - #7 const
INFO  03:19:11,662 - #49 int
INFO  03:19:11,662 - #49 pet
INFO  03:19:11,662 - #27 =
INFO  03:19:11,662 - #52 5
INFO  03:19:11,662 - #38 ;
INFO  03:19:11,662 - #49 int
INFO  03:19:11,662 - #49 niz
INFO  03:19:11,662 - #42 [
INFO  03:19:11,662 - #43 ]
INFO  03:19:11,662 - #38 ;
INFO  03:19:11,662 - #49 char
INFO  03:19:11,663 - #49 nizch
INFO  03:19:11,663 - #42 [
INFO  03:19:11,663 - #43 ]
INFO  03:19:11,663 - #38 ;
INFO  03:19:11,663 - #44 {
INFO  03:19:11,663 - #14 void
INFO  03:19:11,663 - #49 main
INFO  03:19:11,663 - #40 (
INFO  03:19:11,663 - #41 )
INFO  03:19:11,663 - #49 int
INFO  03:19:11,664 - #49 bodovi
INFO  03:19:11,664 - #38 ;
INFO  03:19:11,664 - #49 bool
INFO  03:19:11,664 - #49 bt
INFO  03:19:11,664 - #38 ;
INFO  03:19:11,664 - #44 {
INFO  03:19:11,664 - #49 bodovi
INFO  03:19:11,664 - #27 =
INFO  03:19:11,665 - #52 0
INFO  03:19:11,665 - #38 ;
INFO  03:19:11,665 - #49 bodovi
INFO  03:19:11,665 - #36 ++
INFO  03:19:11,665 - #38 ;
INFO  03:19:11,665 - #49 bodovi
INFO  03:19:11,665 - #27 =
INFO  03:19:11,665 - #49 bodovi
INFO  03:19:11,665 - #22 +
INFO  03:19:11,665 - #49 jedan
INFO  03:19:11,666 - #38 ;
INFO  03:19:11,666 - #49 bodovi
INFO  03:19:11,666 - #27 =
INFO  03:19:11,666 - #49 bodovi
INFO  03:19:11,666 - #24 *
INFO  03:19:11,666 - #49 pet
INFO  03:19:11,666 - #38 ;
INFO  03:19:11,666 - #49 bodovi
INFO  03:19:11,666 - #37 --
INFO  03:19:11,666 - #38 ;
INFO  03:19:11,666 - #12 print
INFO  03:19:11,666 - #40 (
INFO  03:19:11,666 - #49 bodovi
INFO  03:19:11,666 - #41 )
INFO  03:19:11,667 - #38 ;
INFO  03:19:11,667 - #49 niz
INFO  03:19:11,667 - #27 =
INFO  03:19:11,667 - #11 new
INFO  03:19:11,667 - #49 int
INFO  03:19:11,667 - #42 [
INFO  03:19:11,667 - #52 3
INFO  03:19:11,667 - #43 ]
INFO  03:19:11,667 - #38 ;
INFO  03:19:11,667 - #49 niz
INFO  03:19:11,667 - #42 [
INFO  03:19:11,667 - #49 nula
INFO  03:19:11,667 - #43 ]
INFO  03:19:11,667 - #27 =
INFO  03:19:11,668 - #49 jedan
INFO  03:19:11,668 - #38 ;
INFO  03:19:11,668 - #49 niz
INFO  03:19:11,668 - #42 [
INFO  03:19:11,668 - #52 1
INFO  03:19:11,668 - #43 ]
INFO  03:19:11,668 - #27 =
INFO  03:19:11,668 - #52 2
INFO  03:19:11,668 - #38 ;
INFO  03:19:11,668 - #49 niz
INFO  03:19:11,668 - #42 [
INFO  03:19:11,668 - #49 niz
INFO  03:19:11,668 - #42 [
INFO  03:19:11,668 - #49 jedan
INFO  03:19:11,668 - #43 ]
INFO  03:19:11,668 - #43 ]
INFO  03:19:11,668 - #27 =
INFO  03:19:11,668 - #49 niz
INFO  03:19:11,668 - #42 [
INFO  03:19:11,668 - #49 niz
INFO  03:19:11,668 - #42 [
INFO  03:19:11,668 - #52 0
INFO  03:19:11,668 - #43 ]
INFO  03:19:11,668 - #43 ]
INFO  03:19:11,668 - #24 *
INFO  03:19:11,668 - #52 3
INFO  03:19:11,668 - #38 ;
INFO  03:19:11,668 - #49 bodovi
INFO  03:19:11,668 - #27 =
INFO  03:19:11,668 - #49 niz
INFO  03:19:11,669 - #42 [
INFO  03:19:11,669 - #52 2
INFO  03:19:11,669 - #43 ]
INFO  03:19:11,669 - #25 /
INFO  03:19:11,669 - #49 niz
INFO  03:19:11,669 - #42 [
INFO  03:19:11,669 - #52 0
INFO  03:19:11,669 - #43 ]
INFO  03:19:11,669 - #38 ;
INFO  03:19:11,669 - #12 print
INFO  03:19:11,669 - #40 (
INFO  03:19:11,669 - #49 bodovi
INFO  03:19:11,669 - #41 )
INFO  03:19:11,669 - #38 ;
INFO  03:19:11,669 - #12 print
INFO  03:19:11,669 - #40 (
INFO  03:19:11,669 - #49 niz
INFO  03:19:11,669 - #42 [
INFO  03:19:11,669 - #52 2
INFO  03:19:11,669 - #43 ]
INFO  03:19:11,669 - #41 )
INFO  03:19:11,670 - #38 ;
INFO  03:19:11,670 - #49 nizch
INFO  03:19:11,670 - #27 =
INFO  03:19:11,670 - #11 new
INFO  03:19:11,670 - #49 char
INFO  03:19:11,670 - #42 [
INFO  03:19:11,670 - #52 3
INFO  03:19:11,670 - #43 ]
INFO  03:19:11,670 - #38 ;
INFO  03:19:11,670 - #49 nizch
INFO  03:19:11,670 - #42 [
INFO  03:19:11,670 - #52 0
INFO  03:19:11,670 - #43 ]
INFO  03:19:11,670 - #27 =
INFO  03:19:11,670 - #51 a
INFO  03:19:11,670 - #38 ;
INFO  03:19:11,670 - #49 nizch
INFO  03:19:11,670 - #42 [
INFO  03:19:11,670 - #49 jedan
INFO  03:19:11,670 - #43 ]
INFO  03:19:11,670 - #27 =
INFO  03:19:11,670 - #51 b
INFO  03:19:11,670 - #38 ;
INFO  03:19:11,670 - #49 nizch
INFO  03:19:11,670 - #42 [
INFO  03:19:11,670 - #49 pet
INFO  03:19:11,670 - #23 -
INFO  03:19:11,670 - #52 3
INFO  03:19:11,670 - #43 ]
INFO  03:19:11,670 - #27 =
INFO  03:19:11,670 - #51 c
INFO  03:19:11,670 - #38 ;
INFO  03:19:11,670 - #12 print
INFO  03:19:11,670 - #40 (
INFO  03:19:11,670 - #49 nizch
INFO  03:19:11,670 - #42 [
INFO  03:19:11,671 - #52 1
INFO  03:19:11,671 - #43 ]
INFO  03:19:11,671 - #41 )
INFO  03:19:11,671 - #38 ;
INFO  03:19:11,671 - #12 print
INFO  03:19:11,671 - #40 (
INFO  03:19:11,671 - #49 nizch
INFO  03:19:11,671 - #42 [
INFO  03:19:11,671 - #49 jedan
INFO  03:19:11,671 - #24 *
INFO  03:19:11,671 - #52 2
INFO  03:19:11,671 - #43 ]
INFO  03:19:11,671 - #41 )
INFO  03:19:11,671 - #38 ;
INFO  03:19:11,671 - #49 bodovi
INFO  03:19:11,671 - #27 =
INFO  03:19:11,671 - #49 bodovi
INFO  03:19:11,671 - #22 +
INFO  03:19:11,671 - #40 (
INFO  03:19:11,671 - #49 pet
INFO  03:19:11,671 - #24 *
INFO  03:19:11,671 - #49 jedan
INFO  03:19:11,671 - #23 -
INFO  03:19:11,671 - #52 1
INFO  03:19:11,671 - #41 )
INFO  03:19:11,671 - #24 *
INFO  03:19:11,671 - #49 bodovi
INFO  03:19:11,671 - #23 -
INFO  03:19:11,671 - #40 (
INFO  03:19:11,671 - #52 3
INFO  03:19:11,671 - #26 %
INFO  03:19:11,671 - #52 2
INFO  03:19:11,672 - #22 +
INFO  03:19:11,672 - #52 3
INFO  03:19:11,672 - #24 *
INFO  03:19:11,672 - #52 2
INFO  03:19:11,672 - #23 -
INFO  03:19:11,672 - #52 3
INFO  03:19:11,672 - #41 )
INFO  03:19:11,672 - #38 ;
INFO  03:19:11,672 - #12 print
INFO  03:19:11,672 - #40 (
INFO  03:19:11,672 - #49 bodovi
INFO  03:19:11,672 - #41 )
INFO  03:19:11,672 - #38 ;
INFO  03:19:11,672 - #13 read
INFO  03:19:11,672 - #40 (
INFO  03:19:11,672 - #49 bodovi
INFO  03:19:11,672 - #41 )
INFO  03:19:11,672 - #38 ;
INFO  03:19:11,672 - #12 print
INFO  03:19:11,672 - #40 (
INFO  03:19:11,672 - #49 bodovi
INFO  03:19:11,672 - #41 )
INFO  03:19:11,672 - #38 ;
INFO  03:19:11,672 - #45 }
INFO  03:19:11,672 - #45 }
INFO  03:19:11,676 - Line 17: Using local variable name: bodovi
INFO  03:19:11,676 - Line 18: Using local variable name: bodovi
INFO  03:19:11,676 - Line 19: Using local variable name: bodovi
INFO  03:19:11,676 - Line 19: Using local variable name: bodovi
INFO  03:19:11,676 - Line 20: Using local variable name: bodovi
INFO  03:19:11,676 - Line 20: Using local variable name: bodovi
INFO  03:19:11,676 - Line 21: Using local variable name: bodovi
INFO  03:19:11,676 - Line 22: Using local variable name: bodovi
INFO  03:19:11,676 - Line 25: Using global variable name: niz
INFO  03:19:11,676 - Line 26: Using global variable name: niz
INFO  03:19:11,676 - Line 26: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 27: Using global variable name: niz
INFO  03:19:11,676 - Line 27: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 28: Using global variable name: niz
INFO  03:19:11,676 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 28: Using global variable name: niz
INFO  03:19:11,676 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 28: Using global variable name: niz
INFO  03:19:11,676 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 28: Using global variable name: niz
INFO  03:19:11,676 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 29: Using local variable name: bodovi
INFO  03:19:11,676 - Line 29: Using global variable name: niz
INFO  03:19:11,676 - Line 29: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 29: Using global variable name: niz
INFO  03:19:11,676 - Line 29: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 30: Using local variable name: bodovi
INFO  03:19:11,676 - Line 31: Using global variable name: niz
INFO  03:19:11,676 - Line 31: Access to array element detected. Array name: niz
INFO  03:19:11,676 - Line 34: Using global variable name: nizch
ERROR 03:19:11,676 - Line 34: Invalid assignment. Types are incompatible.
INFO  03:19:11,676 - Line 35: Using global variable name: nizch
INFO  03:19:11,677 - Line 35: Access to array element detected. Array name: nizch
INFO  03:19:11,677 - Line 36: Using global variable name: nizch
INFO  03:19:11,677 - Line 36: Access to array element detected. Array name: nizch
INFO  03:19:11,677 - Line 37: Using global variable name: nizch
INFO  03:19:11,677 - Line 37: Access to array element detected. Array name: nizch
INFO  03:19:11,677 - Line 38: Using global variable name: nizch
INFO  03:19:11,677 - Line 38: Access to array element detected. Array name: nizch
INFO  03:19:11,677 - Line 39: Using global variable name: nizch
INFO  03:19:11,677 - Line 39: Access to array element detected. Array name: nizch
INFO  03:19:11,677 - Line 42: Using local variable name: bodovi
INFO  03:19:11,677 - Line 42: Using local variable name: bodovi
INFO  03:19:11,677 - Line 42: Using local variable name: bodovi
INFO  03:19:11,677 - Line 43: Using local variable name: bodovi
INFO  03:19:11,677 - Line 45: Using local variable name: bodovi
INFO  03:19:11,677 - Line 46: Using local variable name: bodovi
ERROR 03:19:11,677 - One or more semantic errors found! Compiling unsuccessful!
INFO  03:19:43,022 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:19:43,041 - #2 program
INFO  03:19:43,041 - #49 test301
INFO  03:19:43,041 - #7 const
INFO  03:19:43,042 - #49 int
INFO  03:19:43,042 - #49 nula
INFO  03:19:43,042 - #27 =
INFO  03:19:43,042 - #52 0
INFO  03:19:43,042 - #38 ;
INFO  03:19:43,042 - #7 const
INFO  03:19:43,042 - #49 int
INFO  03:19:43,042 - #49 jedan
INFO  03:19:43,042 - #27 =
INFO  03:19:43,043 - #52 1
INFO  03:19:43,043 - #38 ;
INFO  03:19:43,043 - #7 const
INFO  03:19:43,043 - #49 int
INFO  03:19:43,043 - #49 pet
INFO  03:19:43,043 - #27 =
INFO  03:19:43,043 - #52 5
INFO  03:19:43,043 - #38 ;
INFO  03:19:43,043 - #49 int
INFO  03:19:43,043 - #49 niz
INFO  03:19:43,043 - #42 [
INFO  03:19:43,043 - #43 ]
INFO  03:19:43,043 - #38 ;
INFO  03:19:43,044 - #49 char
INFO  03:19:43,044 - #49 nizch
INFO  03:19:43,044 - #42 [
INFO  03:19:43,044 - #43 ]
INFO  03:19:43,044 - #38 ;
INFO  03:19:43,044 - #44 {
INFO  03:19:43,044 - #14 void
INFO  03:19:43,044 - #49 main
INFO  03:19:43,044 - #40 (
INFO  03:19:43,044 - #41 )
INFO  03:19:43,044 - #49 int
INFO  03:19:43,045 - #49 bodovi
INFO  03:19:43,045 - #38 ;
INFO  03:19:43,045 - #49 bool
INFO  03:19:43,045 - #49 bt
INFO  03:19:43,045 - #38 ;
INFO  03:19:43,045 - #44 {
INFO  03:19:43,045 - #49 bodovi
INFO  03:19:43,046 - #27 =
INFO  03:19:43,046 - #52 0
INFO  03:19:43,046 - #38 ;
INFO  03:19:43,046 - #49 bodovi
INFO  03:19:43,046 - #36 ++
INFO  03:19:43,046 - #38 ;
INFO  03:19:43,046 - #49 bodovi
INFO  03:19:43,046 - #27 =
INFO  03:19:43,046 - #49 bodovi
INFO  03:19:43,046 - #22 +
INFO  03:19:43,046 - #49 jedan
INFO  03:19:43,047 - #38 ;
INFO  03:19:43,047 - #49 bodovi
INFO  03:19:43,047 - #27 =
INFO  03:19:43,047 - #49 bodovi
INFO  03:19:43,047 - #24 *
INFO  03:19:43,047 - #49 pet
INFO  03:19:43,047 - #38 ;
INFO  03:19:43,047 - #49 bodovi
INFO  03:19:43,047 - #37 --
INFO  03:19:43,047 - #38 ;
INFO  03:19:43,047 - #12 print
INFO  03:19:43,048 - #40 (
INFO  03:19:43,048 - #49 bodovi
INFO  03:19:43,048 - #41 )
INFO  03:19:43,048 - #38 ;
INFO  03:19:43,048 - #49 niz
INFO  03:19:43,048 - #27 =
INFO  03:19:43,048 - #11 new
INFO  03:19:43,048 - #49 int
INFO  03:19:43,048 - #42 [
INFO  03:19:43,048 - #52 3
INFO  03:19:43,048 - #43 ]
INFO  03:19:43,048 - #38 ;
INFO  03:19:43,048 - #49 niz
INFO  03:19:43,048 - #42 [
INFO  03:19:43,048 - #49 nula
INFO  03:19:43,048 - #43 ]
INFO  03:19:43,048 - #27 =
INFO  03:19:43,048 - #49 jedan
INFO  03:19:43,048 - #38 ;
INFO  03:19:43,049 - #49 niz
INFO  03:19:43,049 - #42 [
INFO  03:19:43,049 - #52 1
INFO  03:19:43,049 - #43 ]
INFO  03:19:43,049 - #27 =
INFO  03:19:43,049 - #52 2
INFO  03:19:43,049 - #38 ;
INFO  03:19:43,049 - #49 niz
INFO  03:19:43,049 - #42 [
INFO  03:19:43,049 - #49 niz
INFO  03:19:43,049 - #42 [
INFO  03:19:43,049 - #49 jedan
INFO  03:19:43,049 - #43 ]
INFO  03:19:43,049 - #43 ]
INFO  03:19:43,049 - #27 =
INFO  03:19:43,049 - #49 niz
INFO  03:19:43,049 - #42 [
INFO  03:19:43,049 - #49 niz
INFO  03:19:43,049 - #42 [
INFO  03:19:43,049 - #52 0
INFO  03:19:43,049 - #43 ]
INFO  03:19:43,049 - #43 ]
INFO  03:19:43,049 - #24 *
INFO  03:19:43,049 - #52 3
INFO  03:19:43,049 - #38 ;
INFO  03:19:43,049 - #49 bodovi
INFO  03:19:43,049 - #27 =
INFO  03:19:43,049 - #49 niz
INFO  03:19:43,049 - #42 [
INFO  03:19:43,050 - #52 2
INFO  03:19:43,050 - #43 ]
INFO  03:19:43,050 - #25 /
INFO  03:19:43,050 - #49 niz
INFO  03:19:43,050 - #42 [
INFO  03:19:43,050 - #52 0
INFO  03:19:43,050 - #43 ]
INFO  03:19:43,050 - #38 ;
INFO  03:19:43,050 - #12 print
INFO  03:19:43,050 - #40 (
INFO  03:19:43,050 - #49 bodovi
INFO  03:19:43,050 - #41 )
INFO  03:19:43,050 - #38 ;
INFO  03:19:43,050 - #12 print
INFO  03:19:43,050 - #40 (
INFO  03:19:43,050 - #49 niz
INFO  03:19:43,050 - #42 [
INFO  03:19:43,050 - #52 2
INFO  03:19:43,050 - #43 ]
INFO  03:19:43,050 - #41 )
INFO  03:19:43,050 - #38 ;
INFO  03:19:43,050 - #49 nizch
INFO  03:19:43,051 - #27 =
INFO  03:19:43,051 - #11 new
INFO  03:19:43,051 - #49 char
INFO  03:19:43,051 - #42 [
INFO  03:19:43,051 - #52 3
INFO  03:19:43,051 - #43 ]
INFO  03:19:43,051 - #38 ;
INFO  03:19:43,051 - #49 nizch
INFO  03:19:43,051 - #42 [
INFO  03:19:43,051 - #52 0
INFO  03:19:43,051 - #43 ]
INFO  03:19:43,051 - #27 =
INFO  03:19:43,051 - #51 a
INFO  03:19:43,051 - #38 ;
INFO  03:19:43,051 - #49 nizch
INFO  03:19:43,051 - #42 [
INFO  03:19:43,051 - #49 jedan
INFO  03:19:43,051 - #43 ]
INFO  03:19:43,051 - #27 =
INFO  03:19:43,051 - #51 b
INFO  03:19:43,051 - #38 ;
INFO  03:19:43,051 - #49 nizch
INFO  03:19:43,051 - #42 [
INFO  03:19:43,051 - #49 pet
INFO  03:19:43,051 - #23 -
INFO  03:19:43,051 - #52 3
INFO  03:19:43,051 - #43 ]
INFO  03:19:43,051 - #27 =
INFO  03:19:43,051 - #51 c
INFO  03:19:43,051 - #38 ;
INFO  03:19:43,051 - #12 print
INFO  03:19:43,051 - #40 (
INFO  03:19:43,051 - #49 nizch
INFO  03:19:43,051 - #42 [
INFO  03:19:43,051 - #52 1
INFO  03:19:43,051 - #43 ]
INFO  03:19:43,052 - #41 )
INFO  03:19:43,052 - #38 ;
INFO  03:19:43,052 - #12 print
INFO  03:19:43,052 - #40 (
INFO  03:19:43,052 - #49 nizch
INFO  03:19:43,052 - #42 [
INFO  03:19:43,052 - #49 jedan
INFO  03:19:43,052 - #24 *
INFO  03:19:43,052 - #52 2
INFO  03:19:43,052 - #43 ]
INFO  03:19:43,052 - #41 )
INFO  03:19:43,052 - #38 ;
INFO  03:19:43,052 - #49 bodovi
INFO  03:19:43,052 - #27 =
INFO  03:19:43,052 - #49 bodovi
INFO  03:19:43,052 - #22 +
INFO  03:19:43,052 - #40 (
INFO  03:19:43,052 - #49 pet
INFO  03:19:43,052 - #24 *
INFO  03:19:43,052 - #49 jedan
INFO  03:19:43,052 - #23 -
INFO  03:19:43,052 - #52 1
INFO  03:19:43,052 - #41 )
INFO  03:19:43,052 - #24 *
INFO  03:19:43,052 - #49 bodovi
INFO  03:19:43,052 - #23 -
INFO  03:19:43,052 - #40 (
INFO  03:19:43,052 - #52 3
INFO  03:19:43,052 - #26 %
INFO  03:19:43,052 - #52 2
INFO  03:19:43,052 - #22 +
INFO  03:19:43,052 - #52 3
INFO  03:19:43,052 - #24 *
INFO  03:19:43,052 - #52 2
INFO  03:19:43,053 - #23 -
INFO  03:19:43,053 - #52 3
INFO  03:19:43,053 - #41 )
INFO  03:19:43,053 - #38 ;
INFO  03:19:43,053 - #12 print
INFO  03:19:43,053 - #40 (
INFO  03:19:43,053 - #49 bodovi
INFO  03:19:43,053 - #41 )
INFO  03:19:43,053 - #38 ;
INFO  03:19:43,053 - #13 read
INFO  03:19:43,053 - #40 (
INFO  03:19:43,053 - #49 bodovi
INFO  03:19:43,053 - #41 )
INFO  03:19:43,053 - #38 ;
INFO  03:19:43,053 - #12 print
INFO  03:19:43,053 - #40 (
INFO  03:19:43,053 - #49 bodovi
INFO  03:19:43,053 - #41 )
INFO  03:19:43,053 - #38 ;
INFO  03:19:43,053 - #45 }
INFO  03:19:43,053 - #45 }
INFO  03:19:43,057 - Line 17: Using local variable name: bodovi
INFO  03:19:43,057 - Line 18: Using local variable name: bodovi
INFO  03:19:43,057 - Line 19: Using local variable name: bodovi
INFO  03:19:43,057 - Line 19: Using local variable name: bodovi
INFO  03:19:43,057 - Line 20: Using local variable name: bodovi
INFO  03:19:43,057 - Line 20: Using local variable name: bodovi
INFO  03:19:43,057 - Line 21: Using local variable name: bodovi
INFO  03:19:43,057 - Line 22: Using local variable name: bodovi
INFO  03:19:43,057 - Line 25: Using global variable name: niz
INFO  03:19:43,057 - Line 26: Using global variable name: niz
INFO  03:19:43,057 - Line 26: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 27: Using global variable name: niz
INFO  03:19:43,057 - Line 27: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 28: Using global variable name: niz
INFO  03:19:43,057 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 28: Using global variable name: niz
INFO  03:19:43,057 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 28: Using global variable name: niz
INFO  03:19:43,057 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 28: Using global variable name: niz
INFO  03:19:43,057 - Line 28: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 29: Using local variable name: bodovi
INFO  03:19:43,057 - Line 29: Using global variable name: niz
INFO  03:19:43,057 - Line 29: Access to array element detected. Array name: niz
INFO  03:19:43,057 - Line 29: Using global variable name: niz
INFO  03:19:43,057 - Line 29: Access to array element detected. Array name: niz
INFO  03:19:43,058 - Line 30: Using local variable name: bodovi
INFO  03:19:43,058 - Line 31: Using global variable name: niz
INFO  03:19:43,058 - Line 31: Access to array element detected. Array name: niz
INFO  03:19:43,058 - Line 34: Using global variable name: nizch
ERROR 03:19:43,058 - Line 34: Invalid assignment. Types are incompatible.
INFO  03:19:43,058 - Line 35: Using global variable name: nizch
INFO  03:19:43,058 - Line 35: Access to array element detected. Array name: nizch
INFO  03:19:43,058 - Line 36: Using global variable name: nizch
INFO  03:19:43,058 - Line 36: Access to array element detected. Array name: nizch
INFO  03:19:43,058 - Line 37: Using global variable name: nizch
INFO  03:19:43,058 - Line 37: Access to array element detected. Array name: nizch
INFO  03:19:43,058 - Line 38: Using global variable name: nizch
INFO  03:19:43,058 - Line 38: Access to array element detected. Array name: nizch
INFO  03:19:43,058 - Line 39: Using global variable name: nizch
INFO  03:19:43,058 - Line 39: Access to array element detected. Array name: nizch
INFO  03:19:43,058 - Line 42: Using local variable name: bodovi
INFO  03:19:43,058 - Line 42: Using local variable name: bodovi
INFO  03:19:43,058 - Line 42: Using local variable name: bodovi
INFO  03:19:43,058 - Line 43: Using local variable name: bodovi
INFO  03:19:43,058 - Line 45: Using local variable name: bodovi
INFO  03:19:43,058 - Line 46: Using local variable name: bodovi
ERROR 03:19:43,058 - One or more semantic errors found! Compiling unsuccessful!
INFO  03:21:41,377 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:21:41,401 - #2 program
INFO  03:21:41,401 - #49 test301
INFO  03:21:41,401 - #7 const
INFO  03:21:41,402 - #49 int
INFO  03:21:41,402 - #49 nula
INFO  03:21:41,402 - #27 =
INFO  03:21:41,402 - #52 0
INFO  03:21:41,402 - #38 ;
INFO  03:21:41,402 - #7 const
INFO  03:21:41,403 - #49 int
INFO  03:21:41,403 - #49 jedan
INFO  03:21:41,403 - #27 =
INFO  03:21:41,403 - #52 1
INFO  03:21:41,403 - #38 ;
INFO  03:21:41,403 - #7 const
INFO  03:21:41,403 - #49 int
INFO  03:21:41,403 - #49 pet
INFO  03:21:41,403 - #27 =
INFO  03:21:41,403 - #52 5
INFO  03:21:41,403 - #38 ;
INFO  03:21:41,403 - #49 int
INFO  03:21:41,403 - #49 niz
INFO  03:21:41,403 - #42 [
INFO  03:21:41,403 - #43 ]
INFO  03:21:41,403 - #38 ;
INFO  03:21:41,404 - #49 char
INFO  03:21:41,404 - #49 nizch
INFO  03:21:41,404 - #42 [
INFO  03:21:41,404 - #43 ]
INFO  03:21:41,404 - #38 ;
INFO  03:21:41,404 - #44 {
INFO  03:21:41,404 - #14 void
INFO  03:21:41,405 - #49 main
INFO  03:21:41,405 - #40 (
INFO  03:21:41,405 - #41 )
INFO  03:21:41,405 - #49 int
INFO  03:21:41,406 - #49 bodovi
INFO  03:21:41,406 - #38 ;
INFO  03:21:41,406 - #49 bool
INFO  03:21:41,406 - #49 bt
INFO  03:21:41,406 - #38 ;
INFO  03:21:41,406 - #44 {
INFO  03:21:41,406 - #49 bodovi
INFO  03:21:41,407 - #27 =
INFO  03:21:41,407 - #52 0
INFO  03:21:41,407 - #38 ;
INFO  03:21:41,407 - #49 bodovi
INFO  03:21:41,407 - #36 ++
INFO  03:21:41,407 - #38 ;
INFO  03:21:41,407 - #49 bodovi
INFO  03:21:41,407 - #27 =
INFO  03:21:41,407 - #49 bodovi
INFO  03:21:41,407 - #22 +
INFO  03:21:41,407 - #49 jedan
INFO  03:21:41,408 - #38 ;
INFO  03:21:41,408 - #49 bodovi
INFO  03:21:41,408 - #27 =
INFO  03:21:41,408 - #49 bodovi
INFO  03:21:41,408 - #24 *
INFO  03:21:41,408 - #49 pet
INFO  03:21:41,408 - #38 ;
INFO  03:21:41,408 - #49 bodovi
INFO  03:21:41,408 - #37 --
INFO  03:21:41,408 - #38 ;
INFO  03:21:41,408 - #12 print
INFO  03:21:41,409 - #40 (
INFO  03:21:41,409 - #49 bodovi
INFO  03:21:41,409 - #41 )
INFO  03:21:41,409 - #38 ;
INFO  03:21:41,409 - #49 niz
INFO  03:21:41,409 - #27 =
INFO  03:21:41,409 - #11 new
INFO  03:21:41,409 - #49 int
INFO  03:21:41,409 - #42 [
INFO  03:21:41,409 - #52 3
INFO  03:21:41,409 - #43 ]
INFO  03:21:41,409 - #38 ;
INFO  03:21:41,409 - #49 niz
INFO  03:21:41,409 - #42 [
INFO  03:21:41,409 - #49 nula
INFO  03:21:41,409 - #43 ]
INFO  03:21:41,409 - #27 =
INFO  03:21:41,410 - #49 jedan
INFO  03:21:41,410 - #38 ;
INFO  03:21:41,410 - #49 niz
INFO  03:21:41,410 - #42 [
INFO  03:21:41,410 - #52 1
INFO  03:21:41,410 - #43 ]
INFO  03:21:41,410 - #27 =
INFO  03:21:41,410 - #52 2
INFO  03:21:41,410 - #38 ;
INFO  03:21:41,410 - #49 niz
INFO  03:21:41,410 - #42 [
INFO  03:21:41,410 - #49 niz
INFO  03:21:41,410 - #42 [
INFO  03:21:41,410 - #49 jedan
INFO  03:21:41,410 - #43 ]
INFO  03:21:41,410 - #43 ]
INFO  03:21:41,410 - #27 =
INFO  03:21:41,410 - #49 niz
INFO  03:21:41,410 - #42 [
INFO  03:21:41,410 - #49 niz
INFO  03:21:41,410 - #42 [
INFO  03:21:41,410 - #52 0
INFO  03:21:41,410 - #43 ]
INFO  03:21:41,410 - #43 ]
INFO  03:21:41,410 - #24 *
INFO  03:21:41,410 - #52 3
INFO  03:21:41,410 - #38 ;
INFO  03:21:41,410 - #49 bodovi
INFO  03:21:41,410 - #27 =
INFO  03:21:41,410 - #49 niz
INFO  03:21:41,411 - #42 [
INFO  03:21:41,411 - #52 2
INFO  03:21:41,411 - #43 ]
INFO  03:21:41,411 - #25 /
INFO  03:21:41,411 - #49 niz
INFO  03:21:41,411 - #42 [
INFO  03:21:41,411 - #52 0
INFO  03:21:41,411 - #43 ]
INFO  03:21:41,411 - #38 ;
INFO  03:21:41,411 - #12 print
INFO  03:21:41,411 - #40 (
INFO  03:21:41,411 - #49 bodovi
INFO  03:21:41,411 - #41 )
INFO  03:21:41,411 - #38 ;
INFO  03:21:41,411 - #12 print
INFO  03:21:41,411 - #40 (
INFO  03:21:41,411 - #49 niz
INFO  03:21:41,411 - #42 [
INFO  03:21:41,411 - #52 2
INFO  03:21:41,411 - #43 ]
INFO  03:21:41,412 - #41 )
INFO  03:21:41,412 - #38 ;
INFO  03:21:41,412 - #49 nizch
INFO  03:21:41,412 - #27 =
INFO  03:21:41,412 - #11 new
INFO  03:21:41,412 - #49 char
INFO  03:21:41,412 - #42 [
INFO  03:21:41,412 - #52 3
INFO  03:21:41,412 - #43 ]
INFO  03:21:41,412 - #38 ;
INFO  03:21:41,412 - #49 nizch
INFO  03:21:41,412 - #42 [
INFO  03:21:41,412 - #52 0
INFO  03:21:41,412 - #43 ]
INFO  03:21:41,412 - #27 =
INFO  03:21:41,412 - #51 a
INFO  03:21:41,412 - #38 ;
INFO  03:21:41,412 - #49 nizch
INFO  03:21:41,412 - #42 [
INFO  03:21:41,412 - #49 jedan
INFO  03:21:41,412 - #43 ]
INFO  03:21:41,412 - #27 =
INFO  03:21:41,412 - #51 b
INFO  03:21:41,412 - #38 ;
INFO  03:21:41,412 - #49 nizch
INFO  03:21:41,412 - #42 [
INFO  03:21:41,412 - #49 pet
INFO  03:21:41,412 - #23 -
INFO  03:21:41,412 - #52 3
INFO  03:21:41,412 - #43 ]
INFO  03:21:41,412 - #27 =
INFO  03:21:41,412 - #51 c
INFO  03:21:41,412 - #38 ;
INFO  03:21:41,413 - #12 print
INFO  03:21:41,413 - #40 (
INFO  03:21:41,413 - #49 nizch
INFO  03:21:41,413 - #42 [
INFO  03:21:41,413 - #52 1
INFO  03:21:41,413 - #43 ]
INFO  03:21:41,413 - #41 )
INFO  03:21:41,413 - #38 ;
INFO  03:21:41,413 - #12 print
INFO  03:21:41,413 - #40 (
INFO  03:21:41,413 - #49 nizch
INFO  03:21:41,413 - #42 [
INFO  03:21:41,413 - #49 jedan
INFO  03:21:41,413 - #24 *
INFO  03:21:41,413 - #52 2
INFO  03:21:41,413 - #43 ]
INFO  03:21:41,413 - #41 )
INFO  03:21:41,413 - #38 ;
INFO  03:21:41,413 - #49 bodovi
INFO  03:21:41,413 - #27 =
INFO  03:21:41,413 - #49 bodovi
INFO  03:21:41,413 - #22 +
INFO  03:21:41,413 - #40 (
INFO  03:21:41,413 - #49 pet
INFO  03:21:41,413 - #24 *
INFO  03:21:41,413 - #49 jedan
INFO  03:21:41,413 - #23 -
INFO  03:21:41,413 - #52 1
INFO  03:21:41,413 - #41 )
INFO  03:21:41,413 - #24 *
INFO  03:21:41,413 - #49 bodovi
INFO  03:21:41,413 - #23 -
INFO  03:21:41,413 - #40 (
INFO  03:21:41,413 - #52 3
INFO  03:21:41,413 - #26 %
INFO  03:21:41,413 - #52 2
INFO  03:21:41,414 - #22 +
INFO  03:21:41,414 - #52 3
INFO  03:21:41,414 - #24 *
INFO  03:21:41,414 - #52 2
INFO  03:21:41,414 - #23 -
INFO  03:21:41,414 - #52 3
INFO  03:21:41,414 - #41 )
INFO  03:21:41,414 - #38 ;
INFO  03:21:41,414 - #12 print
INFO  03:21:41,414 - #40 (
INFO  03:21:41,414 - #49 bodovi
INFO  03:21:41,414 - #41 )
INFO  03:21:41,414 - #38 ;
INFO  03:21:41,414 - #13 read
INFO  03:21:41,414 - #40 (
INFO  03:21:41,414 - #49 bodovi
INFO  03:21:41,414 - #41 )
INFO  03:21:41,414 - #38 ;
INFO  03:21:41,414 - #12 print
INFO  03:21:41,414 - #40 (
INFO  03:21:41,414 - #49 bodovi
INFO  03:21:41,414 - #41 )
INFO  03:21:41,414 - #38 ;
INFO  03:21:41,414 - #45 }
INFO  03:21:41,414 - #45 }
INFO  03:21:41,423 - Line 17: Using local variable name: bodovi
INFO  03:21:41,423 - Line 18: Using local variable name: bodovi
INFO  03:21:41,423 - Line 19: Using local variable name: bodovi
INFO  03:21:41,423 - Line 19: Using local variable name: bodovi
INFO  03:21:41,423 - Line 20: Using local variable name: bodovi
INFO  03:21:41,423 - Line 20: Using local variable name: bodovi
INFO  03:21:41,423 - Line 21: Using local variable name: bodovi
INFO  03:21:41,423 - Line 22: Using local variable name: bodovi
INFO  03:21:41,423 - Line 25: Using global variable name: niz
INFO  03:22:16,387 - Line 26: Using global variable name: niz
INFO  03:22:16,388 - Line 26: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 27: Using global variable name: niz
INFO  03:22:16,388 - Line 27: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 28: Using global variable name: niz
INFO  03:22:16,388 - Line 28: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 28: Using global variable name: niz
INFO  03:22:16,388 - Line 28: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 28: Using global variable name: niz
INFO  03:22:16,388 - Line 28: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 28: Using global variable name: niz
INFO  03:22:16,388 - Line 28: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 29: Using local variable name: bodovi
INFO  03:22:16,388 - Line 29: Using global variable name: niz
INFO  03:22:16,388 - Line 29: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 29: Using global variable name: niz
INFO  03:22:16,388 - Line 29: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 30: Using local variable name: bodovi
INFO  03:22:16,388 - Line 31: Using global variable name: niz
INFO  03:22:16,388 - Line 31: Access to array element detected. Array name: niz
INFO  03:22:16,388 - Line 34: Using global variable name: nizch
INFO  03:23:36,853 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:23:36,871 - #2 program
INFO  03:23:36,871 - #49 test301
INFO  03:23:36,871 - #7 const
INFO  03:23:36,871 - #49 int
INFO  03:23:36,871 - #49 nula
INFO  03:23:36,871 - #27 =
INFO  03:23:36,871 - #52 0
INFO  03:23:36,871 - #38 ;
INFO  03:23:36,872 - #7 const
INFO  03:23:36,872 - #49 int
INFO  03:23:36,872 - #49 jedan
INFO  03:23:36,872 - #27 =
INFO  03:23:36,872 - #52 1
INFO  03:23:36,872 - #38 ;
INFO  03:23:36,872 - #7 const
INFO  03:23:36,872 - #49 int
INFO  03:23:36,872 - #49 pet
INFO  03:23:36,872 - #27 =
INFO  03:23:36,872 - #52 5
INFO  03:23:36,872 - #38 ;
INFO  03:23:36,872 - #49 int
INFO  03:23:36,873 - #49 niz
INFO  03:23:36,873 - #42 [
INFO  03:23:36,873 - #43 ]
INFO  03:23:36,873 - #38 ;
INFO  03:23:36,873 - #49 char
INFO  03:23:36,873 - #49 nizch
INFO  03:23:36,873 - #42 [
INFO  03:23:36,873 - #43 ]
INFO  03:23:36,873 - #38 ;
INFO  03:23:36,873 - #44 {
INFO  03:23:36,873 - #14 void
INFO  03:23:36,874 - #49 main
INFO  03:23:36,874 - #40 (
INFO  03:23:36,874 - #41 )
INFO  03:23:36,874 - #49 int
INFO  03:23:36,874 - #49 bodovi
INFO  03:23:36,874 - #38 ;
INFO  03:23:36,875 - #49 bool
INFO  03:23:36,875 - #49 bt
INFO  03:23:36,875 - #38 ;
INFO  03:23:36,875 - #44 {
INFO  03:23:36,875 - #49 bodovi
INFO  03:23:36,875 - #27 =
INFO  03:23:36,875 - #52 0
INFO  03:23:36,875 - #38 ;
INFO  03:23:36,876 - #49 bodovi
INFO  03:23:36,876 - #36 ++
INFO  03:23:36,876 - #38 ;
INFO  03:23:36,876 - #49 bodovi
INFO  03:23:36,876 - #27 =
INFO  03:23:36,876 - #49 bodovi
INFO  03:23:36,876 - #22 +
INFO  03:23:36,876 - #49 jedan
INFO  03:23:36,876 - #38 ;
INFO  03:23:36,876 - #49 bodovi
INFO  03:23:36,877 - #27 =
INFO  03:23:36,877 - #49 bodovi
INFO  03:23:36,877 - #24 *
INFO  03:23:36,877 - #49 pet
INFO  03:23:36,877 - #38 ;
INFO  03:23:36,877 - #49 bodovi
INFO  03:23:36,877 - #37 --
INFO  03:23:36,877 - #38 ;
INFO  03:23:36,877 - #12 print
INFO  03:23:36,877 - #40 (
INFO  03:23:36,877 - #49 bodovi
INFO  03:23:36,877 - #41 )
INFO  03:23:36,877 - #38 ;
INFO  03:23:36,877 - #49 niz
INFO  03:23:36,877 - #27 =
INFO  03:23:36,878 - #11 new
INFO  03:23:36,878 - #49 int
INFO  03:23:36,878 - #42 [
INFO  03:23:36,878 - #52 3
INFO  03:23:36,878 - #43 ]
INFO  03:23:36,878 - #38 ;
INFO  03:23:36,878 - #49 niz
INFO  03:23:36,878 - #42 [
INFO  03:23:36,878 - #49 nula
INFO  03:23:36,878 - #43 ]
INFO  03:23:36,878 - #27 =
INFO  03:23:36,878 - #49 jedan
INFO  03:23:36,878 - #38 ;
INFO  03:23:36,878 - #49 niz
INFO  03:23:36,878 - #42 [
INFO  03:23:36,878 - #52 1
INFO  03:23:36,878 - #43 ]
INFO  03:23:36,878 - #27 =
INFO  03:23:36,878 - #52 2
INFO  03:23:36,878 - #38 ;
INFO  03:23:36,878 - #49 niz
INFO  03:23:36,878 - #42 [
INFO  03:23:36,878 - #49 niz
INFO  03:23:36,878 - #42 [
INFO  03:23:36,878 - #49 jedan
INFO  03:23:36,879 - #43 ]
INFO  03:23:36,879 - #43 ]
INFO  03:23:36,879 - #27 =
INFO  03:23:36,879 - #49 niz
INFO  03:23:36,879 - #42 [
INFO  03:23:36,879 - #49 niz
INFO  03:23:36,879 - #42 [
INFO  03:23:36,879 - #52 0
INFO  03:23:36,879 - #43 ]
INFO  03:23:36,879 - #43 ]
INFO  03:23:36,879 - #24 *
INFO  03:23:36,879 - #52 3
INFO  03:23:36,879 - #38 ;
INFO  03:23:36,879 - #49 bodovi
INFO  03:23:36,879 - #27 =
INFO  03:23:36,879 - #49 niz
INFO  03:23:36,879 - #42 [
INFO  03:23:36,879 - #52 2
INFO  03:23:36,879 - #43 ]
INFO  03:23:36,879 - #25 /
INFO  03:23:36,879 - #49 niz
INFO  03:23:36,879 - #42 [
INFO  03:23:36,880 - #52 0
INFO  03:23:36,880 - #43 ]
INFO  03:23:36,880 - #38 ;
INFO  03:23:36,880 - #12 print
INFO  03:23:36,880 - #40 (
INFO  03:23:36,880 - #49 bodovi
INFO  03:23:36,880 - #41 )
INFO  03:23:36,880 - #38 ;
INFO  03:23:36,880 - #12 print
INFO  03:23:36,880 - #40 (
INFO  03:23:36,880 - #49 niz
INFO  03:23:36,880 - #42 [
INFO  03:23:36,880 - #52 2
INFO  03:23:36,880 - #43 ]
INFO  03:23:36,880 - #41 )
INFO  03:23:36,880 - #38 ;
INFO  03:23:36,880 - #49 nizch
INFO  03:23:36,880 - #27 =
INFO  03:23:36,880 - #11 new
INFO  03:23:36,880 - #49 char
INFO  03:23:36,880 - #42 [
INFO  03:23:36,880 - #52 3
INFO  03:23:36,880 - #43 ]
INFO  03:23:36,880 - #38 ;
INFO  03:23:36,880 - #49 nizch
INFO  03:23:36,880 - #42 [
INFO  03:23:36,880 - #52 0
INFO  03:23:36,880 - #43 ]
INFO  03:23:36,880 - #27 =
INFO  03:23:36,880 - #51 a
INFO  03:23:36,880 - #38 ;
INFO  03:23:36,880 - #49 nizch
INFO  03:23:36,880 - #42 [
INFO  03:23:36,880 - #49 jedan
INFO  03:23:36,880 - #43 ]
INFO  03:23:36,880 - #27 =
INFO  03:23:36,881 - #51 b
INFO  03:23:36,881 - #38 ;
INFO  03:23:36,881 - #49 nizch
INFO  03:23:36,881 - #42 [
INFO  03:23:36,881 - #49 pet
INFO  03:23:36,881 - #23 -
INFO  03:23:36,881 - #52 3
INFO  03:23:36,881 - #43 ]
INFO  03:23:36,881 - #27 =
INFO  03:23:36,881 - #51 c
INFO  03:23:36,881 - #38 ;
INFO  03:23:36,881 - #12 print
INFO  03:23:36,881 - #40 (
INFO  03:23:36,881 - #49 nizch
INFO  03:23:36,881 - #42 [
INFO  03:23:36,881 - #52 1
INFO  03:23:36,881 - #43 ]
INFO  03:23:36,881 - #41 )
INFO  03:23:36,881 - #38 ;
INFO  03:23:36,881 - #12 print
INFO  03:23:36,881 - #40 (
INFO  03:23:36,881 - #49 nizch
INFO  03:23:36,881 - #42 [
INFO  03:23:36,881 - #49 jedan
INFO  03:23:36,881 - #24 *
INFO  03:23:36,881 - #52 2
INFO  03:23:36,881 - #43 ]
INFO  03:23:36,881 - #41 )
INFO  03:23:36,881 - #38 ;
INFO  03:23:36,881 - #49 bodovi
INFO  03:23:36,881 - #27 =
INFO  03:23:36,881 - #49 bodovi
INFO  03:23:36,881 - #22 +
INFO  03:23:36,881 - #40 (
INFO  03:23:36,881 - #49 pet
INFO  03:23:36,882 - #24 *
INFO  03:23:36,882 - #49 jedan
INFO  03:23:36,882 - #23 -
INFO  03:23:36,882 - #52 1
INFO  03:23:36,882 - #41 )
INFO  03:23:36,882 - #24 *
INFO  03:23:36,882 - #49 bodovi
INFO  03:23:36,882 - #23 -
INFO  03:23:36,882 - #40 (
INFO  03:23:36,882 - #52 3
INFO  03:23:36,882 - #26 %
INFO  03:23:36,882 - #52 2
INFO  03:23:36,882 - #22 +
INFO  03:23:36,882 - #52 3
INFO  03:23:36,882 - #24 *
INFO  03:23:36,882 - #52 2
INFO  03:23:36,882 - #23 -
INFO  03:23:36,882 - #52 3
INFO  03:23:36,882 - #41 )
INFO  03:23:36,882 - #38 ;
INFO  03:23:36,882 - #12 print
INFO  03:23:36,882 - #40 (
INFO  03:23:36,882 - #49 bodovi
INFO  03:23:36,882 - #41 )
INFO  03:23:36,882 - #38 ;
INFO  03:23:36,882 - #13 read
INFO  03:23:36,883 - #40 (
INFO  03:23:36,883 - #49 bodovi
INFO  03:23:36,883 - #41 )
INFO  03:23:36,883 - #38 ;
INFO  03:23:36,883 - #12 print
INFO  03:23:36,883 - #40 (
INFO  03:23:36,883 - #49 bodovi
INFO  03:23:36,883 - #41 )
INFO  03:23:36,883 - #38 ;
INFO  03:23:36,883 - #45 }
INFO  03:23:36,883 - #45 }
INFO  03:23:36,887 - Line 17: Using local variable name: bodovi
INFO  03:23:36,887 - Line 18: Using local variable name: bodovi
INFO  03:23:36,887 - Line 19: Using local variable name: bodovi
INFO  03:23:36,887 - Line 19: Using local variable name: bodovi
INFO  03:23:36,887 - Line 20: Using local variable name: bodovi
INFO  03:23:36,887 - Line 20: Using local variable name: bodovi
INFO  03:23:36,887 - Line 21: Using local variable name: bodovi
INFO  03:23:36,887 - Line 22: Using local variable name: bodovi
INFO  03:23:36,887 - Line 25: Using global variable name: niz
INFO  03:23:36,887 - Line 26: Using global variable name: niz
INFO  03:23:36,887 - Line 26: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 27: Using global variable name: niz
INFO  03:23:36,887 - Line 27: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 28: Using global variable name: niz
INFO  03:23:36,887 - Line 28: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 28: Using global variable name: niz
INFO  03:23:36,887 - Line 28: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 28: Using global variable name: niz
INFO  03:23:36,887 - Line 28: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 28: Using global variable name: niz
INFO  03:23:36,887 - Line 28: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 29: Using local variable name: bodovi
INFO  03:23:36,887 - Line 29: Using global variable name: niz
INFO  03:23:36,887 - Line 29: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 29: Using global variable name: niz
INFO  03:23:36,887 - Line 29: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 30: Using local variable name: bodovi
INFO  03:23:36,887 - Line 31: Using global variable name: niz
INFO  03:23:36,887 - Line 31: Access to array element detected. Array name: niz
INFO  03:23:36,887 - Line 34: Using global variable name: nizch
INFO  03:23:36,887 - Line 35: Using global variable name: nizch
INFO  03:23:36,887 - Line 35: Access to array element detected. Array name: nizch
INFO  03:23:36,887 - Line 36: Using global variable name: nizch
INFO  03:23:36,887 - Line 36: Access to array element detected. Array name: nizch
INFO  03:23:36,887 - Line 37: Using global variable name: nizch
INFO  03:23:36,888 - Line 37: Access to array element detected. Array name: nizch
INFO  03:23:36,888 - Line 38: Using global variable name: nizch
INFO  03:23:36,888 - Line 38: Access to array element detected. Array name: nizch
INFO  03:23:36,888 - Line 39: Using global variable name: nizch
INFO  03:23:36,888 - Line 39: Access to array element detected. Array name: nizch
INFO  03:23:36,888 - Line 42: Using local variable name: bodovi
INFO  03:23:36,888 - Line 42: Using local variable name: bodovi
INFO  03:23:36,888 - Line 42: Using local variable name: bodovi
INFO  03:23:36,888 - Line 43: Using local variable name: bodovi
INFO  03:23:36,888 - Line 45: Using local variable name: bodovi
INFO  03:23:36,888 - Line 46: Using local variable name: bodovi
INFO  03:23:36,889 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:36:16,397 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:36:16,416 - #2 program
INFO  03:36:16,416 - #49 test301
INFO  03:36:16,416 - #44 {
INFO  03:36:16,417 - #14 void
INFO  03:36:16,417 - #49 main
INFO  03:36:16,417 - #40 (
INFO  03:36:16,417 - #41 )
INFO  03:36:16,417 - #49 int
INFO  03:36:16,417 - #49 x
INFO  03:36:16,418 - #38 ;
INFO  03:36:16,418 - #44 {
INFO  03:36:16,418 - #13 read
INFO  03:36:16,418 - #40 (
INFO  03:36:16,418 - #49 x
INFO  03:36:16,418 - #41 )
INFO  03:36:16,419 - #38 ;
INFO  03:36:16,419 - #12 print
INFO  03:36:16,419 - #40 (
INFO  03:36:16,419 - #49 x
INFO  03:36:16,419 - #41 )
INFO  03:36:16,419 - #38 ;
INFO  03:36:16,419 - #45 }
INFO  03:36:16,419 - #45 }
INFO  03:36:16,423 - Line 8: Using local variable name: x
INFO  03:36:16,423 - Line 9: Using local variable name: x
INFO  03:36:16,425 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:36:48,607 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:36:48,626 - #2 program
INFO  03:36:48,626 - #49 test301
INFO  03:36:48,626 - #44 {
INFO  03:36:48,626 - #14 void
INFO  03:36:48,626 - #49 main
INFO  03:36:48,627 - #40 (
INFO  03:36:48,627 - #41 )
INFO  03:36:48,627 - #49 int
INFO  03:36:48,627 - #49 x
INFO  03:36:48,627 - #38 ;
INFO  03:36:48,628 - #44 {
INFO  03:36:48,628 - #13 read
INFO  03:36:48,628 - #40 (
INFO  03:36:48,628 - #49 x
INFO  03:36:48,628 - #41 )
INFO  03:36:48,628 - #38 ;
INFO  03:36:48,628 - #12 print
INFO  03:36:48,628 - #40 (
INFO  03:36:48,629 - #49 x
INFO  03:36:48,629 - #41 )
INFO  03:36:48,629 - #38 ;
INFO  03:36:48,629 - #45 }
INFO  03:36:48,629 - #45 }
INFO  03:36:48,633 - Line 8: Using local variable name: x
INFO  03:36:48,633 - Line 9: Using local variable name: x
INFO  03:36:48,634 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:44:27,320 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:44:27,338 - #2 program
INFO  03:44:27,338 - #49 test301
INFO  03:44:27,338 - #44 {
INFO  03:44:27,339 - #14 void
INFO  03:44:27,339 - #49 main
INFO  03:44:27,339 - #40 (
INFO  03:44:27,339 - #41 )
INFO  03:44:27,339 - #49 int
INFO  03:44:27,339 - #49 x
INFO  03:44:27,340 - #38 ;
INFO  03:44:27,340 - #44 {
INFO  03:44:27,340 - #13 read
INFO  03:44:27,340 - #40 (
INFO  03:44:27,340 - #49 x
INFO  03:44:27,340 - #41 )
INFO  03:44:27,341 - #38 ;
INFO  03:44:27,341 - #12 print
INFO  03:44:27,341 - #40 (
INFO  03:44:27,341 - #49 x
INFO  03:44:27,341 - #41 )
INFO  03:44:27,341 - #38 ;
INFO  03:44:27,341 - #45 }
INFO  03:44:27,341 - #45 }
INFO  03:44:27,345 - Line 8: Using local variable name: x
INFO  03:44:27,345 - Line 9: Using local variable name: x
INFO  03:44:27,346 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:45:30,185 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:45:30,204 - #2 program
INFO  03:45:30,204 - #49 test301
INFO  03:45:30,204 - #7 const
INFO  03:45:30,204 - #49 int
INFO  03:45:30,204 - #49 nula
INFO  03:45:30,205 - #27 =
INFO  03:45:30,205 - #52 0
INFO  03:45:30,205 - #38 ;
INFO  03:45:30,205 - #7 const
INFO  03:45:30,205 - #49 int
INFO  03:45:30,205 - #49 jedan
INFO  03:45:30,205 - #27 =
INFO  03:45:30,205 - #52 1
INFO  03:45:30,205 - #38 ;
INFO  03:45:30,205 - #7 const
INFO  03:45:30,205 - #49 int
INFO  03:45:30,205 - #49 pet
INFO  03:45:30,205 - #27 =
INFO  03:45:30,205 - #52 5
INFO  03:45:30,206 - #38 ;
INFO  03:45:30,206 - #49 int
INFO  03:45:30,206 - #49 niz
INFO  03:45:30,206 - #42 [
INFO  03:45:30,206 - #43 ]
INFO  03:45:30,206 - #38 ;
INFO  03:45:30,206 - #49 char
INFO  03:45:30,206 - #49 nizch
INFO  03:45:30,206 - #42 [
INFO  03:45:30,206 - #43 ]
INFO  03:45:30,206 - #38 ;
INFO  03:45:30,206 - #44 {
INFO  03:45:30,206 - #14 void
INFO  03:45:30,207 - #49 main
INFO  03:45:30,207 - #40 (
INFO  03:45:30,207 - #41 )
INFO  03:45:30,207 - #49 int
INFO  03:45:30,207 - #49 bodovi
INFO  03:45:30,207 - #38 ;
INFO  03:45:30,208 - #49 bool
INFO  03:45:30,208 - #49 bt
INFO  03:45:30,208 - #38 ;
INFO  03:45:30,208 - #44 {
INFO  03:45:30,208 - #49 bodovi
INFO  03:45:30,208 - #27 =
INFO  03:45:30,208 - #52 0
INFO  03:45:30,208 - #38 ;
INFO  03:45:30,208 - #49 bodovi
INFO  03:45:30,209 - #36 ++
INFO  03:45:30,209 - #38 ;
INFO  03:45:30,209 - #49 bodovi
INFO  03:45:30,209 - #27 =
INFO  03:45:30,209 - #49 bodovi
INFO  03:45:30,209 - #22 +
INFO  03:45:30,209 - #49 jedan
INFO  03:45:30,209 - #38 ;
INFO  03:45:30,209 - #49 bodovi
INFO  03:45:30,209 - #27 =
INFO  03:45:30,209 - #49 bodovi
INFO  03:45:30,209 - #24 *
INFO  03:45:30,209 - #49 pet
INFO  03:45:30,210 - #38 ;
INFO  03:45:30,210 - #49 bodovi
INFO  03:45:30,210 - #37 --
INFO  03:45:30,210 - #38 ;
INFO  03:45:30,210 - #12 print
INFO  03:45:30,210 - #40 (
INFO  03:45:30,210 - #49 bodovi
INFO  03:45:30,210 - #41 )
INFO  03:45:30,210 - #38 ;
INFO  03:45:30,210 - #49 niz
INFO  03:45:30,210 - #27 =
INFO  03:45:30,210 - #11 new
INFO  03:45:30,210 - #49 int
INFO  03:45:30,210 - #42 [
INFO  03:45:30,210 - #52 3
INFO  03:45:30,210 - #43 ]
INFO  03:45:30,210 - #38 ;
INFO  03:45:30,211 - #49 niz
INFO  03:45:30,211 - #42 [
INFO  03:45:30,211 - #49 nula
INFO  03:45:30,211 - #43 ]
INFO  03:45:30,211 - #27 =
INFO  03:45:30,211 - #49 jedan
INFO  03:45:30,211 - #38 ;
INFO  03:45:30,211 - #49 niz
INFO  03:45:30,211 - #42 [
INFO  03:45:30,211 - #52 1
INFO  03:45:30,211 - #43 ]
INFO  03:45:30,211 - #27 =
INFO  03:45:30,211 - #52 2
INFO  03:45:30,211 - #38 ;
INFO  03:45:30,211 - #49 niz
INFO  03:45:30,211 - #42 [
INFO  03:45:30,211 - #49 niz
INFO  03:45:30,211 - #42 [
INFO  03:45:30,211 - #49 jedan
INFO  03:45:30,211 - #43 ]
INFO  03:45:30,211 - #43 ]
INFO  03:45:30,211 - #27 =
INFO  03:45:30,211 - #49 niz
INFO  03:45:30,211 - #42 [
INFO  03:45:30,211 - #49 niz
INFO  03:45:30,211 - #42 [
INFO  03:45:30,212 - #52 0
INFO  03:45:30,212 - #43 ]
INFO  03:45:30,212 - #43 ]
INFO  03:45:30,212 - #24 *
INFO  03:45:30,212 - #52 3
INFO  03:45:30,212 - #38 ;
INFO  03:45:30,212 - #49 bodovi
INFO  03:45:30,212 - #27 =
INFO  03:45:30,212 - #49 niz
INFO  03:45:30,212 - #42 [
INFO  03:45:30,212 - #52 2
INFO  03:45:30,212 - #43 ]
INFO  03:45:30,212 - #25 /
INFO  03:45:30,212 - #49 niz
INFO  03:45:30,212 - #42 [
INFO  03:45:30,212 - #52 0
INFO  03:45:30,212 - #43 ]
INFO  03:45:30,212 - #38 ;
INFO  03:45:30,212 - #12 print
INFO  03:45:30,213 - #40 (
INFO  03:45:30,213 - #49 bodovi
INFO  03:45:30,213 - #41 )
INFO  03:45:30,213 - #38 ;
INFO  03:45:30,213 - #12 print
INFO  03:45:30,213 - #40 (
INFO  03:45:30,213 - #49 niz
INFO  03:45:30,213 - #42 [
INFO  03:45:30,213 - #52 2
INFO  03:45:30,213 - #43 ]
INFO  03:45:30,213 - #41 )
INFO  03:45:30,213 - #38 ;
INFO  03:45:30,213 - #49 nizch
INFO  03:45:30,213 - #27 =
INFO  03:45:30,213 - #11 new
INFO  03:45:30,213 - #49 char
INFO  03:45:30,213 - #42 [
INFO  03:45:30,213 - #52 3
INFO  03:45:30,213 - #43 ]
INFO  03:45:30,213 - #38 ;
INFO  03:45:30,213 - #49 nizch
INFO  03:45:30,213 - #42 [
INFO  03:45:30,213 - #52 0
INFO  03:45:30,213 - #43 ]
INFO  03:45:30,213 - #27 =
INFO  03:45:30,213 - #51 a
INFO  03:45:30,213 - #38 ;
INFO  03:45:30,213 - #49 nizch
INFO  03:45:30,213 - #42 [
INFO  03:45:30,213 - #49 jedan
INFO  03:45:30,213 - #43 ]
INFO  03:45:30,214 - #27 =
INFO  03:45:30,214 - #51 b
INFO  03:45:30,214 - #38 ;
INFO  03:45:30,214 - #49 nizch
INFO  03:45:30,214 - #42 [
INFO  03:45:30,214 - #49 pet
INFO  03:45:30,214 - #23 -
INFO  03:45:30,214 - #52 3
INFO  03:45:30,214 - #43 ]
INFO  03:45:30,214 - #27 =
INFO  03:45:30,214 - #51 c
INFO  03:45:30,214 - #38 ;
INFO  03:45:30,214 - #12 print
INFO  03:45:30,214 - #40 (
INFO  03:45:30,214 - #49 nizch
INFO  03:45:30,214 - #42 [
INFO  03:45:30,214 - #52 1
INFO  03:45:30,214 - #43 ]
INFO  03:45:30,214 - #41 )
INFO  03:45:30,214 - #38 ;
INFO  03:45:30,214 - #12 print
INFO  03:45:30,214 - #40 (
INFO  03:45:30,214 - #49 nizch
INFO  03:45:30,214 - #42 [
INFO  03:45:30,214 - #49 jedan
INFO  03:45:30,214 - #24 *
INFO  03:45:30,214 - #52 2
INFO  03:45:30,214 - #43 ]
INFO  03:45:30,214 - #41 )
INFO  03:45:30,214 - #38 ;
INFO  03:45:30,214 - #49 bodovi
INFO  03:45:30,214 - #27 =
INFO  03:45:30,215 - #49 bodovi
INFO  03:45:30,215 - #22 +
INFO  03:45:30,215 - #40 (
INFO  03:45:30,215 - #49 pet
INFO  03:45:30,215 - #24 *
INFO  03:45:30,215 - #49 jedan
INFO  03:45:30,215 - #23 -
INFO  03:45:30,215 - #52 1
INFO  03:45:30,215 - #41 )
INFO  03:45:30,215 - #24 *
INFO  03:45:30,215 - #49 bodovi
INFO  03:45:30,215 - #23 -
INFO  03:45:30,215 - #40 (
INFO  03:45:30,215 - #52 3
INFO  03:45:30,215 - #26 %
INFO  03:45:30,215 - #52 2
INFO  03:45:30,215 - #22 +
INFO  03:45:30,215 - #52 3
INFO  03:45:30,215 - #24 *
INFO  03:45:30,215 - #52 2
INFO  03:45:30,215 - #23 -
INFO  03:45:30,215 - #52 3
INFO  03:45:30,215 - #41 )
INFO  03:45:30,215 - #38 ;
INFO  03:45:30,215 - #12 print
INFO  03:45:30,215 - #40 (
INFO  03:45:30,215 - #49 bodovi
INFO  03:45:30,215 - #41 )
INFO  03:45:30,216 - #38 ;
INFO  03:45:30,216 - #45 }
INFO  03:45:30,216 - #45 }
INFO  03:45:30,219 - Line 17: Using local variable name: bodovi
INFO  03:45:30,220 - Line 18: Using local variable name: bodovi
INFO  03:45:30,220 - Line 19: Using local variable name: bodovi
INFO  03:45:30,220 - Line 19: Using local variable name: bodovi
INFO  03:45:30,220 - Line 20: Using local variable name: bodovi
INFO  03:45:30,220 - Line 20: Using local variable name: bodovi
INFO  03:45:30,220 - Line 21: Using local variable name: bodovi
INFO  03:45:30,220 - Line 22: Using local variable name: bodovi
INFO  03:45:30,220 - Line 25: Using global variable name: niz
INFO  03:45:30,220 - Line 26: Using global variable name: niz
INFO  03:45:30,220 - Line 26: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 27: Using global variable name: niz
INFO  03:45:30,220 - Line 27: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 28: Using global variable name: niz
INFO  03:45:30,220 - Line 28: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 28: Using global variable name: niz
INFO  03:45:30,220 - Line 28: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 28: Using global variable name: niz
INFO  03:45:30,220 - Line 28: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 28: Using global variable name: niz
INFO  03:45:30,220 - Line 28: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 29: Using local variable name: bodovi
INFO  03:45:30,220 - Line 29: Using global variable name: niz
INFO  03:45:30,220 - Line 29: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 29: Using global variable name: niz
INFO  03:45:30,220 - Line 29: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 30: Using local variable name: bodovi
INFO  03:45:30,220 - Line 31: Using global variable name: niz
INFO  03:45:30,220 - Line 31: Access to array element detected. Array name: niz
INFO  03:45:30,220 - Line 34: Using global variable name: nizch
INFO  03:45:30,220 - Line 35: Using global variable name: nizch
INFO  03:45:30,220 - Line 35: Access to array element detected. Array name: nizch
INFO  03:45:30,220 - Line 36: Using global variable name: nizch
INFO  03:45:30,220 - Line 36: Access to array element detected. Array name: nizch
INFO  03:45:30,220 - Line 37: Using global variable name: nizch
INFO  03:45:30,220 - Line 37: Access to array element detected. Array name: nizch
INFO  03:45:30,220 - Line 38: Using global variable name: nizch
INFO  03:45:30,220 - Line 38: Access to array element detected. Array name: nizch
INFO  03:45:30,220 - Line 39: Using global variable name: nizch
INFO  03:45:30,220 - Line 39: Access to array element detected. Array name: nizch
INFO  03:45:30,220 - Line 42: Using local variable name: bodovi
INFO  03:45:30,220 - Line 42: Using local variable name: bodovi
INFO  03:45:30,220 - Line 42: Using local variable name: bodovi
INFO  03:45:30,220 - Line 43: Using local variable name: bodovi
INFO  03:45:30,222 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:48:55,151 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:48:55,169 - #2 program
INFO  03:48:55,169 - #49 test301
INFO  03:48:55,169 - #7 const
INFO  03:48:55,169 - #49 int
INFO  03:48:55,169 - #49 nula
INFO  03:48:55,169 - #27 =
INFO  03:48:55,170 - #52 0
INFO  03:48:55,170 - #38 ;
INFO  03:48:55,170 - #7 const
INFO  03:48:55,170 - #49 int
INFO  03:48:55,170 - #49 jedan
INFO  03:48:55,170 - #27 =
INFO  03:48:55,170 - #52 1
INFO  03:48:55,170 - #38 ;
INFO  03:48:55,170 - #7 const
INFO  03:48:55,170 - #49 int
INFO  03:48:55,170 - #49 pet
INFO  03:48:55,170 - #27 =
INFO  03:48:55,170 - #52 5
INFO  03:48:55,170 - #38 ;
INFO  03:48:55,170 - #49 int
INFO  03:48:55,170 - #49 niz
INFO  03:48:55,170 - #42 [
INFO  03:48:55,170 - #43 ]
INFO  03:48:55,170 - #38 ;
INFO  03:48:55,170 - #49 char
INFO  03:48:55,170 - #49 nizch
INFO  03:48:55,170 - #42 [
INFO  03:48:55,170 - #43 ]
INFO  03:48:55,170 - #38 ;
INFO  03:48:55,170 - #44 {
INFO  03:48:55,170 - #14 void
INFO  03:48:55,171 - #49 main
INFO  03:48:55,171 - #40 (
INFO  03:48:55,171 - #41 )
INFO  03:48:55,171 - #49 int
INFO  03:48:55,171 - #49 bodovi
INFO  03:48:55,171 - #38 ;
INFO  03:48:55,172 - #49 bool
INFO  03:48:55,172 - #49 bt
INFO  03:48:55,172 - #38 ;
INFO  03:48:55,172 - #44 {
INFO  03:48:55,172 - #49 bodovi
INFO  03:48:55,172 - #27 =
INFO  03:48:55,172 - #52 0
INFO  03:48:55,172 - #38 ;
INFO  03:48:55,172 - #49 bodovi
INFO  03:48:55,173 - #36 ++
INFO  03:48:55,173 - #38 ;
INFO  03:48:55,173 - #49 bodovi
INFO  03:48:55,173 - #27 =
INFO  03:48:55,173 - #49 bodovi
INFO  03:48:55,173 - #22 +
INFO  03:48:55,173 - #49 jedan
INFO  03:48:55,173 - #38 ;
INFO  03:48:55,174 - #49 bodovi
INFO  03:48:55,174 - #27 =
INFO  03:48:55,174 - #49 bodovi
INFO  03:48:55,174 - #24 *
INFO  03:48:55,174 - #49 pet
INFO  03:48:55,174 - #38 ;
INFO  03:48:55,174 - #49 bodovi
INFO  03:48:55,174 - #37 --
INFO  03:48:55,174 - #38 ;
INFO  03:48:55,174 - #12 print
INFO  03:48:55,175 - #40 (
INFO  03:48:55,175 - #49 bodovi
INFO  03:48:55,175 - #41 )
INFO  03:48:55,175 - #38 ;
INFO  03:48:55,175 - #49 niz
INFO  03:48:55,175 - #27 =
INFO  03:48:55,175 - #11 new
INFO  03:48:55,175 - #49 int
INFO  03:48:55,175 - #42 [
INFO  03:48:55,175 - #52 3
INFO  03:48:55,175 - #43 ]
INFO  03:48:55,175 - #38 ;
INFO  03:48:55,175 - #49 niz
INFO  03:48:55,175 - #42 [
INFO  03:48:55,175 - #49 nula
INFO  03:48:55,175 - #43 ]
INFO  03:48:55,175 - #27 =
INFO  03:48:55,175 - #49 jedan
INFO  03:48:55,176 - #38 ;
INFO  03:48:55,176 - #49 niz
INFO  03:48:55,176 - #42 [
INFO  03:48:55,176 - #52 1
INFO  03:48:55,176 - #43 ]
INFO  03:48:55,176 - #27 =
INFO  03:48:55,176 - #52 2
INFO  03:48:55,176 - #38 ;
INFO  03:48:55,176 - #49 niz
INFO  03:48:55,176 - #42 [
INFO  03:48:55,176 - #49 niz
INFO  03:48:55,176 - #42 [
INFO  03:48:55,176 - #49 jedan
INFO  03:48:55,176 - #43 ]
INFO  03:48:55,176 - #43 ]
INFO  03:48:55,176 - #27 =
INFO  03:48:55,176 - #49 niz
INFO  03:48:55,176 - #42 [
INFO  03:48:55,176 - #49 niz
INFO  03:48:55,176 - #42 [
INFO  03:48:55,176 - #52 0
INFO  03:48:55,176 - #43 ]
INFO  03:48:55,176 - #43 ]
INFO  03:48:55,176 - #24 *
INFO  03:48:55,176 - #52 3
INFO  03:48:55,176 - #38 ;
INFO  03:48:55,176 - #49 bodovi
INFO  03:48:55,177 - #27 =
INFO  03:48:55,177 - #49 niz
INFO  03:48:55,177 - #42 [
INFO  03:48:55,177 - #52 2
INFO  03:48:55,177 - #43 ]
INFO  03:48:55,177 - #25 /
INFO  03:48:55,177 - #49 niz
INFO  03:48:55,177 - #42 [
INFO  03:48:55,177 - #52 0
INFO  03:48:55,177 - #43 ]
INFO  03:48:55,177 - #38 ;
INFO  03:48:55,177 - #12 print
INFO  03:48:55,177 - #40 (
INFO  03:48:55,177 - #49 bodovi
INFO  03:48:55,177 - #41 )
INFO  03:48:55,177 - #38 ;
INFO  03:48:55,177 - #12 print
INFO  03:48:55,177 - #40 (
INFO  03:48:55,177 - #49 niz
INFO  03:48:55,177 - #42 [
INFO  03:48:55,177 - #52 2
INFO  03:48:55,177 - #43 ]
INFO  03:48:55,177 - #41 )
INFO  03:48:55,177 - #38 ;
INFO  03:48:55,177 - #49 nizch
INFO  03:48:55,178 - #27 =
INFO  03:48:55,178 - #11 new
INFO  03:48:55,178 - #49 char
INFO  03:48:55,178 - #42 [
INFO  03:48:55,178 - #52 3
INFO  03:48:55,178 - #43 ]
INFO  03:48:55,178 - #38 ;
INFO  03:48:55,178 - #49 nizch
INFO  03:48:55,178 - #42 [
INFO  03:48:55,178 - #52 0
INFO  03:48:55,178 - #43 ]
INFO  03:48:55,178 - #27 =
INFO  03:48:55,178 - #51 a
INFO  03:48:55,178 - #38 ;
INFO  03:48:55,178 - #49 nizch
INFO  03:48:55,178 - #42 [
INFO  03:48:55,178 - #49 jedan
INFO  03:48:55,178 - #43 ]
INFO  03:48:55,178 - #27 =
INFO  03:48:55,178 - #51 b
INFO  03:48:55,178 - #38 ;
INFO  03:48:55,178 - #49 nizch
INFO  03:48:55,178 - #42 [
INFO  03:48:55,178 - #49 pet
INFO  03:48:55,178 - #23 -
INFO  03:48:55,178 - #52 3
INFO  03:48:55,178 - #43 ]
INFO  03:48:55,178 - #27 =
INFO  03:48:55,178 - #51 c
INFO  03:48:55,178 - #38 ;
INFO  03:48:55,178 - #12 print
INFO  03:48:55,178 - #40 (
INFO  03:48:55,178 - #49 nizch
INFO  03:48:55,178 - #42 [
INFO  03:48:55,178 - #52 1
INFO  03:48:55,178 - #43 ]
INFO  03:48:55,178 - #41 )
INFO  03:48:55,179 - #38 ;
INFO  03:48:55,179 - #12 print
INFO  03:48:55,179 - #40 (
INFO  03:48:55,179 - #49 nizch
INFO  03:48:55,179 - #42 [
INFO  03:48:55,179 - #49 jedan
INFO  03:48:55,179 - #24 *
INFO  03:48:55,179 - #52 2
INFO  03:48:55,179 - #43 ]
INFO  03:48:55,179 - #41 )
INFO  03:48:55,179 - #38 ;
INFO  03:48:55,179 - #49 bodovi
INFO  03:48:55,179 - #27 =
INFO  03:48:55,179 - #49 bodovi
INFO  03:48:55,179 - #22 +
INFO  03:48:55,179 - #40 (
INFO  03:48:55,179 - #49 pet
INFO  03:48:55,179 - #24 *
INFO  03:48:55,179 - #49 jedan
INFO  03:48:55,179 - #23 -
INFO  03:48:55,179 - #52 1
INFO  03:48:55,179 - #41 )
INFO  03:48:55,179 - #24 *
INFO  03:48:55,179 - #49 bodovi
INFO  03:48:55,179 - #23 -
INFO  03:48:55,179 - #40 (
INFO  03:48:55,179 - #52 3
INFO  03:48:55,179 - #26 %
INFO  03:48:55,179 - #52 2
INFO  03:48:55,179 - #22 +
INFO  03:48:55,179 - #52 3
INFO  03:48:55,179 - #24 *
INFO  03:48:55,179 - #52 2
INFO  03:48:55,179 - #23 -
INFO  03:48:55,179 - #52 3
INFO  03:48:55,179 - #41 )
INFO  03:48:55,180 - #38 ;
INFO  03:48:55,180 - #12 print
INFO  03:48:55,180 - #40 (
INFO  03:48:55,180 - #49 bodovi
INFO  03:48:55,180 - #41 )
INFO  03:48:55,180 - #38 ;
INFO  03:48:55,180 - #45 }
INFO  03:48:55,180 - #45 }
INFO  03:48:55,184 - Line 17: Using local variable name: bodovi
INFO  03:48:55,184 - Line 18: Using local variable name: bodovi
INFO  03:48:55,184 - Line 19: Using local variable name: bodovi
INFO  03:48:55,184 - Line 19: Using local variable name: bodovi
INFO  03:48:55,184 - Line 20: Using local variable name: bodovi
INFO  03:48:55,184 - Line 20: Using local variable name: bodovi
INFO  03:48:55,184 - Line 21: Using local variable name: bodovi
INFO  03:48:55,184 - Line 22: Using local variable name: bodovi
INFO  03:48:55,184 - Line 25: Using global variable name: niz
INFO  03:48:55,184 - Line 26: Using global variable name: niz
INFO  03:48:55,184 - Line 26: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 27: Using global variable name: niz
INFO  03:48:55,184 - Line 27: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 28: Using global variable name: niz
INFO  03:48:55,184 - Line 28: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 28: Using global variable name: niz
INFO  03:48:55,184 - Line 28: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 28: Using global variable name: niz
INFO  03:48:55,184 - Line 28: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 28: Using global variable name: niz
INFO  03:48:55,184 - Line 28: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 29: Using local variable name: bodovi
INFO  03:48:55,184 - Line 29: Using global variable name: niz
INFO  03:48:55,184 - Line 29: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 29: Using global variable name: niz
INFO  03:48:55,184 - Line 29: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 30: Using local variable name: bodovi
INFO  03:48:55,184 - Line 31: Using global variable name: niz
INFO  03:48:55,184 - Line 31: Access to array element detected. Array name: niz
INFO  03:48:55,184 - Line 34: Using global variable name: nizch
INFO  03:48:55,184 - Line 35: Using global variable name: nizch
INFO  03:48:55,184 - Line 35: Access to array element detected. Array name: nizch
INFO  03:48:55,184 - Line 36: Using global variable name: nizch
INFO  03:48:55,184 - Line 36: Access to array element detected. Array name: nizch
INFO  03:48:55,184 - Line 37: Using global variable name: nizch
INFO  03:48:55,184 - Line 37: Access to array element detected. Array name: nizch
INFO  03:48:55,184 - Line 38: Using global variable name: nizch
INFO  03:48:55,184 - Line 38: Access to array element detected. Array name: nizch
INFO  03:48:55,184 - Line 39: Using global variable name: nizch
INFO  03:48:55,184 - Line 39: Access to array element detected. Array name: nizch
INFO  03:48:55,184 - Line 42: Using local variable name: bodovi
INFO  03:48:55,184 - Line 42: Using local variable name: bodovi
INFO  03:48:55,185 - Line 42: Using local variable name: bodovi
INFO  03:48:55,185 - Line 43: Using local variable name: bodovi
INFO  03:48:55,186 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:54:00,627 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:54:00,646 - #2 program
INFO  03:54:00,646 - #49 test301
INFO  03:54:00,646 - #7 const
INFO  03:54:00,646 - #49 int
INFO  03:54:00,646 - #49 nula
INFO  03:54:00,647 - #27 =
INFO  03:54:00,647 - #52 0
INFO  03:54:00,647 - #38 ;
INFO  03:54:00,647 - #7 const
INFO  03:54:00,647 - #49 int
INFO  03:54:00,647 - #49 jedan
INFO  03:54:00,647 - #27 =
INFO  03:54:00,647 - #52 1
INFO  03:54:00,647 - #38 ;
INFO  03:54:00,647 - #7 const
INFO  03:54:00,647 - #49 int
INFO  03:54:00,647 - #49 pet
INFO  03:54:00,647 - #27 =
INFO  03:54:00,647 - #52 5
INFO  03:54:00,648 - #38 ;
INFO  03:54:00,648 - #49 int
INFO  03:54:00,648 - #49 niz
INFO  03:54:00,648 - #42 [
INFO  03:54:00,648 - #43 ]
INFO  03:54:00,648 - #38 ;
INFO  03:54:00,648 - #49 char
INFO  03:54:00,648 - #49 nizch
INFO  03:54:00,648 - #42 [
INFO  03:54:00,648 - #43 ]
INFO  03:54:00,648 - #38 ;
INFO  03:54:00,648 - #44 {
INFO  03:54:00,649 - #14 void
INFO  03:54:00,649 - #49 main
INFO  03:54:00,649 - #40 (
INFO  03:54:00,649 - #41 )
INFO  03:54:00,649 - #49 int
INFO  03:54:00,650 - #49 bodovi
INFO  03:54:00,650 - #38 ;
INFO  03:54:00,650 - #49 bool
INFO  03:54:00,650 - #49 bt
INFO  03:54:00,650 - #38 ;
INFO  03:54:00,650 - #44 {
INFO  03:54:00,650 - #49 bodovi
INFO  03:54:00,651 - #27 =
INFO  03:54:00,651 - #52 0
INFO  03:54:00,651 - #38 ;
INFO  03:54:00,651 - #49 bodovi
INFO  03:54:00,651 - #36 ++
INFO  03:54:00,651 - #38 ;
INFO  03:54:00,651 - #49 bodovi
INFO  03:54:00,651 - #27 =
INFO  03:54:00,651 - #49 bodovi
INFO  03:54:00,651 - #22 +
INFO  03:54:00,651 - #49 jedan
INFO  03:54:00,652 - #38 ;
INFO  03:54:00,652 - #49 bodovi
INFO  03:54:00,652 - #27 =
INFO  03:54:00,652 - #49 bodovi
INFO  03:54:00,652 - #24 *
INFO  03:54:00,652 - #49 pet
INFO  03:54:00,652 - #38 ;
INFO  03:54:00,652 - #49 bodovi
INFO  03:54:00,652 - #37 --
INFO  03:54:00,652 - #38 ;
INFO  03:54:00,652 - #12 print
INFO  03:54:00,652 - #40 (
INFO  03:54:00,652 - #49 bodovi
INFO  03:54:00,652 - #41 )
INFO  03:54:00,653 - #38 ;
INFO  03:54:00,653 - #49 niz
INFO  03:54:00,653 - #27 =
INFO  03:54:00,653 - #11 new
INFO  03:54:00,653 - #49 int
INFO  03:54:00,653 - #42 [
INFO  03:54:00,653 - #52 3
INFO  03:54:00,653 - #43 ]
INFO  03:54:00,653 - #38 ;
INFO  03:54:00,653 - #49 niz
INFO  03:54:00,653 - #42 [
INFO  03:54:00,653 - #49 nula
INFO  03:54:00,653 - #43 ]
INFO  03:54:00,653 - #27 =
INFO  03:54:00,653 - #49 jedan
INFO  03:54:00,653 - #38 ;
INFO  03:54:00,653 - #49 niz
INFO  03:54:00,653 - #42 [
INFO  03:54:00,653 - #52 1
INFO  03:54:00,653 - #43 ]
INFO  03:54:00,653 - #27 =
INFO  03:54:00,653 - #52 2
INFO  03:54:00,654 - #38 ;
INFO  03:54:00,654 - #49 niz
INFO  03:54:00,654 - #42 [
INFO  03:54:00,654 - #49 niz
INFO  03:54:00,654 - #42 [
INFO  03:54:00,654 - #49 jedan
INFO  03:54:00,654 - #43 ]
INFO  03:54:00,654 - #43 ]
INFO  03:54:00,654 - #27 =
INFO  03:54:00,654 - #49 niz
INFO  03:54:00,654 - #42 [
INFO  03:54:00,654 - #49 niz
INFO  03:54:00,654 - #42 [
INFO  03:54:00,654 - #52 0
INFO  03:54:00,654 - #43 ]
INFO  03:54:00,654 - #43 ]
INFO  03:54:00,654 - #24 *
INFO  03:54:00,654 - #52 3
INFO  03:54:00,654 - #38 ;
INFO  03:54:00,654 - #49 bodovi
INFO  03:54:00,654 - #27 =
INFO  03:54:00,654 - #49 niz
INFO  03:54:00,654 - #42 [
INFO  03:54:00,654 - #52 2
INFO  03:54:00,654 - #43 ]
INFO  03:54:00,654 - #25 /
INFO  03:54:00,654 - #49 niz
INFO  03:54:00,655 - #42 [
INFO  03:54:00,655 - #52 0
INFO  03:54:00,655 - #43 ]
INFO  03:54:00,655 - #38 ;
INFO  03:54:00,655 - #12 print
INFO  03:54:00,655 - #40 (
INFO  03:54:00,655 - #49 bodovi
INFO  03:54:00,655 - #41 )
INFO  03:54:00,655 - #38 ;
INFO  03:54:00,655 - #12 print
INFO  03:54:00,655 - #40 (
INFO  03:54:00,655 - #49 niz
INFO  03:54:00,655 - #42 [
INFO  03:54:00,655 - #52 2
INFO  03:54:00,655 - #43 ]
INFO  03:54:00,655 - #41 )
INFO  03:54:00,655 - #38 ;
INFO  03:54:00,655 - #49 nizch
INFO  03:54:00,655 - #27 =
INFO  03:54:00,655 - #11 new
INFO  03:54:00,655 - #49 char
INFO  03:54:00,655 - #42 [
INFO  03:54:00,655 - #52 3
INFO  03:54:00,655 - #43 ]
INFO  03:54:00,655 - #38 ;
INFO  03:54:00,655 - #49 nizch
INFO  03:54:00,655 - #42 [
INFO  03:54:00,655 - #52 0
INFO  03:54:00,655 - #43 ]
INFO  03:54:00,655 - #27 =
INFO  03:54:00,656 - #51 a
INFO  03:54:00,656 - #38 ;
INFO  03:54:00,656 - #49 nizch
INFO  03:54:00,656 - #42 [
INFO  03:54:00,656 - #49 jedan
INFO  03:54:00,656 - #43 ]
INFO  03:54:00,656 - #27 =
INFO  03:54:00,656 - #51 b
INFO  03:54:00,656 - #38 ;
INFO  03:54:00,656 - #49 nizch
INFO  03:54:00,656 - #42 [
INFO  03:54:00,656 - #49 pet
INFO  03:54:00,656 - #23 -
INFO  03:54:00,656 - #52 3
INFO  03:54:00,656 - #43 ]
INFO  03:54:00,656 - #27 =
INFO  03:54:00,656 - #51 c
INFO  03:54:00,656 - #38 ;
INFO  03:54:00,656 - #12 print
INFO  03:54:00,656 - #40 (
INFO  03:54:00,656 - #49 nizch
INFO  03:54:00,656 - #42 [
INFO  03:54:00,656 - #52 1
INFO  03:54:00,656 - #43 ]
INFO  03:54:00,656 - #41 )
INFO  03:54:00,656 - #38 ;
INFO  03:54:00,656 - #12 print
INFO  03:54:00,656 - #40 (
INFO  03:54:00,656 - #49 nizch
INFO  03:54:00,656 - #42 [
INFO  03:54:00,656 - #49 jedan
INFO  03:54:00,656 - #24 *
INFO  03:54:00,656 - #52 2
INFO  03:54:00,656 - #43 ]
INFO  03:54:00,656 - #41 )
INFO  03:54:00,656 - #38 ;
INFO  03:54:00,656 - #49 bodovi
INFO  03:54:00,657 - #27 =
INFO  03:54:00,657 - #49 bodovi
INFO  03:54:00,657 - #22 +
INFO  03:54:00,657 - #40 (
INFO  03:54:00,657 - #49 pet
INFO  03:54:00,657 - #24 *
INFO  03:54:00,657 - #49 jedan
INFO  03:54:00,657 - #23 -
INFO  03:54:00,657 - #52 1
INFO  03:54:00,657 - #41 )
INFO  03:54:00,657 - #24 *
INFO  03:54:00,657 - #49 bodovi
INFO  03:54:00,657 - #23 -
INFO  03:54:00,657 - #40 (
INFO  03:54:00,657 - #52 3
INFO  03:54:00,657 - #26 %
INFO  03:54:00,657 - #52 2
INFO  03:54:00,657 - #22 +
INFO  03:54:00,657 - #52 3
INFO  03:54:00,657 - #24 *
INFO  03:54:00,657 - #52 2
INFO  03:54:00,657 - #23 -
INFO  03:54:00,657 - #52 3
INFO  03:54:00,657 - #41 )
INFO  03:54:00,657 - #38 ;
INFO  03:54:00,657 - #12 print
INFO  03:54:00,657 - #40 (
INFO  03:54:00,657 - #49 bodovi
INFO  03:54:00,657 - #41 )
INFO  03:54:00,657 - #38 ;
INFO  03:54:00,657 - #45 }
INFO  03:54:00,657 - #45 }
INFO  03:54:00,662 - Line 17: Using local variable name: bodovi
INFO  03:54:00,662 - Line 18: Using local variable name: bodovi
INFO  03:54:00,662 - Line 19: Using local variable name: bodovi
INFO  03:54:00,662 - Line 19: Using local variable name: bodovi
INFO  03:54:00,662 - Line 20: Using local variable name: bodovi
INFO  03:54:00,662 - Line 20: Using local variable name: bodovi
INFO  03:54:00,662 - Line 21: Using local variable name: bodovi
INFO  03:54:00,662 - Line 22: Using local variable name: bodovi
INFO  03:54:00,662 - Line 25: Using global variable name: niz
INFO  03:54:00,662 - Line 26: Using global variable name: niz
INFO  03:54:00,662 - Line 26: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 27: Using global variable name: niz
INFO  03:54:00,662 - Line 27: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 28: Using global variable name: niz
INFO  03:54:00,662 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 28: Using global variable name: niz
INFO  03:54:00,662 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 28: Using global variable name: niz
INFO  03:54:00,662 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 28: Using global variable name: niz
INFO  03:54:00,662 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 29: Using local variable name: bodovi
INFO  03:54:00,662 - Line 29: Using global variable name: niz
INFO  03:54:00,662 - Line 29: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 29: Using global variable name: niz
INFO  03:54:00,662 - Line 29: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 30: Using local variable name: bodovi
INFO  03:54:00,662 - Line 31: Using global variable name: niz
INFO  03:54:00,662 - Line 31: Access to array element detected. Array name: niz
INFO  03:54:00,662 - Line 34: Using global variable name: nizch
INFO  03:54:00,662 - Line 35: Using global variable name: nizch
INFO  03:54:00,662 - Line 35: Access to array element detected. Array name: nizch
INFO  03:54:00,662 - Line 36: Using global variable name: nizch
INFO  03:54:00,662 - Line 36: Access to array element detected. Array name: nizch
INFO  03:54:00,662 - Line 37: Using global variable name: nizch
INFO  03:54:00,662 - Line 37: Access to array element detected. Array name: nizch
INFO  03:54:00,662 - Line 38: Using global variable name: nizch
INFO  03:54:00,662 - Line 38: Access to array element detected. Array name: nizch
INFO  03:54:00,662 - Line 39: Using global variable name: nizch
INFO  03:54:00,662 - Line 39: Access to array element detected. Array name: nizch
INFO  03:54:00,662 - Line 42: Using local variable name: bodovi
INFO  03:54:00,662 - Line 42: Using local variable name: bodovi
INFO  03:54:00,662 - Line 42: Using local variable name: bodovi
INFO  03:54:00,662 - Line 43: Using local variable name: bodovi
INFO  03:54:00,664 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:54:10,278 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:54:10,298 - #2 program
INFO  03:54:10,298 - #49 test301
INFO  03:54:10,298 - #7 const
INFO  03:54:10,298 - #49 int
INFO  03:54:10,298 - #49 nula
INFO  03:54:10,299 - #27 =
INFO  03:54:10,299 - #52 0
INFO  03:54:10,299 - #38 ;
INFO  03:54:10,299 - #7 const
INFO  03:54:10,299 - #49 int
INFO  03:54:10,299 - #49 jedan
INFO  03:54:10,299 - #27 =
INFO  03:54:10,299 - #52 1
INFO  03:54:10,299 - #38 ;
INFO  03:54:10,299 - #7 const
INFO  03:54:10,299 - #49 int
INFO  03:54:10,299 - #49 pet
INFO  03:54:10,299 - #27 =
INFO  03:54:10,299 - #52 5
INFO  03:54:10,299 - #38 ;
INFO  03:54:10,300 - #49 int
INFO  03:54:10,300 - #49 niz
INFO  03:54:10,300 - #42 [
INFO  03:54:10,300 - #43 ]
INFO  03:54:10,300 - #38 ;
INFO  03:54:10,300 - #49 char
INFO  03:54:10,300 - #49 nizch
INFO  03:54:10,300 - #42 [
INFO  03:54:10,300 - #43 ]
INFO  03:54:10,300 - #38 ;
INFO  03:54:10,300 - #44 {
INFO  03:54:10,300 - #14 void
INFO  03:54:10,301 - #49 main
INFO  03:54:10,301 - #40 (
INFO  03:54:10,301 - #41 )
INFO  03:54:10,301 - #49 int
INFO  03:54:10,301 - #49 bodovi
INFO  03:54:10,301 - #38 ;
INFO  03:54:10,302 - #49 bool
INFO  03:54:10,302 - #49 bt
INFO  03:54:10,302 - #38 ;
INFO  03:54:10,302 - #44 {
INFO  03:54:10,302 - #49 bodovi
INFO  03:54:10,302 - #27 =
INFO  03:54:10,302 - #52 0
INFO  03:54:10,302 - #38 ;
INFO  03:54:10,302 - #49 bodovi
INFO  03:54:10,303 - #36 ++
INFO  03:54:10,303 - #38 ;
INFO  03:54:10,303 - #49 bodovi
INFO  03:54:10,303 - #27 =
INFO  03:54:10,303 - #49 bodovi
INFO  03:54:10,303 - #22 +
INFO  03:54:10,303 - #49 jedan
INFO  03:54:10,303 - #38 ;
INFO  03:54:10,303 - #49 bodovi
INFO  03:54:10,303 - #27 =
INFO  03:54:10,303 - #49 bodovi
INFO  03:54:10,303 - #24 *
INFO  03:54:10,303 - #49 pet
INFO  03:54:10,304 - #38 ;
INFO  03:54:10,304 - #49 bodovi
INFO  03:54:10,304 - #37 --
INFO  03:54:10,304 - #38 ;
INFO  03:54:10,304 - #12 print
INFO  03:54:10,304 - #40 (
INFO  03:54:10,304 - #49 bodovi
INFO  03:54:10,304 - #41 )
INFO  03:54:10,305 - #38 ;
INFO  03:54:10,305 - #49 niz
INFO  03:54:10,305 - #27 =
INFO  03:54:10,305 - #11 new
INFO  03:54:10,305 - #49 int
INFO  03:54:10,305 - #42 [
INFO  03:54:10,305 - #52 3
INFO  03:54:10,305 - #43 ]
INFO  03:54:10,305 - #38 ;
INFO  03:54:10,305 - #49 niz
INFO  03:54:10,305 - #42 [
INFO  03:54:10,305 - #49 nula
INFO  03:54:10,305 - #43 ]
INFO  03:54:10,305 - #27 =
INFO  03:54:10,305 - #49 jedan
INFO  03:54:10,305 - #38 ;
INFO  03:54:10,305 - #49 niz
INFO  03:54:10,305 - #42 [
INFO  03:54:10,305 - #52 1
INFO  03:54:10,305 - #43 ]
INFO  03:54:10,305 - #27 =
INFO  03:54:10,306 - #52 2
INFO  03:54:10,306 - #38 ;
INFO  03:54:10,306 - #49 niz
INFO  03:54:10,306 - #42 [
INFO  03:54:10,306 - #49 niz
INFO  03:54:10,306 - #42 [
INFO  03:54:10,306 - #49 jedan
INFO  03:54:10,306 - #43 ]
INFO  03:54:10,306 - #43 ]
INFO  03:54:10,306 - #27 =
INFO  03:54:10,306 - #49 niz
INFO  03:54:10,306 - #42 [
INFO  03:54:10,306 - #49 niz
INFO  03:54:10,306 - #42 [
INFO  03:54:10,306 - #52 0
INFO  03:54:10,306 - #43 ]
INFO  03:54:10,306 - #43 ]
INFO  03:54:10,306 - #24 *
INFO  03:54:10,306 - #52 3
INFO  03:54:10,306 - #38 ;
INFO  03:54:10,306 - #49 bodovi
INFO  03:54:10,306 - #27 =
INFO  03:54:10,306 - #49 niz
INFO  03:54:10,306 - #42 [
INFO  03:54:10,306 - #52 2
INFO  03:54:10,306 - #43 ]
INFO  03:54:10,306 - #25 /
INFO  03:54:10,306 - #49 niz
INFO  03:54:10,307 - #42 [
INFO  03:54:10,307 - #52 0
INFO  03:54:10,307 - #43 ]
INFO  03:54:10,307 - #38 ;
INFO  03:54:10,307 - #12 print
INFO  03:54:10,307 - #40 (
INFO  03:54:10,307 - #49 bodovi
INFO  03:54:10,307 - #41 )
INFO  03:54:10,307 - #38 ;
INFO  03:54:10,307 - #12 print
INFO  03:54:10,307 - #40 (
INFO  03:54:10,307 - #49 niz
INFO  03:54:10,307 - #42 [
INFO  03:54:10,307 - #52 2
INFO  03:54:10,307 - #43 ]
INFO  03:54:10,307 - #41 )
INFO  03:54:10,307 - #38 ;
INFO  03:54:10,307 - #49 nizch
INFO  03:54:10,307 - #27 =
INFO  03:54:10,307 - #11 new
INFO  03:54:10,307 - #49 char
INFO  03:54:10,307 - #42 [
INFO  03:54:10,307 - #52 3
INFO  03:54:10,307 - #43 ]
INFO  03:54:10,307 - #38 ;
INFO  03:54:10,307 - #49 nizch
INFO  03:54:10,308 - #42 [
INFO  03:54:10,308 - #52 0
INFO  03:54:10,308 - #43 ]
INFO  03:54:10,308 - #27 =
INFO  03:54:10,308 - #51 a
INFO  03:54:10,308 - #38 ;
INFO  03:54:10,308 - #49 nizch
INFO  03:54:10,308 - #42 [
INFO  03:54:10,308 - #49 jedan
INFO  03:54:10,308 - #43 ]
INFO  03:54:10,308 - #27 =
INFO  03:54:10,308 - #51 b
INFO  03:54:10,308 - #38 ;
INFO  03:54:10,308 - #49 nizch
INFO  03:54:10,308 - #42 [
INFO  03:54:10,308 - #49 pet
INFO  03:54:10,308 - #23 -
INFO  03:54:10,308 - #52 3
INFO  03:54:10,308 - #43 ]
INFO  03:54:10,308 - #27 =
INFO  03:54:10,308 - #51 c
INFO  03:54:10,308 - #38 ;
INFO  03:54:10,308 - #12 print
INFO  03:54:10,308 - #40 (
INFO  03:54:10,308 - #49 nizch
INFO  03:54:10,308 - #42 [
INFO  03:54:10,308 - #52 1
INFO  03:54:10,308 - #43 ]
INFO  03:54:10,308 - #41 )
INFO  03:54:10,308 - #38 ;
INFO  03:54:10,308 - #12 print
INFO  03:54:10,308 - #40 (
INFO  03:54:10,308 - #49 nizch
INFO  03:54:10,308 - #42 [
INFO  03:54:10,308 - #49 jedan
INFO  03:54:10,308 - #24 *
INFO  03:54:10,309 - #52 2
INFO  03:54:10,309 - #43 ]
INFO  03:54:10,309 - #41 )
INFO  03:54:10,309 - #38 ;
INFO  03:54:10,309 - #49 bodovi
INFO  03:54:10,309 - #27 =
INFO  03:54:10,309 - #49 bodovi
INFO  03:54:10,309 - #22 +
INFO  03:54:10,309 - #40 (
INFO  03:54:10,309 - #49 pet
INFO  03:54:10,309 - #24 *
INFO  03:54:10,309 - #49 jedan
INFO  03:54:10,309 - #23 -
INFO  03:54:10,309 - #52 1
INFO  03:54:10,309 - #41 )
INFO  03:54:10,309 - #24 *
INFO  03:54:10,309 - #49 bodovi
INFO  03:54:10,309 - #23 -
INFO  03:54:10,309 - #40 (
INFO  03:54:10,309 - #52 3
INFO  03:54:10,309 - #26 %
INFO  03:54:10,309 - #52 2
INFO  03:54:10,309 - #22 +
INFO  03:54:10,309 - #52 3
INFO  03:54:10,309 - #24 *
INFO  03:54:10,310 - #52 2
INFO  03:54:10,310 - #23 -
INFO  03:54:10,310 - #52 3
INFO  03:54:10,310 - #41 )
INFO  03:54:10,310 - #38 ;
INFO  03:54:10,310 - #12 print
INFO  03:54:10,310 - #40 (
INFO  03:54:10,310 - #49 bodovi
INFO  03:54:10,310 - #41 )
INFO  03:54:10,310 - #38 ;
INFO  03:54:10,310 - #45 }
INFO  03:54:10,310 - #45 }
INFO  03:54:10,314 - Line 17: Using local variable name: bodovi
INFO  03:54:10,314 - Line 18: Using local variable name: bodovi
INFO  03:54:10,314 - Line 19: Using local variable name: bodovi
INFO  03:54:10,314 - Line 19: Using local variable name: bodovi
INFO  03:54:10,314 - Line 20: Using local variable name: bodovi
INFO  03:54:10,314 - Line 20: Using local variable name: bodovi
INFO  03:54:10,314 - Line 21: Using local variable name: bodovi
INFO  03:54:10,314 - Line 22: Using local variable name: bodovi
INFO  03:54:10,314 - Line 25: Using global variable name: niz
INFO  03:54:10,314 - Line 26: Using global variable name: niz
INFO  03:54:10,314 - Line 26: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 27: Using global variable name: niz
INFO  03:54:10,314 - Line 27: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 28: Using global variable name: niz
INFO  03:54:10,314 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 28: Using global variable name: niz
INFO  03:54:10,314 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 28: Using global variable name: niz
INFO  03:54:10,314 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 28: Using global variable name: niz
INFO  03:54:10,314 - Line 28: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 29: Using local variable name: bodovi
INFO  03:54:10,314 - Line 29: Using global variable name: niz
INFO  03:54:10,314 - Line 29: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 29: Using global variable name: niz
INFO  03:54:10,314 - Line 29: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 30: Using local variable name: bodovi
INFO  03:54:10,314 - Line 31: Using global variable name: niz
INFO  03:54:10,314 - Line 31: Access to array element detected. Array name: niz
INFO  03:54:10,314 - Line 34: Using global variable name: nizch
INFO  03:54:10,314 - Line 35: Using global variable name: nizch
INFO  03:54:10,314 - Line 35: Access to array element detected. Array name: nizch
INFO  03:54:10,314 - Line 36: Using global variable name: nizch
INFO  03:54:10,314 - Line 36: Access to array element detected. Array name: nizch
INFO  03:54:10,314 - Line 37: Using global variable name: nizch
INFO  03:54:10,314 - Line 37: Access to array element detected. Array name: nizch
INFO  03:54:10,314 - Line 38: Using global variable name: nizch
INFO  03:54:10,314 - Line 38: Access to array element detected. Array name: nizch
INFO  03:54:10,314 - Line 39: Using global variable name: nizch
INFO  03:54:10,315 - Line 39: Access to array element detected. Array name: nizch
INFO  03:54:10,315 - Line 42: Using local variable name: bodovi
INFO  03:54:10,315 - Line 42: Using local variable name: bodovi
INFO  03:54:10,315 - Line 42: Using local variable name: bodovi
INFO  03:54:10,315 - Line 43: Using local variable name: bodovi
INFO  03:54:10,316 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:54:28,352 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:54:28,370 - #2 program
INFO  03:54:28,370 - #49 test301
INFO  03:54:28,370 - #7 const
INFO  03:54:28,371 - #49 int
INFO  03:54:28,371 - #49 nula
INFO  03:54:28,371 - #27 =
INFO  03:54:28,371 - #52 0
INFO  03:54:28,371 - #38 ;
INFO  03:54:28,371 - #7 const
INFO  03:54:28,371 - #49 int
INFO  03:54:28,371 - #49 jedan
INFO  03:54:28,371 - #27 =
INFO  03:54:28,371 - #52 1
INFO  03:54:28,372 - #38 ;
INFO  03:54:28,372 - #7 const
INFO  03:54:28,372 - #49 int
INFO  03:54:28,372 - #49 pet
INFO  03:54:28,372 - #27 =
INFO  03:54:28,372 - #52 5
INFO  03:54:28,372 - #38 ;
INFO  03:54:28,372 - #49 int
INFO  03:54:28,372 - #49 niz
INFO  03:54:28,372 - #42 [
INFO  03:54:28,372 - #43 ]
INFO  03:54:28,372 - #38 ;
INFO  03:54:28,372 - #49 char
INFO  03:54:28,372 - #49 nizch
INFO  03:54:28,373 - #42 [
INFO  03:54:28,373 - #43 ]
INFO  03:54:28,373 - #38 ;
INFO  03:54:28,373 - #44 {
INFO  03:54:28,373 - #14 void
INFO  03:54:28,373 - #49 main
INFO  03:54:28,373 - #40 (
INFO  03:54:28,373 - #41 )
INFO  03:54:28,373 - #49 int
INFO  03:54:28,373 - #49 bodovi
INFO  03:54:28,373 - #38 ;
INFO  03:54:28,374 - #49 bool
INFO  03:54:28,374 - #49 bt
INFO  03:54:28,374 - #38 ;
INFO  03:54:28,374 - #44 {
INFO  03:54:28,374 - #49 nizch
INFO  03:54:28,374 - #27 =
INFO  03:54:28,374 - #11 new
INFO  03:54:28,374 - #49 char
INFO  03:54:28,374 - #42 [
INFO  03:54:28,374 - #52 3
INFO  03:54:28,374 - #43 ]
INFO  03:54:28,375 - #38 ;
INFO  03:54:28,375 - #49 nizch
INFO  03:54:28,375 - #42 [
INFO  03:54:28,375 - #52 0
INFO  03:54:28,375 - #43 ]
INFO  03:54:28,375 - #27 =
INFO  03:54:28,375 - #51 a
INFO  03:54:28,375 - #38 ;
INFO  03:54:28,376 - #49 nizch
INFO  03:54:28,376 - #42 [
INFO  03:54:28,376 - #49 jedan
INFO  03:54:28,376 - #43 ]
INFO  03:54:28,376 - #27 =
INFO  03:54:28,376 - #51 b
INFO  03:54:28,376 - #38 ;
INFO  03:54:28,376 - #49 nizch
INFO  03:54:28,376 - #42 [
INFO  03:54:28,376 - #49 pet
INFO  03:54:28,376 - #23 -
INFO  03:54:28,376 - #52 3
INFO  03:54:28,377 - #43 ]
INFO  03:54:28,377 - #27 =
INFO  03:54:28,377 - #51 c
INFO  03:54:28,377 - #38 ;
INFO  03:54:28,377 - #12 print
INFO  03:54:28,377 - #40 (
INFO  03:54:28,377 - #49 nizch
INFO  03:54:28,377 - #42 [
INFO  03:54:28,377 - #52 1
INFO  03:54:28,377 - #43 ]
INFO  03:54:28,377 - #41 )
INFO  03:54:28,377 - #38 ;
INFO  03:54:28,377 - #12 print
INFO  03:54:28,377 - #40 (
INFO  03:54:28,377 - #49 nizch
INFO  03:54:28,377 - #42 [
INFO  03:54:28,377 - #49 jedan
INFO  03:54:28,377 - #24 *
INFO  03:54:28,377 - #52 2
INFO  03:54:28,378 - #43 ]
INFO  03:54:28,378 - #41 )
INFO  03:54:28,378 - #38 ;
INFO  03:54:28,378 - #45 }
INFO  03:54:28,378 - #45 }
INFO  03:54:28,381 - Line 17: Using global variable name: nizch
INFO  03:54:28,381 - Line 18: Using global variable name: nizch
INFO  03:54:28,381 - Line 18: Access to array element detected. Array name: nizch
INFO  03:54:28,382 - Line 19: Using global variable name: nizch
INFO  03:54:28,382 - Line 19: Access to array element detected. Array name: nizch
INFO  03:54:28,382 - Line 20: Using global variable name: nizch
INFO  03:54:28,382 - Line 20: Access to array element detected. Array name: nizch
INFO  03:54:28,382 - Line 21: Using global variable name: nizch
INFO  03:54:28,382 - Line 21: Access to array element detected. Array name: nizch
INFO  03:54:28,382 - Line 22: Using global variable name: nizch
INFO  03:54:28,382 - Line 22: Access to array element detected. Array name: nizch
INFO  03:54:28,383 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:54:40,960 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:54:40,979 - #2 program
INFO  03:54:40,979 - #49 test301
INFO  03:54:40,979 - #7 const
INFO  03:54:40,979 - #49 int
INFO  03:54:40,979 - #49 nula
INFO  03:54:40,979 - #27 =
INFO  03:54:40,979 - #52 0
INFO  03:54:40,979 - #38 ;
INFO  03:54:40,980 - #7 const
INFO  03:54:40,980 - #49 int
INFO  03:54:40,980 - #49 jedan
INFO  03:54:40,980 - #27 =
INFO  03:54:40,980 - #52 1
INFO  03:54:40,980 - #38 ;
INFO  03:54:40,980 - #7 const
INFO  03:54:40,980 - #49 int
INFO  03:54:40,980 - #49 pet
INFO  03:54:40,980 - #27 =
INFO  03:54:40,980 - #52 5
INFO  03:54:40,980 - #38 ;
INFO  03:54:40,980 - #49 int
INFO  03:54:40,980 - #49 niz
INFO  03:54:40,980 - #42 [
INFO  03:54:40,980 - #43 ]
INFO  03:54:40,980 - #38 ;
INFO  03:54:40,981 - #49 char
INFO  03:54:40,981 - #49 nizch
INFO  03:54:40,981 - #42 [
INFO  03:54:40,981 - #43 ]
INFO  03:54:40,981 - #38 ;
INFO  03:54:40,981 - #44 {
INFO  03:54:40,981 - #14 void
INFO  03:54:40,981 - #49 main
INFO  03:54:40,982 - #40 (
INFO  03:54:40,982 - #41 )
INFO  03:54:40,982 - #49 int
INFO  03:54:40,982 - #49 bodovi
INFO  03:54:40,982 - #38 ;
INFO  03:54:40,982 - #49 bool
INFO  03:54:40,983 - #49 bt
INFO  03:54:40,983 - #38 ;
INFO  03:54:40,983 - #44 {
INFO  03:54:40,983 - #49 nizch
INFO  03:54:40,983 - #27 =
INFO  03:54:40,983 - #11 new
INFO  03:54:40,983 - #49 char
INFO  03:54:40,983 - #42 [
INFO  03:54:40,983 - #52 3
INFO  03:54:40,983 - #43 ]
INFO  03:54:40,983 - #38 ;
INFO  03:54:40,983 - #49 nizch
INFO  03:54:40,984 - #42 [
INFO  03:54:40,984 - #52 0
INFO  03:54:40,984 - #43 ]
INFO  03:54:40,984 - #27 =
INFO  03:54:40,984 - #51 a
INFO  03:54:40,984 - #38 ;
INFO  03:54:40,984 - #49 nizch
INFO  03:54:40,984 - #42 [
INFO  03:54:40,984 - #49 jedan
INFO  03:54:40,984 - #43 ]
INFO  03:54:40,984 - #27 =
INFO  03:54:40,984 - #51 b
INFO  03:54:40,984 - #38 ;
INFO  03:54:40,984 - #49 nizch
INFO  03:54:40,984 - #42 [
INFO  03:54:40,984 - #49 pet
INFO  03:54:40,984 - #23 -
INFO  03:54:40,984 - #52 3
INFO  03:54:40,985 - #43 ]
INFO  03:54:40,985 - #27 =
INFO  03:54:40,985 - #51 c
INFO  03:54:40,985 - #38 ;
INFO  03:54:40,985 - #12 print
INFO  03:54:40,985 - #40 (
INFO  03:54:40,985 - #51 c
INFO  03:54:40,985 - #41 )
INFO  03:54:40,985 - #38 ;
INFO  03:54:40,985 - #12 print
INFO  03:54:40,985 - #40 (
INFO  03:54:40,985 - #49 nizch
INFO  03:54:40,985 - #42 [
INFO  03:54:40,985 - #52 1
INFO  03:54:40,985 - #43 ]
INFO  03:54:40,985 - #41 )
INFO  03:54:40,985 - #38 ;
INFO  03:54:40,986 - #12 print
INFO  03:54:40,986 - #40 (
INFO  03:54:40,986 - #49 nizch
INFO  03:54:40,986 - #42 [
INFO  03:54:40,986 - #49 jedan
INFO  03:54:40,986 - #24 *
INFO  03:54:40,986 - #52 2
INFO  03:54:40,986 - #43 ]
INFO  03:54:40,986 - #41 )
INFO  03:54:40,986 - #38 ;
INFO  03:54:40,986 - #45 }
INFO  03:54:40,986 - #45 }
INFO  03:54:40,990 - Line 17: Using global variable name: nizch
INFO  03:54:40,990 - Line 18: Using global variable name: nizch
INFO  03:54:40,990 - Line 18: Access to array element detected. Array name: nizch
INFO  03:54:40,990 - Line 19: Using global variable name: nizch
INFO  03:54:40,990 - Line 19: Access to array element detected. Array name: nizch
INFO  03:54:40,990 - Line 20: Using global variable name: nizch
INFO  03:54:40,990 - Line 20: Access to array element detected. Array name: nizch
INFO  03:54:40,990 - Line 22: Using global variable name: nizch
INFO  03:54:40,990 - Line 22: Access to array element detected. Array name: nizch
INFO  03:54:40,990 - Line 23: Using global variable name: nizch
INFO  03:54:40,990 - Line 23: Access to array element detected. Array name: nizch
INFO  03:54:40,992 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:55:00,518 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:55:00,538 - #2 program
INFO  03:55:00,538 - #49 test301
INFO  03:55:00,538 - #7 const
INFO  03:55:00,538 - #49 int
INFO  03:55:00,539 - #49 nula
INFO  03:55:00,539 - #27 =
INFO  03:55:00,539 - #52 0
INFO  03:55:00,539 - #38 ;
INFO  03:55:00,539 - #7 const
INFO  03:55:00,539 - #49 int
INFO  03:55:00,539 - #49 jedan
INFO  03:55:00,539 - #27 =
INFO  03:55:00,539 - #52 1
INFO  03:55:00,539 - #38 ;
INFO  03:55:00,539 - #7 const
INFO  03:55:00,540 - #49 int
INFO  03:55:00,540 - #49 pet
INFO  03:55:00,540 - #27 =
INFO  03:55:00,540 - #52 5
INFO  03:55:00,540 - #38 ;
INFO  03:55:00,540 - #49 int
INFO  03:55:00,540 - #49 niz
INFO  03:55:00,540 - #42 [
INFO  03:55:00,540 - #43 ]
INFO  03:55:00,540 - #38 ;
INFO  03:55:00,540 - #49 char
INFO  03:55:00,540 - #49 nizch
INFO  03:55:00,540 - #42 [
INFO  03:55:00,540 - #43 ]
INFO  03:55:00,541 - #38 ;
INFO  03:55:00,541 - #49 char
INFO  03:55:00,541 - #49 a
INFO  03:55:00,541 - #38 ;
INFO  03:55:00,541 - #44 {
INFO  03:55:00,541 - #14 void
INFO  03:55:00,541 - #49 main
INFO  03:55:00,541 - #40 (
INFO  03:55:00,541 - #41 )
INFO  03:55:00,541 - #49 int
INFO  03:55:00,542 - #49 bodovi
INFO  03:55:00,542 - #38 ;
INFO  03:55:00,542 - #49 bool
INFO  03:55:00,542 - #49 bt
INFO  03:55:00,542 - #38 ;
INFO  03:55:00,542 - #44 {
INFO  03:55:00,542 - #49 nizch
INFO  03:55:00,542 - #27 =
INFO  03:55:00,542 - #11 new
INFO  03:55:00,542 - #49 char
INFO  03:55:00,542 - #42 [
INFO  03:55:00,542 - #52 3
INFO  03:55:00,543 - #43 ]
INFO  03:55:00,543 - #38 ;
INFO  03:55:00,543 - #49 nizch
INFO  03:55:00,543 - #42 [
INFO  03:55:00,543 - #52 0
INFO  03:55:00,543 - #43 ]
INFO  03:55:00,543 - #27 =
INFO  03:55:00,543 - #51 a
INFO  03:55:00,543 - #38 ;
INFO  03:55:00,543 - #49 nizch
INFO  03:55:00,543 - #42 [
INFO  03:55:00,544 - #49 jedan
INFO  03:55:00,544 - #43 ]
INFO  03:55:00,544 - #27 =
INFO  03:55:00,544 - #51 b
INFO  03:55:00,544 - #38 ;
INFO  03:55:00,544 - #49 nizch
INFO  03:55:00,544 - #42 [
INFO  03:55:00,544 - #49 pet
INFO  03:55:00,544 - #23 -
INFO  03:55:00,544 - #52 3
INFO  03:55:00,544 - #43 ]
INFO  03:55:00,544 - #27 =
INFO  03:55:00,544 - #51 c
INFO  03:55:00,544 - #38 ;
INFO  03:55:00,544 - #49 a
INFO  03:55:00,544 - #27 =
INFO  03:55:00,544 - #51 a
INFO  03:55:00,544 - #38 ;
INFO  03:55:00,544 - #12 print
INFO  03:55:00,545 - #40 (
INFO  03:55:00,545 - #49 a
INFO  03:55:00,545 - #41 )
INFO  03:55:00,545 - #38 ;
INFO  03:55:00,545 - #12 print
INFO  03:55:00,545 - #40 (
INFO  03:55:00,545 - #49 nizch
INFO  03:55:00,545 - #42 [
INFO  03:55:00,545 - #52 1
INFO  03:55:00,545 - #43 ]
INFO  03:55:00,545 - #41 )
INFO  03:55:00,545 - #38 ;
INFO  03:55:00,545 - #12 print
INFO  03:55:00,545 - #40 (
INFO  03:55:00,545 - #49 nizch
INFO  03:55:00,545 - #42 [
INFO  03:55:00,545 - #49 jedan
INFO  03:55:00,545 - #24 *
INFO  03:55:00,545 - #52 2
INFO  03:55:00,545 - #43 ]
INFO  03:55:00,546 - #41 )
INFO  03:55:00,546 - #38 ;
INFO  03:55:00,546 - #45 }
INFO  03:55:00,546 - #45 }
INFO  03:55:00,549 - Line 18: Using global variable name: nizch
INFO  03:55:00,549 - Line 19: Using global variable name: nizch
INFO  03:55:00,549 - Line 19: Access to array element detected. Array name: nizch
INFO  03:55:00,549 - Line 20: Using global variable name: nizch
INFO  03:55:00,549 - Line 20: Access to array element detected. Array name: nizch
INFO  03:55:00,549 - Line 21: Using global variable name: nizch
INFO  03:55:00,549 - Line 21: Access to array element detected. Array name: nizch
INFO  03:55:00,549 - Line 22: Using global variable name: a
INFO  03:55:00,549 - Line 23: Using global variable name: a
INFO  03:55:00,550 - Line 24: Using global variable name: nizch
INFO  03:55:00,550 - Line 24: Access to array element detected. Array name: nizch
INFO  03:55:00,550 - Line 25: Using global variable name: nizch
INFO  03:55:00,550 - Line 25: Access to array element detected. Array name: nizch
INFO  03:55:00,551 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:55:21,267 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:55:21,285 - #2 program
INFO  03:55:21,285 - #49 test301
INFO  03:55:21,285 - #7 const
INFO  03:55:21,285 - #49 int
INFO  03:55:21,285 - #49 nula
INFO  03:55:21,285 - #27 =
INFO  03:55:21,285 - #52 0
INFO  03:55:21,286 - #38 ;
INFO  03:55:21,286 - #7 const
INFO  03:55:21,286 - #49 int
INFO  03:55:21,286 - #49 jedan
INFO  03:55:21,286 - #27 =
INFO  03:55:21,286 - #52 1
INFO  03:55:21,286 - #38 ;
INFO  03:55:21,286 - #7 const
INFO  03:55:21,286 - #49 int
INFO  03:55:21,286 - #49 pet
INFO  03:55:21,286 - #27 =
INFO  03:55:21,286 - #52 5
INFO  03:55:21,286 - #38 ;
INFO  03:55:21,286 - #49 int
INFO  03:55:21,286 - #49 niz
INFO  03:55:21,286 - #42 [
INFO  03:55:21,287 - #43 ]
INFO  03:55:21,287 - #38 ;
INFO  03:55:21,287 - #49 char
INFO  03:55:21,287 - #49 nizch
INFO  03:55:21,287 - #42 [
INFO  03:55:21,287 - #43 ]
INFO  03:55:21,287 - #38 ;
INFO  03:55:21,287 - #49 char
INFO  03:55:21,287 - #49 a
INFO  03:55:21,287 - #38 ;
INFO  03:55:21,287 - #44 {
INFO  03:55:21,288 - #14 void
INFO  03:55:21,288 - #49 main
INFO  03:55:21,288 - #40 (
INFO  03:55:21,288 - #41 )
INFO  03:55:21,288 - #49 int
INFO  03:55:21,288 - #49 bodovi
INFO  03:55:21,288 - #38 ;
INFO  03:55:21,289 - #49 bool
INFO  03:55:21,289 - #49 bt
INFO  03:55:21,289 - #38 ;
INFO  03:55:21,289 - #44 {
INFO  03:55:21,289 - #49 nizch
INFO  03:55:21,289 - #27 =
INFO  03:55:21,289 - #11 new
INFO  03:55:21,289 - #49 char
INFO  03:55:21,289 - #42 [
INFO  03:55:21,289 - #52 3
INFO  03:55:21,289 - #43 ]
INFO  03:55:21,290 - #38 ;
INFO  03:55:21,290 - #49 nizch
INFO  03:55:21,290 - #42 [
INFO  03:55:21,290 - #52 0
INFO  03:55:21,290 - #43 ]
INFO  03:55:21,290 - #27 =
INFO  03:55:21,290 - #51 a
INFO  03:55:21,290 - #38 ;
INFO  03:55:21,290 - #12 print
INFO  03:55:21,291 - #40 (
INFO  03:55:21,291 - #49 nizch
INFO  03:55:21,291 - #42 [
INFO  03:55:21,291 - #52 0
INFO  03:55:21,291 - #43 ]
INFO  03:55:21,291 - #41 )
INFO  03:55:21,291 - #38 ;
INFO  03:55:21,291 - #12 print
INFO  03:55:21,291 - #40 (
INFO  03:55:21,291 - #49 nizch
INFO  03:55:21,291 - #42 [
INFO  03:55:21,291 - #49 jedan
INFO  03:55:21,291 - #24 *
INFO  03:55:21,291 - #52 2
INFO  03:55:21,292 - #43 ]
INFO  03:55:21,292 - #41 )
INFO  03:55:21,292 - #38 ;
INFO  03:55:21,292 - #45 }
INFO  03:55:21,292 - #45 }
INFO  03:55:21,295 - Line 18: Using global variable name: nizch
INFO  03:55:21,295 - Line 19: Using global variable name: nizch
INFO  03:55:21,295 - Line 19: Access to array element detected. Array name: nizch
INFO  03:55:21,295 - Line 20: Using global variable name: nizch
INFO  03:55:21,295 - Line 20: Access to array element detected. Array name: nizch
INFO  03:55:21,295 - Line 21: Using global variable name: nizch
INFO  03:55:21,295 - Line 21: Access to array element detected. Array name: nizch
INFO  03:55:21,296 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:56:09,654 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:56:09,673 - #2 program
INFO  03:56:09,673 - #49 test301
INFO  03:56:09,673 - #7 const
INFO  03:56:09,673 - #49 int
INFO  03:56:09,673 - #49 nula
INFO  03:56:09,673 - #27 =
INFO  03:56:09,673 - #52 0
INFO  03:56:09,673 - #38 ;
INFO  03:56:09,674 - #7 const
INFO  03:56:09,674 - #49 int
INFO  03:56:09,674 - #49 jedan
INFO  03:56:09,674 - #27 =
INFO  03:56:09,674 - #52 1
INFO  03:56:09,674 - #38 ;
INFO  03:56:09,674 - #7 const
INFO  03:56:09,674 - #49 int
INFO  03:56:09,674 - #49 pet
INFO  03:56:09,674 - #27 =
INFO  03:56:09,674 - #52 5
INFO  03:56:09,674 - #38 ;
INFO  03:56:09,674 - #49 int
INFO  03:56:09,674 - #49 niz
INFO  03:56:09,674 - #42 [
INFO  03:56:09,674 - #43 ]
INFO  03:56:09,674 - #38 ;
INFO  03:56:09,675 - #49 char
INFO  03:56:09,675 - #49 nizch
INFO  03:56:09,675 - #42 [
INFO  03:56:09,675 - #43 ]
INFO  03:56:09,675 - #38 ;
INFO  03:56:09,675 - #49 char
INFO  03:56:09,675 - #49 a
INFO  03:56:09,675 - #38 ;
INFO  03:56:09,675 - #44 {
INFO  03:56:09,675 - #14 void
INFO  03:56:09,676 - #49 main
INFO  03:56:09,676 - #40 (
INFO  03:56:09,676 - #41 )
INFO  03:56:09,676 - #44 {
INFO  03:56:09,676 - #49 niz
INFO  03:56:09,677 - #27 =
INFO  03:56:09,677 - #11 new
INFO  03:56:09,677 - #49 int
INFO  03:56:09,677 - #42 [
INFO  03:56:09,677 - #52 3
INFO  03:56:09,677 - #43 ]
INFO  03:56:09,677 - #38 ;
INFO  03:56:09,677 - #49 niz
INFO  03:56:09,677 - #42 [
INFO  03:56:09,678 - #52 0
INFO  03:56:09,678 - #43 ]
INFO  03:56:09,678 - #27 =
INFO  03:56:09,678 - #52 1
INFO  03:56:09,678 - #38 ;
INFO  03:56:09,678 - #12 print
INFO  03:56:09,678 - #40 (
INFO  03:56:09,678 - #49 niz
INFO  03:56:09,678 - #42 [
INFO  03:56:09,678 - #52 0
INFO  03:56:09,678 - #43 ]
INFO  03:56:09,678 - #41 )
INFO  03:56:09,678 - #38 ;
INFO  03:56:09,678 - #49 nizch
INFO  03:56:09,678 - #27 =
INFO  03:56:09,678 - #11 new
INFO  03:56:09,678 - #49 char
INFO  03:56:09,678 - #42 [
INFO  03:56:09,678 - #52 3
INFO  03:56:09,678 - #43 ]
INFO  03:56:09,678 - #38 ;
INFO  03:56:09,679 - #49 nizch
INFO  03:56:09,679 - #42 [
INFO  03:56:09,679 - #52 0
INFO  03:56:09,679 - #43 ]
INFO  03:56:09,679 - #27 =
INFO  03:56:09,679 - #51 a
INFO  03:56:09,679 - #38 ;
INFO  03:56:09,679 - #12 print
INFO  03:56:09,679 - #40 (
INFO  03:56:09,679 - #49 nizch
INFO  03:56:09,679 - #42 [
INFO  03:56:09,679 - #52 0
INFO  03:56:09,679 - #43 ]
INFO  03:56:09,679 - #41 )
INFO  03:56:09,679 - #38 ;
INFO  03:56:09,679 - #45 }
INFO  03:56:09,679 - #45 }
INFO  03:56:09,683 - Line 17: Using global variable name: niz
INFO  03:56:09,683 - Line 18: Using global variable name: niz
INFO  03:56:09,683 - Line 18: Access to array element detected. Array name: niz
INFO  03:56:09,683 - Line 19: Using global variable name: niz
INFO  03:56:09,683 - Line 19: Access to array element detected. Array name: niz
INFO  03:56:09,683 - Line 21: Using global variable name: nizch
INFO  03:56:09,683 - Line 22: Using global variable name: nizch
INFO  03:56:09,683 - Line 22: Access to array element detected. Array name: nizch
INFO  03:56:09,683 - Line 23: Using global variable name: nizch
INFO  03:56:09,683 - Line 23: Access to array element detected. Array name: nizch
INFO  03:56:09,684 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:58:34,886 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:58:34,903 - #2 program
INFO  03:58:34,903 - #49 test301
INFO  03:58:34,903 - #7 const
INFO  03:58:34,903 - #49 int
INFO  03:58:34,903 - #49 nula
INFO  03:58:34,904 - #27 =
INFO  03:58:34,904 - #52 0
INFO  03:58:34,904 - #38 ;
INFO  03:58:34,904 - #7 const
INFO  03:58:34,904 - #49 int
INFO  03:58:34,904 - #49 jedan
INFO  03:58:34,904 - #27 =
INFO  03:58:34,904 - #52 1
INFO  03:58:34,904 - #38 ;
INFO  03:58:34,904 - #7 const
INFO  03:58:34,904 - #49 int
INFO  03:58:34,905 - #49 pet
INFO  03:58:34,905 - #27 =
INFO  03:58:34,905 - #52 5
INFO  03:58:34,905 - #38 ;
INFO  03:58:34,905 - #49 int
INFO  03:58:34,905 - #49 niz
INFO  03:58:34,905 - #42 [
INFO  03:58:34,905 - #43 ]
INFO  03:58:34,905 - #38 ;
INFO  03:58:34,905 - #49 char
INFO  03:58:34,905 - #49 nizch
INFO  03:58:34,905 - #42 [
INFO  03:58:34,905 - #43 ]
INFO  03:58:34,905 - #38 ;
INFO  03:58:34,905 - #49 char
INFO  03:58:34,905 - #49 a
INFO  03:58:34,906 - #38 ;
INFO  03:58:34,906 - #44 {
INFO  03:58:34,906 - #14 void
INFO  03:58:34,906 - #49 main
INFO  03:58:34,906 - #40 (
INFO  03:58:34,906 - #41 )
INFO  03:58:34,906 - #44 {
INFO  03:58:34,906 - #49 niz
INFO  03:58:34,907 - #27 =
INFO  03:58:34,907 - #11 new
INFO  03:58:34,907 - #49 int
INFO  03:58:34,907 - #42 [
INFO  03:58:34,907 - #52 3
INFO  03:58:34,907 - #43 ]
INFO  03:58:34,907 - #38 ;
INFO  03:58:34,907 - #49 niz
INFO  03:58:34,907 - #42 [
INFO  03:58:34,908 - #52 0
INFO  03:58:34,908 - #43 ]
INFO  03:58:34,908 - #27 =
INFO  03:58:34,908 - #52 1
INFO  03:58:34,908 - #38 ;
INFO  03:58:34,908 - #12 print
INFO  03:58:34,908 - #40 (
INFO  03:58:34,908 - #49 niz
INFO  03:58:34,908 - #42 [
INFO  03:58:34,908 - #52 0
INFO  03:58:34,908 - #43 ]
INFO  03:58:34,908 - #41 )
INFO  03:58:34,908 - #38 ;
INFO  03:58:34,908 - #49 nizch
INFO  03:58:34,908 - #27 =
INFO  03:58:34,908 - #11 new
INFO  03:58:34,908 - #49 char
INFO  03:58:34,908 - #42 [
INFO  03:58:34,908 - #52 3
INFO  03:58:34,909 - #43 ]
INFO  03:58:34,909 - #38 ;
INFO  03:58:34,909 - #49 nizch
INFO  03:58:34,909 - #42 [
INFO  03:58:34,909 - #52 0
INFO  03:58:34,909 - #43 ]
INFO  03:58:34,909 - #27 =
INFO  03:58:34,909 - #51 a
INFO  03:58:34,909 - #38 ;
INFO  03:58:34,909 - #49 niz
INFO  03:58:34,909 - #42 [
INFO  03:58:34,909 - #52 1
INFO  03:58:34,909 - #43 ]
INFO  03:58:34,909 - #27 =
INFO  03:58:34,909 - #49 ord
INFO  03:58:34,909 - #40 (
INFO  03:58:34,909 - #49 nizch
INFO  03:58:34,909 - #42 [
INFO  03:58:34,909 - #49 o
INFO  03:58:34,909 - #43 ]
INFO  03:58:34,909 - #41 )
INFO  03:58:34,909 - #38 ;
INFO  03:58:34,910 - #12 print
INFO  03:58:34,910 - #40 (
INFO  03:58:34,910 - #49 niz
INFO  03:58:34,910 - #42 [
INFO  03:58:34,910 - #52 1
INFO  03:58:34,910 - #43 ]
INFO  03:58:34,910 - #41 )
INFO  03:58:34,910 - #38 ;
INFO  03:58:34,910 - #45 }
INFO  03:58:34,910 - #45 }
INFO  03:58:34,914 - Line 16: Using global variable name: niz
INFO  03:58:34,914 - Line 17: Using global variable name: niz
INFO  03:58:34,914 - Line 17: Access to array element detected. Array name: niz
INFO  03:58:34,914 - Line 18: Using global variable name: niz
INFO  03:58:34,914 - Line 18: Access to array element detected. Array name: niz
INFO  03:58:34,914 - Line 20: Using global variable name: nizch
INFO  03:58:34,914 - Line 21: Using global variable name: nizch
INFO  03:58:34,914 - Line 21: Access to array element detected. Array name: nizch
INFO  03:58:34,914 - Line 23: Using global variable name: niz
INFO  03:58:34,914 - Line 23: Access to array element detected. Array name: niz
ERROR 03:58:34,914 - Line 23: Symbol o is not defined.
INFO  03:58:34,914 - Line 23: Using global variable name: nizch
ERROR 03:58:34,914 - Cannot invoke "rs.etf.pp1.symboltable.concepts.Obj.getType()" because "expr" is null
INFO  03:58:41,385 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:58:41,404 - #2 program
INFO  03:58:41,404 - #49 test301
INFO  03:58:41,404 - #7 const
INFO  03:58:41,404 - #49 int
INFO  03:58:41,404 - #49 nula
INFO  03:58:41,404 - #27 =
INFO  03:58:41,404 - #52 0
INFO  03:58:41,404 - #38 ;
INFO  03:58:41,405 - #7 const
INFO  03:58:41,405 - #49 int
INFO  03:58:41,405 - #49 jedan
INFO  03:58:41,405 - #27 =
INFO  03:58:41,405 - #52 1
INFO  03:58:41,405 - #38 ;
INFO  03:58:41,405 - #7 const
INFO  03:58:41,405 - #49 int
INFO  03:58:41,405 - #49 pet
INFO  03:58:41,405 - #27 =
INFO  03:58:41,405 - #52 5
INFO  03:58:41,405 - #38 ;
INFO  03:58:41,405 - #49 int
INFO  03:58:41,405 - #49 niz
INFO  03:58:41,405 - #42 [
INFO  03:58:41,406 - #43 ]
INFO  03:58:41,406 - #38 ;
INFO  03:58:41,406 - #49 char
INFO  03:58:41,406 - #49 nizch
INFO  03:58:41,406 - #42 [
INFO  03:58:41,406 - #43 ]
INFO  03:58:41,406 - #38 ;
INFO  03:58:41,406 - #49 char
INFO  03:58:41,406 - #49 a
INFO  03:58:41,406 - #38 ;
INFO  03:58:41,406 - #44 {
INFO  03:58:41,407 - #14 void
INFO  03:58:41,407 - #49 main
INFO  03:58:41,407 - #40 (
INFO  03:58:41,407 - #41 )
INFO  03:58:41,407 - #44 {
INFO  03:58:41,407 - #49 niz
INFO  03:58:41,408 - #27 =
INFO  03:58:41,408 - #11 new
INFO  03:58:41,408 - #49 int
INFO  03:58:41,408 - #42 [
INFO  03:58:41,408 - #52 3
INFO  03:58:41,408 - #43 ]
INFO  03:58:41,408 - #38 ;
INFO  03:58:41,408 - #49 niz
INFO  03:58:41,408 - #42 [
INFO  03:58:41,409 - #52 0
INFO  03:58:41,409 - #43 ]
INFO  03:58:41,409 - #27 =
INFO  03:58:41,409 - #52 1
INFO  03:58:41,409 - #38 ;
INFO  03:58:41,409 - #12 print
INFO  03:58:41,409 - #40 (
INFO  03:58:41,409 - #49 niz
INFO  03:58:41,409 - #42 [
INFO  03:58:41,409 - #52 0
INFO  03:58:41,409 - #43 ]
INFO  03:58:41,409 - #41 )
INFO  03:58:41,409 - #38 ;
INFO  03:58:41,409 - #49 nizch
INFO  03:58:41,409 - #27 =
INFO  03:58:41,410 - #11 new
INFO  03:58:41,410 - #49 char
INFO  03:58:41,410 - #42 [
INFO  03:58:41,410 - #52 3
INFO  03:58:41,410 - #43 ]
INFO  03:58:41,410 - #38 ;
INFO  03:58:41,410 - #49 nizch
INFO  03:58:41,410 - #42 [
INFO  03:58:41,410 - #52 0
INFO  03:58:41,410 - #43 ]
INFO  03:58:41,410 - #27 =
INFO  03:58:41,410 - #51 a
INFO  03:58:41,410 - #38 ;
INFO  03:58:41,410 - #49 niz
INFO  03:58:41,410 - #42 [
INFO  03:58:41,410 - #52 1
INFO  03:58:41,410 - #43 ]
INFO  03:58:41,410 - #27 =
INFO  03:58:41,410 - #49 ord
INFO  03:58:41,410 - #40 (
INFO  03:58:41,410 - #49 nizch
INFO  03:58:41,410 - #42 [
INFO  03:58:41,410 - #52 0
INFO  03:58:41,410 - #43 ]
INFO  03:58:41,410 - #41 )
INFO  03:58:41,411 - #38 ;
INFO  03:58:41,411 - #12 print
INFO  03:58:41,411 - #40 (
INFO  03:58:41,411 - #49 niz
INFO  03:58:41,411 - #42 [
INFO  03:58:41,411 - #52 1
INFO  03:58:41,411 - #43 ]
INFO  03:58:41,411 - #41 )
INFO  03:58:41,411 - #38 ;
INFO  03:58:41,411 - #45 }
INFO  03:58:41,411 - #45 }
INFO  03:58:41,415 - Line 16: Using global variable name: niz
INFO  03:58:41,415 - Line 17: Using global variable name: niz
INFO  03:58:41,415 - Line 17: Access to array element detected. Array name: niz
INFO  03:58:41,415 - Line 18: Using global variable name: niz
INFO  03:58:41,415 - Line 18: Access to array element detected. Array name: niz
INFO  03:58:41,415 - Line 20: Using global variable name: nizch
INFO  03:58:41,415 - Line 21: Using global variable name: nizch
INFO  03:58:41,415 - Line 21: Access to array element detected. Array name: nizch
INFO  03:58:41,415 - Line 23: Using global variable name: niz
INFO  03:58:41,415 - Line 23: Access to array element detected. Array name: niz
INFO  03:58:41,415 - Line 23: Using global variable name: nizch
INFO  03:58:41,415 - Line 23: Access to array element detected. Array name: nizch
INFO  03:58:41,415 - Line 23: Method Call detected. Method name: ord
INFO  03:58:41,415 - Line 24: Using global variable name: niz
INFO  03:58:41,415 - Line 24: Access to array element detected. Array name: niz
INFO  03:58:41,416 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  03:59:07,075 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  03:59:07,094 - #2 program
INFO  03:59:07,094 - #49 test301
INFO  03:59:07,094 - #7 const
INFO  03:59:07,094 - #49 int
INFO  03:59:07,094 - #49 nula
INFO  03:59:07,094 - #27 =
INFO  03:59:07,094 - #52 0
INFO  03:59:07,094 - #38 ;
INFO  03:59:07,095 - #7 const
INFO  03:59:07,095 - #49 int
INFO  03:59:07,095 - #49 jedan
INFO  03:59:07,095 - #27 =
INFO  03:59:07,095 - #52 1
INFO  03:59:07,095 - #38 ;
INFO  03:59:07,095 - #7 const
INFO  03:59:07,095 - #49 int
INFO  03:59:07,095 - #49 pet
INFO  03:59:07,095 - #27 =
INFO  03:59:07,095 - #52 5
INFO  03:59:07,095 - #38 ;
INFO  03:59:07,095 - #49 int
INFO  03:59:07,095 - #49 niz
INFO  03:59:07,096 - #42 [
INFO  03:59:07,096 - #43 ]
INFO  03:59:07,096 - #38 ;
INFO  03:59:07,096 - #49 char
INFO  03:59:07,096 - #49 nizch
INFO  03:59:07,096 - #42 [
INFO  03:59:07,096 - #43 ]
INFO  03:59:07,096 - #38 ;
INFO  03:59:07,096 - #49 char
INFO  03:59:07,096 - #49 a
INFO  03:59:07,096 - #38 ;
INFO  03:59:07,097 - #44 {
INFO  03:59:07,097 - #14 void
INFO  03:59:07,097 - #49 main
INFO  03:59:07,097 - #40 (
INFO  03:59:07,097 - #41 )
INFO  03:59:07,097 - #44 {
INFO  03:59:07,097 - #49 niz
INFO  03:59:07,098 - #27 =
INFO  03:59:07,098 - #11 new
INFO  03:59:07,098 - #49 int
INFO  03:59:07,098 - #42 [
INFO  03:59:07,098 - #52 3
INFO  03:59:07,098 - #43 ]
INFO  03:59:07,098 - #38 ;
INFO  03:59:07,098 - #49 niz
INFO  03:59:07,098 - #42 [
INFO  03:59:07,099 - #52 0
INFO  03:59:07,099 - #43 ]
INFO  03:59:07,099 - #27 =
INFO  03:59:07,099 - #52 1
INFO  03:59:07,099 - #38 ;
INFO  03:59:07,099 - #12 print
INFO  03:59:07,099 - #40 (
INFO  03:59:07,099 - #49 niz
INFO  03:59:07,099 - #42 [
INFO  03:59:07,099 - #52 0
INFO  03:59:07,099 - #43 ]
INFO  03:59:07,099 - #41 )
INFO  03:59:07,099 - #38 ;
INFO  03:59:07,099 - #49 nizch
INFO  03:59:07,100 - #27 =
INFO  03:59:07,100 - #11 new
INFO  03:59:07,100 - #49 char
INFO  03:59:07,100 - #42 [
INFO  03:59:07,100 - #52 3
INFO  03:59:07,100 - #43 ]
INFO  03:59:07,100 - #38 ;
INFO  03:59:07,100 - #49 nizch
INFO  03:59:07,100 - #42 [
INFO  03:59:07,100 - #52 0
INFO  03:59:07,100 - #43 ]
INFO  03:59:07,100 - #27 =
INFO  03:59:07,100 - #51 a
INFO  03:59:07,100 - #38 ;
INFO  03:59:07,100 - #49 niz
INFO  03:59:07,100 - #42 [
INFO  03:59:07,100 - #52 1
INFO  03:59:07,101 - #43 ]
INFO  03:59:07,101 - #27 =
INFO  03:59:07,101 - #49 ord
INFO  03:59:07,101 - #40 (
INFO  03:59:07,101 - #51 a
INFO  03:59:07,101 - #41 )
INFO  03:59:07,101 - #38 ;
INFO  03:59:07,101 - #12 print
INFO  03:59:07,101 - #40 (
INFO  03:59:07,101 - #49 niz
INFO  03:59:07,101 - #42 [
INFO  03:59:07,101 - #52 1
INFO  03:59:07,102 - #43 ]
INFO  03:59:07,102 - #41 )
INFO  03:59:07,102 - #38 ;
INFO  03:59:07,102 - #45 }
INFO  03:59:07,102 - #45 }
INFO  03:59:07,105 - Line 16: Using global variable name: niz
INFO  03:59:07,105 - Line 17: Using global variable name: niz
INFO  03:59:07,105 - Line 17: Access to array element detected. Array name: niz
INFO  03:59:07,105 - Line 18: Using global variable name: niz
INFO  03:59:07,105 - Line 18: Access to array element detected. Array name: niz
INFO  03:59:07,105 - Line 20: Using global variable name: nizch
INFO  03:59:07,105 - Line 21: Using global variable name: nizch
INFO  03:59:07,105 - Line 21: Access to array element detected. Array name: nizch
INFO  03:59:07,105 - Line 23: Using global variable name: niz
INFO  03:59:07,105 - Line 23: Access to array element detected. Array name: niz
INFO  03:59:07,106 - Line 23: Method Call detected. Method name: ord
INFO  03:59:07,106 - Line 24: Using global variable name: niz
INFO  03:59:07,106 - Line 24: Access to array element detected. Array name: niz
INFO  03:59:07,107 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:00:13,290 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:00:13,308 - #2 program
INFO  04:00:13,308 - #49 test301
INFO  04:00:13,308 - #7 const
INFO  04:00:13,309 - #49 int
INFO  04:00:13,309 - #49 nula
INFO  04:00:13,309 - #27 =
INFO  04:00:13,309 - #52 0
INFO  04:00:13,309 - #38 ;
INFO  04:00:13,309 - #7 const
INFO  04:00:13,309 - #49 int
INFO  04:00:13,309 - #49 jedan
INFO  04:00:13,309 - #27 =
INFO  04:00:13,309 - #52 1
INFO  04:00:13,309 - #38 ;
INFO  04:00:13,310 - #7 const
INFO  04:00:13,310 - #49 int
INFO  04:00:13,310 - #49 pet
INFO  04:00:13,310 - #27 =
INFO  04:00:13,310 - #52 5
INFO  04:00:13,310 - #38 ;
INFO  04:00:13,310 - #49 int
INFO  04:00:13,310 - #49 niz
INFO  04:00:13,310 - #42 [
INFO  04:00:13,310 - #43 ]
INFO  04:00:13,310 - #38 ;
INFO  04:00:13,311 - #49 char
INFO  04:00:13,311 - #49 nizch
INFO  04:00:13,311 - #42 [
INFO  04:00:13,311 - #43 ]
INFO  04:00:13,311 - #38 ;
INFO  04:00:13,311 - #49 char
INFO  04:00:13,311 - #49 a
INFO  04:00:13,311 - #38 ;
INFO  04:00:13,311 - #44 {
INFO  04:00:13,311 - #14 void
INFO  04:00:13,311 - #49 main
INFO  04:00:13,312 - #40 (
INFO  04:00:13,312 - #41 )
INFO  04:00:13,312 - #44 {
INFO  04:00:13,312 - #49 niz
INFO  04:00:13,312 - #27 =
INFO  04:00:13,312 - #11 new
INFO  04:00:13,312 - #49 int
INFO  04:00:13,312 - #42 [
INFO  04:00:13,312 - #52 3
INFO  04:00:13,313 - #43 ]
INFO  04:00:13,313 - #38 ;
INFO  04:00:13,313 - #49 niz
INFO  04:00:13,313 - #42 [
INFO  04:00:13,313 - #52 0
INFO  04:00:13,313 - #43 ]
INFO  04:00:13,313 - #27 =
INFO  04:00:13,314 - #52 1
INFO  04:00:13,314 - #38 ;
INFO  04:00:13,314 - #12 print
INFO  04:00:13,314 - #40 (
INFO  04:00:13,314 - #49 niz
INFO  04:00:13,314 - #42 [
INFO  04:00:13,314 - #52 0
INFO  04:00:13,314 - #43 ]
INFO  04:00:13,314 - #41 )
INFO  04:00:13,314 - #38 ;
INFO  04:00:13,314 - #49 nizch
INFO  04:00:13,314 - #27 =
INFO  04:00:13,314 - #11 new
INFO  04:00:13,314 - #49 char
INFO  04:00:13,314 - #42 [
INFO  04:00:13,314 - #52 3
INFO  04:00:13,314 - #43 ]
INFO  04:00:13,314 - #38 ;
INFO  04:00:13,314 - #49 nizch
INFO  04:00:13,315 - #42 [
INFO  04:00:13,315 - #52 0
INFO  04:00:13,315 - #43 ]
INFO  04:00:13,315 - #27 =
INFO  04:00:13,315 - #51 a
INFO  04:00:13,315 - #38 ;
INFO  04:00:13,315 - #49 niz
INFO  04:00:13,315 - #42 [
INFO  04:00:13,315 - #52 1
INFO  04:00:13,315 - #43 ]
INFO  04:00:13,315 - #27 =
INFO  04:00:13,315 - #49 ord
INFO  04:00:13,315 - #40 (
INFO  04:00:13,315 - #51 a
INFO  04:00:13,315 - #41 )
INFO  04:00:13,315 - #38 ;
INFO  04:00:13,316 - #12 print
INFO  04:00:13,316 - #40 (
INFO  04:00:13,316 - #49 niz
INFO  04:00:13,316 - #42 [
INFO  04:00:13,316 - #52 1
INFO  04:00:13,316 - #43 ]
INFO  04:00:13,316 - #41 )
INFO  04:00:13,316 - #38 ;
INFO  04:00:13,316 - #45 }
INFO  04:00:13,316 - #45 }
INFO  04:00:13,320 - Line 16: Using global variable name: niz
INFO  04:00:13,320 - Line 17: Using global variable name: niz
INFO  04:00:13,320 - Line 17: Access to array element detected. Array name: niz
INFO  04:00:13,320 - Line 18: Using global variable name: niz
INFO  04:00:13,320 - Line 18: Access to array element detected. Array name: niz
INFO  04:00:13,320 - Line 20: Using global variable name: nizch
INFO  04:00:13,320 - Line 21: Using global variable name: nizch
INFO  04:00:13,320 - Line 21: Access to array element detected. Array name: nizch
INFO  04:00:13,320 - Line 23: Using global variable name: niz
INFO  04:00:13,320 - Line 23: Access to array element detected. Array name: niz
INFO  04:00:13,320 - Line 23: Method Call detected. Method name: ord
INFO  04:00:13,320 - Line 24: Using global variable name: niz
INFO  04:00:13,320 - Line 24: Access to array element detected. Array name: niz
INFO  04:00:13,321 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:02:57,915 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:02:57,932 - #2 program
INFO  04:02:57,932 - #49 test301
INFO  04:02:57,932 - #7 const
INFO  04:02:57,933 - #49 int
INFO  04:02:57,933 - #49 nula
INFO  04:02:57,933 - #27 =
INFO  04:02:57,933 - #52 0
INFO  04:02:57,933 - #38 ;
INFO  04:02:57,933 - #7 const
INFO  04:02:57,933 - #49 int
INFO  04:02:57,933 - #49 jedan
INFO  04:02:57,933 - #27 =
INFO  04:02:57,934 - #52 1
INFO  04:02:57,934 - #38 ;
INFO  04:02:57,934 - #7 const
INFO  04:02:57,934 - #49 int
INFO  04:02:57,934 - #49 pet
INFO  04:02:57,934 - #27 =
INFO  04:02:57,934 - #52 5
INFO  04:02:57,934 - #38 ;
INFO  04:02:57,934 - #49 int
INFO  04:02:57,934 - #49 niz
INFO  04:02:57,934 - #42 [
INFO  04:02:57,934 - #43 ]
INFO  04:02:57,934 - #38 ;
INFO  04:02:57,935 - #49 char
INFO  04:02:57,935 - #49 nizch
INFO  04:02:57,935 - #42 [
INFO  04:02:57,935 - #43 ]
INFO  04:02:57,935 - #38 ;
INFO  04:02:57,935 - #49 char
INFO  04:02:57,935 - #49 a
INFO  04:02:57,935 - #38 ;
INFO  04:02:57,935 - #44 {
INFO  04:02:57,935 - #14 void
INFO  04:02:57,935 - #49 main
INFO  04:02:57,936 - #40 (
INFO  04:02:57,936 - #41 )
INFO  04:02:57,936 - #44 {
INFO  04:02:57,936 - #49 niz
INFO  04:02:57,936 - #27 =
INFO  04:02:57,936 - #11 new
INFO  04:02:57,936 - #49 int
INFO  04:02:57,936 - #42 [
INFO  04:02:57,936 - #52 3
INFO  04:02:57,936 - #43 ]
INFO  04:02:57,937 - #38 ;
INFO  04:02:57,937 - #49 niz
INFO  04:02:57,937 - #42 [
INFO  04:02:57,937 - #52 0
INFO  04:02:57,937 - #43 ]
INFO  04:02:57,937 - #27 =
INFO  04:02:57,937 - #52 1
INFO  04:02:57,937 - #38 ;
INFO  04:02:57,937 - #12 print
INFO  04:02:57,937 - #40 (
INFO  04:02:57,937 - #49 niz
INFO  04:02:57,938 - #42 [
INFO  04:02:57,938 - #52 0
INFO  04:02:57,938 - #43 ]
INFO  04:02:57,938 - #41 )
INFO  04:02:57,938 - #38 ;
INFO  04:02:57,938 - #49 nizch
INFO  04:02:57,938 - #27 =
INFO  04:02:57,938 - #11 new
INFO  04:02:57,938 - #49 char
INFO  04:02:57,938 - #42 [
INFO  04:02:57,938 - #52 3
INFO  04:02:57,938 - #43 ]
INFO  04:02:57,938 - #38 ;
INFO  04:02:57,938 - #49 nizch
INFO  04:02:57,938 - #42 [
INFO  04:02:57,938 - #52 0
INFO  04:02:57,938 - #43 ]
INFO  04:02:57,938 - #27 =
INFO  04:02:57,938 - #51 a
INFO  04:02:57,938 - #38 ;
INFO  04:02:57,939 - #49 niz
INFO  04:02:57,939 - #42 [
INFO  04:02:57,939 - #52 1
INFO  04:02:57,939 - #43 ]
INFO  04:02:57,939 - #27 =
INFO  04:02:57,939 - #49 ord
INFO  04:02:57,939 - #40 (
INFO  04:02:57,939 - #51 a
INFO  04:02:57,939 - #41 )
INFO  04:02:57,939 - #38 ;
INFO  04:02:57,939 - #12 print
INFO  04:02:57,939 - #40 (
INFO  04:02:57,939 - #49 niz
INFO  04:02:57,940 - #42 [
INFO  04:02:57,940 - #52 1
INFO  04:02:57,940 - #43 ]
INFO  04:02:57,940 - #41 )
INFO  04:02:57,940 - #38 ;
INFO  04:02:57,940 - #45 }
INFO  04:02:57,940 - #45 }
INFO  04:02:57,943 - Line 16: Using global variable name: niz
INFO  04:02:57,943 - Line 17: Using global variable name: niz
INFO  04:02:57,943 - Line 17: Access to array element detected. Array name: niz
INFO  04:02:57,943 - Line 18: Using global variable name: niz
INFO  04:02:57,943 - Line 18: Access to array element detected. Array name: niz
INFO  04:02:57,944 - Line 20: Using global variable name: nizch
INFO  04:02:57,944 - Line 21: Using global variable name: nizch
INFO  04:02:57,944 - Line 21: Access to array element detected. Array name: nizch
INFO  04:02:57,944 - Line 23: Using global variable name: niz
INFO  04:02:57,944 - Line 23: Access to array element detected. Array name: niz
INFO  04:02:57,944 - Line 23: Method Call detected. Method name: ord
INFO  04:02:57,944 - Line 24: Using global variable name: niz
INFO  04:02:57,944 - Line 24: Access to array element detected. Array name: niz
INFO  04:02:57,945 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:03:17,992 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:03:18,011 - #2 program
INFO  04:03:18,011 - #49 test301
INFO  04:03:18,011 - #7 const
INFO  04:03:18,012 - #49 int
INFO  04:03:18,012 - #49 nula
INFO  04:03:18,012 - #27 =
INFO  04:03:18,012 - #52 0
INFO  04:03:18,012 - #38 ;
INFO  04:03:18,012 - #7 const
INFO  04:03:18,013 - #49 int
INFO  04:03:18,013 - #49 jedan
INFO  04:03:18,013 - #27 =
INFO  04:03:18,013 - #52 1
INFO  04:03:18,013 - #38 ;
INFO  04:03:18,013 - #7 const
INFO  04:03:18,013 - #49 int
INFO  04:03:18,013 - #49 pet
INFO  04:03:18,013 - #27 =
INFO  04:03:18,013 - #52 5
INFO  04:03:18,013 - #38 ;
INFO  04:03:18,013 - #49 int
INFO  04:03:18,013 - #49 niz
INFO  04:03:18,013 - #42 [
INFO  04:03:18,013 - #43 ]
INFO  04:03:18,013 - #38 ;
INFO  04:03:18,014 - #49 char
INFO  04:03:18,014 - #49 nizch
INFO  04:03:18,014 - #42 [
INFO  04:03:18,014 - #43 ]
INFO  04:03:18,014 - #38 ;
INFO  04:03:18,014 - #49 char
INFO  04:03:18,014 - #49 a
INFO  04:03:18,014 - #38 ;
INFO  04:03:18,014 - #44 {
INFO  04:03:18,014 - #14 void
INFO  04:03:18,014 - #49 main
INFO  04:03:18,015 - #40 (
INFO  04:03:18,015 - #41 )
INFO  04:03:18,015 - #44 {
INFO  04:03:18,015 - #49 niz
INFO  04:03:18,015 - #27 =
INFO  04:03:18,015 - #11 new
INFO  04:03:18,015 - #49 int
INFO  04:03:18,015 - #42 [
INFO  04:03:18,016 - #52 3
INFO  04:03:18,016 - #43 ]
INFO  04:03:18,016 - #38 ;
INFO  04:03:18,016 - #49 niz
INFO  04:03:18,016 - #42 [
INFO  04:03:18,016 - #52 0
INFO  04:03:18,017 - #43 ]
INFO  04:03:18,017 - #27 =
INFO  04:03:18,017 - #52 1
INFO  04:03:18,017 - #38 ;
INFO  04:03:18,017 - #12 print
INFO  04:03:18,017 - #40 (
INFO  04:03:18,017 - #49 niz
INFO  04:03:18,017 - #42 [
INFO  04:03:18,017 - #52 0
INFO  04:03:18,017 - #43 ]
INFO  04:03:18,017 - #41 )
INFO  04:03:18,017 - #38 ;
INFO  04:03:18,017 - #49 nizch
INFO  04:03:18,017 - #27 =
INFO  04:03:18,017 - #11 new
INFO  04:03:18,017 - #49 char
INFO  04:03:18,017 - #42 [
INFO  04:03:18,017 - #52 3
INFO  04:03:18,018 - #43 ]
INFO  04:03:18,018 - #38 ;
INFO  04:03:18,018 - #49 nizch
INFO  04:03:18,018 - #42 [
INFO  04:03:18,018 - #52 0
INFO  04:03:18,018 - #43 ]
INFO  04:03:18,018 - #27 =
INFO  04:03:18,018 - #51 a
INFO  04:03:18,018 - #38 ;
INFO  04:03:18,018 - #49 niz
INFO  04:03:18,018 - #42 [
INFO  04:03:18,018 - #52 1
INFO  04:03:18,018 - #43 ]
INFO  04:03:18,018 - #27 =
INFO  04:03:18,018 - #49 ord
INFO  04:03:18,018 - #40 (
INFO  04:03:18,018 - #49 nizch
INFO  04:03:18,018 - #42 [
INFO  04:03:18,018 - #52 0
INFO  04:03:18,018 - #43 ]
INFO  04:03:18,018 - #41 )
INFO  04:03:18,019 - #38 ;
INFO  04:03:18,019 - #12 print
INFO  04:03:18,019 - #40 (
INFO  04:03:18,019 - #49 niz
INFO  04:03:18,019 - #42 [
INFO  04:03:18,019 - #52 1
INFO  04:03:18,019 - #43 ]
INFO  04:03:18,019 - #41 )
INFO  04:03:18,019 - #38 ;
INFO  04:03:18,019 - #45 }
INFO  04:03:18,019 - #45 }
INFO  04:03:18,023 - Line 16: Using global variable name: niz
INFO  04:03:18,023 - Line 17: Using global variable name: niz
INFO  04:03:18,023 - Line 17: Access to array element detected. Array name: niz
INFO  04:03:18,023 - Line 18: Using global variable name: niz
INFO  04:03:18,023 - Line 18: Access to array element detected. Array name: niz
INFO  04:03:18,023 - Line 20: Using global variable name: nizch
INFO  04:03:18,023 - Line 21: Using global variable name: nizch
INFO  04:03:18,023 - Line 21: Access to array element detected. Array name: nizch
INFO  04:03:18,023 - Line 23: Using global variable name: niz
INFO  04:03:18,023 - Line 23: Access to array element detected. Array name: niz
INFO  04:03:18,023 - Line 23: Using global variable name: nizch
INFO  04:03:18,023 - Line 23: Access to array element detected. Array name: nizch
INFO  04:03:18,023 - Line 23: Method Call detected. Method name: ord
INFO  04:03:18,023 - Line 24: Using global variable name: niz
INFO  04:03:18,024 - Line 24: Access to array element detected. Array name: niz
INFO  04:03:18,025 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:03:45,990 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:03:46,009 - #2 program
INFO  04:03:46,009 - #49 test301
INFO  04:03:46,009 - #7 const
INFO  04:03:46,010 - #49 int
INFO  04:03:46,010 - #49 nula
INFO  04:03:46,010 - #27 =
INFO  04:03:46,010 - #52 0
INFO  04:03:46,010 - #38 ;
INFO  04:03:46,010 - #7 const
INFO  04:03:46,010 - #49 int
INFO  04:03:46,010 - #49 jedan
INFO  04:03:46,010 - #27 =
INFO  04:03:46,010 - #52 1
INFO  04:03:46,010 - #38 ;
INFO  04:03:46,011 - #7 const
INFO  04:03:46,011 - #49 int
INFO  04:03:46,011 - #49 pet
INFO  04:03:46,011 - #27 =
INFO  04:03:46,011 - #52 5
INFO  04:03:46,011 - #38 ;
INFO  04:03:46,011 - #49 int
INFO  04:03:46,011 - #49 niz
INFO  04:03:46,011 - #42 [
INFO  04:03:46,011 - #43 ]
INFO  04:03:46,011 - #38 ;
INFO  04:03:46,011 - #49 char
INFO  04:03:46,012 - #49 nizch
INFO  04:03:46,012 - #42 [
INFO  04:03:46,012 - #43 ]
INFO  04:03:46,012 - #38 ;
INFO  04:03:46,012 - #49 char
INFO  04:03:46,012 - #49 a
INFO  04:03:46,012 - #38 ;
INFO  04:03:46,012 - #44 {
INFO  04:03:46,012 - #14 void
INFO  04:03:46,012 - #49 main
INFO  04:03:46,012 - #40 (
INFO  04:03:46,013 - #41 )
INFO  04:03:46,013 - #44 {
INFO  04:03:46,013 - #49 niz
INFO  04:03:46,013 - #27 =
INFO  04:03:46,013 - #11 new
INFO  04:03:46,013 - #49 int
INFO  04:03:46,013 - #42 [
INFO  04:03:46,013 - #52 3
INFO  04:03:46,013 - #43 ]
INFO  04:03:46,013 - #38 ;
INFO  04:03:46,014 - #49 niz
INFO  04:03:46,014 - #42 [
INFO  04:03:46,014 - #52 0
INFO  04:03:46,014 - #43 ]
INFO  04:03:46,014 - #27 =
INFO  04:03:46,014 - #52 1
INFO  04:03:46,014 - #38 ;
INFO  04:03:46,014 - #12 print
INFO  04:03:46,014 - #40 (
INFO  04:03:46,014 - #49 niz
INFO  04:03:46,014 - #42 [
INFO  04:03:46,014 - #52 0
INFO  04:03:46,014 - #43 ]
INFO  04:03:46,015 - #41 )
INFO  04:03:46,015 - #38 ;
INFO  04:03:46,015 - #49 nizch
INFO  04:03:46,015 - #27 =
INFO  04:03:46,015 - #11 new
INFO  04:03:46,015 - #49 char
INFO  04:03:46,015 - #42 [
INFO  04:03:46,015 - #52 3
INFO  04:03:46,015 - #43 ]
INFO  04:03:46,015 - #38 ;
INFO  04:03:46,015 - #49 nizch
INFO  04:03:46,015 - #42 [
INFO  04:03:46,015 - #52 0
INFO  04:03:46,015 - #43 ]
INFO  04:03:46,015 - #27 =
INFO  04:03:46,015 - #51 a
INFO  04:03:46,015 - #38 ;
INFO  04:03:46,015 - #12 print
INFO  04:03:46,015 - #40 (
INFO  04:03:46,015 - #49 niz
INFO  04:03:46,015 - #42 [
INFO  04:03:46,015 - #52 1
INFO  04:03:46,016 - #43 ]
INFO  04:03:46,016 - #41 )
INFO  04:03:46,016 - #38 ;
INFO  04:03:46,016 - #45 }
INFO  04:03:46,016 - #45 }
INFO  04:03:46,019 - Line 16: Using global variable name: niz
INFO  04:03:46,019 - Line 17: Using global variable name: niz
INFO  04:03:46,019 - Line 17: Access to array element detected. Array name: niz
INFO  04:03:46,019 - Line 18: Using global variable name: niz
INFO  04:03:46,019 - Line 18: Access to array element detected. Array name: niz
INFO  04:03:46,019 - Line 20: Using global variable name: nizch
INFO  04:03:46,019 - Line 21: Using global variable name: nizch
INFO  04:03:46,019 - Line 21: Access to array element detected. Array name: nizch
INFO  04:03:46,019 - Line 24: Using global variable name: niz
INFO  04:03:46,019 - Line 24: Access to array element detected. Array name: niz
INFO  04:03:46,020 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:07:15,574 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:07:15,593 - #2 program
INFO  04:07:15,593 - #49 test301
INFO  04:07:15,593 - #7 const
INFO  04:07:15,594 - #49 int
INFO  04:07:15,594 - #49 nula
INFO  04:07:15,594 - #27 =
INFO  04:07:15,594 - #52 0
INFO  04:07:15,594 - #38 ;
INFO  04:07:15,594 - #7 const
INFO  04:07:15,594 - #49 int
INFO  04:07:15,594 - #49 jedan
INFO  04:07:15,594 - #27 =
INFO  04:07:15,594 - #52 1
INFO  04:07:15,594 - #38 ;
INFO  04:07:15,594 - #7 const
INFO  04:07:15,595 - #49 int
INFO  04:07:15,595 - #49 pet
INFO  04:07:15,595 - #27 =
INFO  04:07:15,595 - #52 5
INFO  04:07:15,595 - #38 ;
INFO  04:07:15,595 - #49 int
INFO  04:07:15,595 - #49 niz
INFO  04:07:15,595 - #42 [
INFO  04:07:15,595 - #43 ]
INFO  04:07:15,595 - #38 ;
INFO  04:07:15,595 - #49 char
INFO  04:07:15,595 - #49 nizch
INFO  04:07:15,596 - #42 [
INFO  04:07:15,596 - #43 ]
INFO  04:07:15,596 - #38 ;
INFO  04:07:15,596 - #49 char
INFO  04:07:15,596 - #49 a
INFO  04:07:15,596 - #38 ;
INFO  04:07:15,596 - #44 {
INFO  04:07:15,596 - #14 void
INFO  04:07:15,596 - #49 main
INFO  04:07:15,596 - #40 (
INFO  04:07:15,597 - #41 )
INFO  04:07:15,597 - #44 {
INFO  04:07:15,597 - #49 niz
INFO  04:07:15,597 - #27 =
INFO  04:07:15,597 - #11 new
INFO  04:07:15,597 - #49 int
INFO  04:07:15,597 - #42 [
INFO  04:07:15,597 - #52 3
INFO  04:07:15,597 - #43 ]
INFO  04:07:15,597 - #38 ;
INFO  04:07:15,598 - #49 niz
INFO  04:07:15,598 - #42 [
INFO  04:07:15,598 - #52 0
INFO  04:07:15,598 - #43 ]
INFO  04:07:15,598 - #27 =
INFO  04:07:15,598 - #52 1
INFO  04:07:15,598 - #38 ;
INFO  04:07:15,598 - #12 print
INFO  04:07:15,598 - #40 (
INFO  04:07:15,598 - #49 niz
INFO  04:07:15,598 - #42 [
INFO  04:07:15,598 - #52 0
INFO  04:07:15,599 - #43 ]
INFO  04:07:15,599 - #41 )
INFO  04:07:15,599 - #38 ;
INFO  04:07:15,599 - #49 nizch
INFO  04:07:15,599 - #27 =
INFO  04:07:15,599 - #11 new
INFO  04:07:15,599 - #49 char
INFO  04:07:15,599 - #42 [
INFO  04:07:15,599 - #52 3
INFO  04:07:15,599 - #43 ]
INFO  04:07:15,599 - #38 ;
INFO  04:07:15,599 - #49 nizch
INFO  04:07:15,599 - #42 [
INFO  04:07:15,599 - #52 0
INFO  04:07:15,599 - #43 ]
INFO  04:07:15,599 - #27 =
INFO  04:07:15,599 - #51 a
INFO  04:07:15,599 - #38 ;
INFO  04:07:15,599 - #49 niz
INFO  04:07:15,599 - #42 [
INFO  04:07:15,599 - #52 1
INFO  04:07:15,599 - #43 ]
INFO  04:07:15,600 - #27 =
INFO  04:07:15,600 - #49 nizch
INFO  04:07:15,600 - #42 [
INFO  04:07:15,600 - #52 0
INFO  04:07:15,600 - #43 ]
INFO  04:07:15,600 - #38 ;
INFO  04:07:15,600 - #12 print
INFO  04:07:15,600 - #40 (
INFO  04:07:15,600 - #49 niz
INFO  04:07:15,600 - #42 [
INFO  04:07:15,600 - #52 1
INFO  04:07:15,600 - #43 ]
INFO  04:07:15,600 - #41 )
INFO  04:07:15,600 - #38 ;
INFO  04:07:15,600 - #45 }
INFO  04:07:15,600 - #45 }
INFO  04:07:15,603 - Line 16: Using global variable name: niz
INFO  04:07:15,603 - Line 17: Using global variable name: niz
INFO  04:07:15,603 - Line 17: Access to array element detected. Array name: niz
INFO  04:07:15,603 - Line 18: Using global variable name: niz
INFO  04:07:15,603 - Line 18: Access to array element detected. Array name: niz
INFO  04:07:15,604 - Line 20: Using global variable name: nizch
INFO  04:07:15,604 - Line 21: Using global variable name: nizch
INFO  04:07:15,604 - Line 21: Access to array element detected. Array name: nizch
INFO  04:07:15,604 - Line 23: Using global variable name: niz
INFO  04:07:15,604 - Line 23: Access to array element detected. Array name: niz
INFO  04:07:15,604 - Line 23: Using global variable name: nizch
INFO  04:07:15,604 - Line 23: Access to array element detected. Array name: nizch
ERROR 04:07:15,604 - Line 23: Invalid assignment. Types are incompatible.
INFO  04:07:15,604 - Line 24: Using global variable name: niz
INFO  04:07:15,604 - Line 24: Access to array element detected. Array name: niz
ERROR 04:07:15,604 - One or more semantic errors found! Compiling unsuccessful!
INFO  04:07:27,681 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:07:27,700 - #2 program
INFO  04:07:27,700 - #49 test301
INFO  04:07:27,700 - #7 const
INFO  04:07:27,701 - #49 int
INFO  04:07:27,701 - #49 nula
INFO  04:07:27,701 - #27 =
INFO  04:07:27,701 - #52 0
INFO  04:07:27,701 - #38 ;
INFO  04:07:27,701 - #7 const
INFO  04:07:27,702 - #49 int
INFO  04:07:27,702 - #49 jedan
INFO  04:07:27,702 - #27 =
INFO  04:07:27,702 - #52 1
INFO  04:07:27,702 - #38 ;
INFO  04:07:27,702 - #7 const
INFO  04:07:27,702 - #49 int
INFO  04:07:27,702 - #49 pet
INFO  04:07:27,702 - #27 =
INFO  04:07:27,702 - #52 5
INFO  04:07:27,702 - #38 ;
INFO  04:07:27,702 - #49 int
INFO  04:07:27,702 - #49 niz
INFO  04:07:27,702 - #42 [
INFO  04:07:27,702 - #43 ]
INFO  04:07:27,702 - #38 ;
INFO  04:07:27,703 - #49 char
INFO  04:07:27,703 - #49 nizch
INFO  04:07:27,703 - #42 [
INFO  04:07:27,703 - #43 ]
INFO  04:07:27,703 - #38 ;
INFO  04:07:27,703 - #49 char
INFO  04:07:27,703 - #49 a
INFO  04:07:27,703 - #38 ;
INFO  04:07:27,703 - #44 {
INFO  04:07:27,703 - #14 void
INFO  04:07:27,703 - #49 main
INFO  04:07:27,703 - #40 (
INFO  04:07:27,704 - #41 )
INFO  04:07:27,704 - #44 {
INFO  04:07:27,704 - #49 niz
INFO  04:07:27,704 - #27 =
INFO  04:07:27,704 - #11 new
INFO  04:07:27,704 - #49 int
INFO  04:07:27,704 - #42 [
INFO  04:07:27,704 - #52 3
INFO  04:07:27,704 - #43 ]
INFO  04:07:27,704 - #38 ;
INFO  04:07:27,705 - #49 niz
INFO  04:07:27,705 - #42 [
INFO  04:07:27,705 - #52 0
INFO  04:07:27,705 - #43 ]
INFO  04:07:27,705 - #27 =
INFO  04:07:27,705 - #52 1
INFO  04:07:27,705 - #38 ;
INFO  04:07:27,705 - #12 print
INFO  04:07:27,705 - #40 (
INFO  04:07:27,705 - #49 niz
INFO  04:07:27,705 - #42 [
INFO  04:07:27,705 - #52 0
INFO  04:07:27,705 - #43 ]
INFO  04:07:27,706 - #41 )
INFO  04:07:27,706 - #38 ;
INFO  04:07:27,706 - #49 nizch
INFO  04:07:27,706 - #27 =
INFO  04:07:27,706 - #11 new
INFO  04:07:27,706 - #49 char
INFO  04:07:27,706 - #42 [
INFO  04:07:27,706 - #52 3
INFO  04:07:27,706 - #43 ]
INFO  04:07:27,706 - #38 ;
INFO  04:07:27,706 - #49 nizch
INFO  04:07:27,706 - #42 [
INFO  04:07:27,706 - #52 0
INFO  04:07:27,706 - #43 ]
INFO  04:07:27,706 - #27 =
INFO  04:07:27,706 - #51 a
INFO  04:07:27,706 - #38 ;
INFO  04:07:27,707 - #49 niz
INFO  04:07:27,707 - #42 [
INFO  04:07:27,707 - #52 1
INFO  04:07:27,707 - #43 ]
INFO  04:07:27,707 - #27 =
INFO  04:07:27,707 - #49 ord
INFO  04:07:27,707 - #40 (
INFO  04:07:27,707 - #49 nizch
INFO  04:07:27,707 - #42 [
INFO  04:07:27,707 - #52 0
INFO  04:07:27,707 - #43 ]
INFO  04:07:27,707 - #41 )
INFO  04:07:27,707 - #38 ;
INFO  04:07:27,708 - #12 print
INFO  04:07:27,708 - #40 (
INFO  04:07:27,708 - #49 niz
INFO  04:07:27,708 - #42 [
INFO  04:07:27,708 - #52 1
INFO  04:07:27,708 - #43 ]
INFO  04:07:27,708 - #41 )
INFO  04:07:27,708 - #38 ;
INFO  04:07:27,708 - #45 }
INFO  04:07:27,708 - #45 }
INFO  04:07:27,712 - Line 16: Using global variable name: niz
INFO  04:07:27,712 - Line 17: Using global variable name: niz
INFO  04:07:27,712 - Line 17: Access to array element detected. Array name: niz
INFO  04:07:27,712 - Line 18: Using global variable name: niz
INFO  04:07:27,712 - Line 18: Access to array element detected. Array name: niz
INFO  04:07:27,712 - Line 20: Using global variable name: nizch
INFO  04:07:27,712 - Line 21: Using global variable name: nizch
INFO  04:07:27,712 - Line 21: Access to array element detected. Array name: nizch
INFO  04:07:27,712 - Line 23: Using global variable name: niz
INFO  04:07:27,712 - Line 23: Access to array element detected. Array name: niz
INFO  04:07:27,712 - Line 23: Using global variable name: nizch
INFO  04:07:27,712 - Line 23: Access to array element detected. Array name: nizch
INFO  04:07:27,712 - Line 23: Method Call detected. Method name: ord
INFO  04:07:27,712 - Line 24: Using global variable name: niz
INFO  04:07:27,713 - Line 24: Access to array element detected. Array name: niz
INFO  04:07:27,714 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:09:25,681 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:09:25,700 - #2 program
INFO  04:09:25,700 - #49 test301
INFO  04:09:25,700 - #7 const
INFO  04:09:25,700 - #49 int
INFO  04:09:25,700 - #49 nula
INFO  04:09:25,700 - #27 =
INFO  04:09:25,701 - #52 0
INFO  04:09:25,701 - #38 ;
INFO  04:09:25,701 - #7 const
INFO  04:09:25,701 - #49 int
INFO  04:09:25,701 - #49 jedan
INFO  04:09:25,701 - #27 =
INFO  04:09:25,701 - #52 1
INFO  04:09:25,701 - #38 ;
INFO  04:09:25,701 - #7 const
INFO  04:09:25,701 - #49 int
INFO  04:09:25,701 - #49 pet
INFO  04:09:25,701 - #27 =
INFO  04:09:25,701 - #52 5
INFO  04:09:25,702 - #38 ;
INFO  04:09:25,702 - #49 int
INFO  04:09:25,702 - #49 niz
INFO  04:09:25,702 - #42 [
INFO  04:09:25,702 - #43 ]
INFO  04:09:25,702 - #38 ;
INFO  04:09:25,702 - #49 char
INFO  04:09:25,702 - #49 nizch
INFO  04:09:25,702 - #42 [
INFO  04:09:25,702 - #43 ]
INFO  04:09:25,702 - #38 ;
INFO  04:09:25,702 - #49 char
INFO  04:09:25,702 - #49 a
INFO  04:09:25,702 - #38 ;
INFO  04:09:25,703 - #44 {
INFO  04:09:25,703 - #14 void
INFO  04:09:25,703 - #49 main
INFO  04:09:25,703 - #40 (
INFO  04:09:25,703 - #41 )
INFO  04:09:25,703 - #44 {
INFO  04:09:25,704 - #49 niz
INFO  04:09:25,704 - #27 =
INFO  04:09:25,704 - #11 new
INFO  04:09:25,704 - #49 int
INFO  04:09:25,704 - #42 [
INFO  04:09:25,704 - #52 3
INFO  04:09:25,704 - #43 ]
INFO  04:09:25,704 - #38 ;
INFO  04:09:25,704 - #49 niz
INFO  04:09:25,705 - #42 [
INFO  04:09:25,705 - #52 0
INFO  04:09:25,705 - #43 ]
INFO  04:09:25,705 - #27 =
INFO  04:09:25,705 - #52 1
INFO  04:09:25,705 - #38 ;
INFO  04:09:25,705 - #12 print
INFO  04:09:25,705 - #40 (
INFO  04:09:25,705 - #49 niz
INFO  04:09:25,705 - #42 [
INFO  04:09:25,705 - #52 0
INFO  04:09:25,705 - #43 ]
INFO  04:09:25,705 - #41 )
INFO  04:09:25,705 - #38 ;
INFO  04:09:25,705 - #49 nizch
INFO  04:09:25,705 - #27 =
INFO  04:09:25,705 - #11 new
INFO  04:09:25,705 - #49 char
INFO  04:09:25,705 - #42 [
INFO  04:09:25,705 - #52 3
INFO  04:09:25,705 - #43 ]
INFO  04:09:25,705 - #38 ;
INFO  04:09:25,705 - #49 nizch
INFO  04:09:25,705 - #42 [
INFO  04:09:25,705 - #52 0
INFO  04:09:25,705 - #43 ]
INFO  04:09:25,705 - #27 =
INFO  04:09:25,705 - #51 a
INFO  04:09:25,705 - #38 ;
INFO  04:09:25,705 - #49 niz
INFO  04:09:25,705 - #42 [
INFO  04:09:25,705 - #52 1
INFO  04:09:25,705 - #43 ]
INFO  04:09:25,705 - #27 =
INFO  04:09:25,705 - #49 ord
INFO  04:09:25,705 - #40 (
INFO  04:09:25,705 - #49 nizch
INFO  04:09:25,705 - #42 [
INFO  04:09:25,705 - #52 0
INFO  04:09:25,705 - #43 ]
INFO  04:09:25,705 - #41 )
INFO  04:09:25,706 - #38 ;
INFO  04:09:25,706 - #12 print
INFO  04:09:25,706 - #40 (
INFO  04:09:25,706 - #51 a
INFO  04:09:25,706 - #41 )
INFO  04:09:25,706 - #38 ;
INFO  04:09:25,706 - #45 }
INFO  04:09:25,706 - #45 }
INFO  04:09:25,710 - Line 16: Using global variable name: niz
INFO  04:09:25,710 - Line 17: Using global variable name: niz
INFO  04:09:25,710 - Line 17: Access to array element detected. Array name: niz
INFO  04:09:25,710 - Line 18: Using global variable name: niz
INFO  04:09:25,710 - Line 18: Access to array element detected. Array name: niz
INFO  04:09:25,710 - Line 20: Using global variable name: nizch
INFO  04:09:25,710 - Line 21: Using global variable name: nizch
INFO  04:09:25,710 - Line 21: Access to array element detected. Array name: nizch
INFO  04:09:25,710 - Line 23: Using global variable name: niz
INFO  04:09:25,710 - Line 23: Access to array element detected. Array name: niz
INFO  04:09:25,710 - Line 23: Using global variable name: nizch
INFO  04:09:25,710 - Line 23: Access to array element detected. Array name: nizch
INFO  04:09:25,710 - Line 23: Method Call detected. Method name: ord
INFO  04:09:25,711 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:15:30,479 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:15:30,497 - #2 program
INFO  04:15:30,497 - #49 test301
INFO  04:15:30,498 - #7 const
INFO  04:15:30,498 - #49 int
INFO  04:15:30,498 - #49 nula
INFO  04:15:30,498 - #27 =
INFO  04:15:30,498 - #52 0
INFO  04:15:30,498 - #38 ;
INFO  04:15:30,499 - #7 const
INFO  04:15:30,499 - #49 int
INFO  04:15:30,499 - #49 jedan
INFO  04:15:30,499 - #27 =
INFO  04:15:30,499 - #52 1
INFO  04:15:30,499 - #38 ;
INFO  04:15:30,499 - #7 const
INFO  04:15:30,499 - #49 int
INFO  04:15:30,499 - #49 pet
INFO  04:15:30,499 - #27 =
INFO  04:15:30,499 - #52 5
INFO  04:15:30,499 - #38 ;
INFO  04:15:30,499 - #49 int
INFO  04:15:30,499 - #49 niz
INFO  04:15:30,499 - #42 [
INFO  04:15:30,499 - #43 ]
INFO  04:15:30,499 - #38 ;
INFO  04:15:30,500 - #49 char
INFO  04:15:30,500 - #49 nizch
INFO  04:15:30,500 - #42 [
INFO  04:15:30,500 - #43 ]
INFO  04:15:30,500 - #38 ;
INFO  04:15:30,500 - #49 char
INFO  04:15:30,500 - #49 a
INFO  04:15:30,500 - #38 ;
INFO  04:15:30,500 - #44 {
INFO  04:15:30,500 - #14 void
INFO  04:15:30,501 - #49 main
INFO  04:15:30,501 - #40 (
INFO  04:15:30,501 - #41 )
INFO  04:15:30,501 - #44 {
INFO  04:15:30,501 - #49 niz
INFO  04:15:30,501 - #27 =
INFO  04:15:30,501 - #11 new
INFO  04:15:30,501 - #49 int
INFO  04:15:30,501 - #42 [
INFO  04:15:30,501 - #52 3
INFO  04:15:30,501 - #43 ]
INFO  04:15:30,502 - #38 ;
INFO  04:15:30,502 - #49 niz
INFO  04:15:30,502 - #42 [
INFO  04:15:30,502 - #52 0
INFO  04:15:30,502 - #43 ]
INFO  04:15:30,502 - #27 =
INFO  04:15:30,502 - #52 1
INFO  04:15:30,502 - #38 ;
INFO  04:15:30,502 - #12 print
INFO  04:15:30,503 - #40 (
INFO  04:15:30,503 - #49 niz
INFO  04:15:30,503 - #42 [
INFO  04:15:30,503 - #52 0
INFO  04:15:30,503 - #43 ]
INFO  04:15:30,503 - #41 )
INFO  04:15:30,503 - #38 ;
INFO  04:15:30,503 - #49 nizch
INFO  04:15:30,503 - #27 =
INFO  04:15:30,503 - #11 new
INFO  04:15:30,503 - #49 char
INFO  04:15:30,503 - #42 [
INFO  04:15:30,503 - #52 3
INFO  04:15:30,503 - #43 ]
INFO  04:15:30,503 - #38 ;
INFO  04:15:30,503 - #49 nizch
INFO  04:15:30,503 - #42 [
INFO  04:15:30,503 - #52 0
INFO  04:15:30,503 - #43 ]
INFO  04:15:30,503 - #27 =
INFO  04:15:30,503 - #51 a
INFO  04:15:30,503 - #38 ;
INFO  04:15:30,503 - #49 niz
INFO  04:15:30,504 - #42 [
INFO  04:15:30,504 - #52 1
INFO  04:15:30,504 - #43 ]
INFO  04:15:30,504 - #27 =
INFO  04:15:30,504 - #49 ord
INFO  04:15:30,504 - #40 (
INFO  04:15:30,504 - #49 nizch
INFO  04:15:30,504 - #42 [
INFO  04:15:30,504 - #52 0
INFO  04:15:30,504 - #43 ]
INFO  04:15:30,504 - #41 )
INFO  04:15:30,504 - #38 ;
INFO  04:15:30,504 - #12 print
INFO  04:15:30,505 - #40 (
INFO  04:15:30,505 - #51 a
INFO  04:15:30,505 - #41 )
INFO  04:15:30,505 - #38 ;
INFO  04:15:30,505 - #45 }
INFO  04:15:30,505 - #45 }
INFO  04:15:30,508 - Line 16: Using global variable name: niz
INFO  04:15:30,508 - Line 17: Using global variable name: niz
INFO  04:15:30,509 - Line 17: Access to array element detected. Array name: niz
INFO  04:15:30,509 - Line 18: Using global variable name: niz
INFO  04:15:30,509 - Line 18: Access to array element detected. Array name: niz
INFO  04:15:30,509 - Line 20: Using global variable name: nizch
INFO  04:15:30,509 - Line 21: Using global variable name: nizch
INFO  04:15:30,509 - Line 21: Access to array element detected. Array name: nizch
INFO  04:15:30,509 - Line 23: Using global variable name: niz
INFO  04:15:30,509 - Line 23: Access to array element detected. Array name: niz
INFO  04:15:30,509 - Line 23: Using global variable name: nizch
INFO  04:15:30,509 - Line 23: Access to array element detected. Array name: nizch
INFO  04:15:30,509 - Line 23: Method Call detected. Method name: ord
INFO  04:15:30,510 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:16:59,658 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:16:59,676 - #2 program
INFO  04:16:59,676 - #49 test301
INFO  04:16:59,676 - #7 const
INFO  04:16:59,677 - #49 int
INFO  04:16:59,677 - #49 nula
INFO  04:16:59,677 - #27 =
INFO  04:16:59,677 - #52 0
INFO  04:16:59,677 - #38 ;
INFO  04:16:59,677 - #7 const
INFO  04:16:59,678 - #49 int
INFO  04:16:59,678 - #49 jedan
INFO  04:16:59,678 - #27 =
INFO  04:16:59,678 - #52 1
INFO  04:16:59,678 - #38 ;
INFO  04:16:59,678 - #7 const
INFO  04:16:59,678 - #49 int
INFO  04:16:59,678 - #49 pet
INFO  04:16:59,678 - #27 =
INFO  04:16:59,678 - #52 5
INFO  04:16:59,678 - #38 ;
INFO  04:16:59,678 - #49 int
INFO  04:16:59,678 - #49 niz
INFO  04:16:59,678 - #42 [
INFO  04:16:59,678 - #43 ]
INFO  04:16:59,678 - #38 ;
INFO  04:16:59,679 - #49 char
INFO  04:16:59,679 - #49 nizch
INFO  04:16:59,679 - #42 [
INFO  04:16:59,679 - #43 ]
INFO  04:16:59,679 - #38 ;
INFO  04:16:59,679 - #49 char
INFO  04:16:59,679 - #49 a
INFO  04:16:59,679 - #38 ;
INFO  04:16:59,679 - #44 {
INFO  04:16:59,679 - #14 void
INFO  04:16:59,679 - #49 main
INFO  04:16:59,680 - #40 (
INFO  04:16:59,680 - #41 )
INFO  04:16:59,680 - #44 {
INFO  04:16:59,680 - #49 niz
INFO  04:16:59,680 - #27 =
INFO  04:16:59,680 - #11 new
INFO  04:16:59,680 - #49 int
INFO  04:16:59,680 - #42 [
INFO  04:16:59,680 - #52 3
INFO  04:16:59,680 - #43 ]
INFO  04:16:59,681 - #38 ;
INFO  04:16:59,681 - #49 niz
INFO  04:16:59,681 - #42 [
INFO  04:16:59,681 - #52 0
INFO  04:16:59,681 - #43 ]
INFO  04:16:59,681 - #27 =
INFO  04:16:59,681 - #52 1
INFO  04:16:59,681 - #38 ;
INFO  04:16:59,681 - #12 print
INFO  04:16:59,681 - #40 (
INFO  04:16:59,681 - #49 niz
INFO  04:16:59,681 - #42 [
INFO  04:16:59,682 - #52 0
INFO  04:16:59,682 - #43 ]
INFO  04:16:59,682 - #41 )
INFO  04:16:59,682 - #38 ;
INFO  04:16:59,682 - #49 nizch
INFO  04:16:59,682 - #27 =
INFO  04:16:59,682 - #11 new
INFO  04:16:59,682 - #49 char
INFO  04:16:59,682 - #42 [
INFO  04:16:59,682 - #52 3
INFO  04:16:59,682 - #43 ]
INFO  04:16:59,682 - #38 ;
INFO  04:16:59,682 - #49 nizch
INFO  04:16:59,682 - #42 [
INFO  04:16:59,682 - #52 0
INFO  04:16:59,682 - #43 ]
INFO  04:16:59,682 - #27 =
INFO  04:16:59,682 - #51 a
INFO  04:16:59,682 - #38 ;
INFO  04:16:59,682 - #49 niz
INFO  04:16:59,682 - #42 [
INFO  04:16:59,682 - #52 1
INFO  04:16:59,682 - #43 ]
INFO  04:16:59,682 - #27 =
INFO  04:16:59,683 - #49 ord
INFO  04:16:59,683 - #40 (
INFO  04:16:59,683 - #49 nizch
INFO  04:16:59,683 - #42 [
INFO  04:16:59,683 - #52 0
INFO  04:16:59,683 - #43 ]
INFO  04:16:59,683 - #41 )
INFO  04:16:59,683 - #38 ;
INFO  04:16:59,683 - #12 print
INFO  04:16:59,683 - #40 (
INFO  04:16:59,684 - #51 a
INFO  04:16:59,684 - #41 )
INFO  04:16:59,684 - #38 ;
INFO  04:16:59,684 - #45 }
INFO  04:16:59,684 - #45 }
INFO  04:16:59,687 - Line 16: Using global variable name: niz
INFO  04:16:59,687 - Line 17: Using global variable name: niz
INFO  04:16:59,687 - Line 17: Access to array element detected. Array name: niz
INFO  04:16:59,688 - Line 18: Using global variable name: niz
INFO  04:16:59,688 - Line 18: Access to array element detected. Array name: niz
INFO  04:16:59,688 - Line 20: Using global variable name: nizch
INFO  04:16:59,688 - Line 21: Using global variable name: nizch
INFO  04:16:59,688 - Line 21: Access to array element detected. Array name: nizch
INFO  04:16:59,688 - Line 23: Using global variable name: niz
INFO  04:16:59,688 - Line 23: Access to array element detected. Array name: niz
INFO  04:16:59,688 - Line 23: Using global variable name: nizch
INFO  04:16:59,688 - Line 23: Access to array element detected. Array name: nizch
INFO  04:16:59,688 - Line 23: Method Call detected. Method name: ord
INFO  04:16:59,689 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:17:32,836 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:17:32,854 - #2 program
INFO  04:17:32,854 - #49 test301
INFO  04:17:32,854 - #7 const
INFO  04:17:32,854 - #49 int
INFO  04:17:32,854 - #49 nula
INFO  04:17:32,854 - #27 =
INFO  04:17:32,854 - #52 0
INFO  04:17:32,855 - #38 ;
INFO  04:17:32,855 - #7 const
INFO  04:17:32,855 - #49 int
INFO  04:17:32,855 - #49 jedan
INFO  04:17:32,855 - #27 =
INFO  04:17:32,855 - #52 1
INFO  04:17:32,855 - #38 ;
INFO  04:17:32,855 - #7 const
INFO  04:17:32,855 - #49 int
INFO  04:17:32,855 - #49 pet
INFO  04:17:32,855 - #27 =
INFO  04:17:32,855 - #52 5
INFO  04:17:32,855 - #38 ;
INFO  04:17:32,855 - #49 int
INFO  04:17:32,855 - #49 niz
INFO  04:17:32,856 - #42 [
INFO  04:17:32,856 - #43 ]
INFO  04:17:32,856 - #38 ;
INFO  04:17:32,856 - #49 char
INFO  04:17:32,856 - #49 nizch
INFO  04:17:32,856 - #42 [
INFO  04:17:32,856 - #43 ]
INFO  04:17:32,856 - #38 ;
INFO  04:17:32,856 - #44 {
INFO  04:17:32,856 - #14 void
INFO  04:17:32,856 - #49 main
INFO  04:17:32,857 - #40 (
INFO  04:17:32,857 - #41 )
INFO  04:17:32,857 - #49 int
INFO  04:17:32,857 - #49 bodovi
INFO  04:17:32,857 - #38 ;
INFO  04:17:32,857 - #49 bool
INFO  04:17:32,858 - #49 bt
INFO  04:17:32,858 - #38 ;
INFO  04:17:32,858 - #44 {
INFO  04:17:32,858 - #49 bodovi
INFO  04:17:32,858 - #27 =
INFO  04:17:32,858 - #52 0
INFO  04:17:32,858 - #38 ;
INFO  04:17:32,858 - #49 bodovi
INFO  04:17:32,859 - #36 ++
INFO  04:17:32,859 - #38 ;
INFO  04:17:32,859 - #49 bodovi
INFO  04:17:32,859 - #27 =
INFO  04:17:32,859 - #49 bodovi
INFO  04:17:32,859 - #22 +
INFO  04:17:32,859 - #49 jedan
INFO  04:17:32,859 - #38 ;
INFO  04:17:32,859 - #49 bodovi
INFO  04:17:32,859 - #27 =
INFO  04:17:32,859 - #49 bodovi
INFO  04:17:32,859 - #24 *
INFO  04:17:32,859 - #49 pet
INFO  04:17:32,860 - #38 ;
INFO  04:17:32,860 - #49 bodovi
INFO  04:17:32,860 - #37 --
INFO  04:17:32,860 - #38 ;
INFO  04:17:32,860 - #12 print
INFO  04:17:32,860 - #40 (
INFO  04:17:32,860 - #49 bodovi
INFO  04:17:32,860 - #41 )
INFO  04:17:32,860 - #38 ;
INFO  04:17:32,860 - #49 niz
INFO  04:17:32,860 - #27 =
INFO  04:17:32,860 - #11 new
INFO  04:17:32,860 - #49 int
INFO  04:17:32,860 - #42 [
INFO  04:17:32,860 - #52 3
INFO  04:17:32,861 - #43 ]
INFO  04:17:32,861 - #38 ;
INFO  04:17:32,861 - #49 niz
INFO  04:17:32,861 - #42 [
INFO  04:17:32,861 - #49 nula
INFO  04:17:32,861 - #43 ]
INFO  04:17:32,861 - #27 =
INFO  04:17:32,861 - #49 jedan
INFO  04:17:32,861 - #38 ;
INFO  04:17:32,861 - #49 niz
INFO  04:17:32,861 - #42 [
INFO  04:17:32,861 - #52 1
INFO  04:17:32,861 - #43 ]
INFO  04:17:32,861 - #27 =
INFO  04:17:32,861 - #52 2
INFO  04:17:32,861 - #38 ;
INFO  04:17:32,861 - #49 niz
INFO  04:17:32,861 - #42 [
INFO  04:17:32,861 - #49 niz
INFO  04:17:32,861 - #42 [
INFO  04:17:32,861 - #49 jedan
INFO  04:17:32,861 - #43 ]
INFO  04:17:32,861 - #43 ]
INFO  04:17:32,861 - #27 =
INFO  04:17:32,861 - #49 niz
INFO  04:17:32,861 - #42 [
INFO  04:17:32,861 - #49 niz
INFO  04:17:32,862 - #42 [
INFO  04:17:32,862 - #52 0
INFO  04:17:32,862 - #43 ]
INFO  04:17:32,862 - #43 ]
INFO  04:17:32,862 - #24 *
INFO  04:17:32,862 - #52 3
INFO  04:17:32,862 - #38 ;
INFO  04:17:32,862 - #49 bodovi
INFO  04:17:32,862 - #27 =
INFO  04:17:32,862 - #49 niz
INFO  04:17:32,862 - #42 [
INFO  04:17:32,862 - #52 2
INFO  04:17:32,862 - #43 ]
INFO  04:17:32,862 - #25 /
INFO  04:17:32,862 - #49 niz
INFO  04:17:32,862 - #42 [
INFO  04:17:32,862 - #52 0
INFO  04:17:32,862 - #43 ]
INFO  04:17:32,862 - #38 ;
INFO  04:17:32,862 - #12 print
INFO  04:17:32,862 - #40 (
INFO  04:17:32,863 - #49 bodovi
INFO  04:17:32,863 - #41 )
INFO  04:17:32,863 - #38 ;
INFO  04:17:32,863 - #12 print
INFO  04:17:32,863 - #40 (
INFO  04:17:32,863 - #49 niz
INFO  04:17:32,863 - #42 [
INFO  04:17:32,863 - #52 2
INFO  04:17:32,863 - #43 ]
INFO  04:17:32,863 - #41 )
INFO  04:17:32,863 - #38 ;
INFO  04:17:32,863 - #49 nizch
INFO  04:17:32,863 - #27 =
INFO  04:17:32,863 - #11 new
INFO  04:17:32,863 - #49 char
INFO  04:17:32,863 - #42 [
INFO  04:17:32,863 - #52 3
INFO  04:17:32,863 - #43 ]
INFO  04:17:32,863 - #38 ;
INFO  04:17:32,863 - #49 nizch
INFO  04:17:32,863 - #42 [
INFO  04:17:32,863 - #52 0
INFO  04:17:32,863 - #43 ]
INFO  04:17:32,863 - #27 =
INFO  04:17:32,863 - #51 a
INFO  04:17:32,863 - #38 ;
INFO  04:17:32,863 - #49 nizch
INFO  04:17:32,863 - #42 [
INFO  04:17:32,863 - #49 jedan
INFO  04:17:32,863 - #43 ]
INFO  04:17:32,863 - #27 =
INFO  04:17:32,863 - #51 b
INFO  04:17:32,863 - #38 ;
INFO  04:17:32,863 - #49 nizch
INFO  04:17:32,864 - #42 [
INFO  04:17:32,864 - #49 pet
INFO  04:17:32,864 - #23 -
INFO  04:17:32,864 - #52 3
INFO  04:17:32,864 - #43 ]
INFO  04:17:32,864 - #27 =
INFO  04:17:32,864 - #51 c
INFO  04:17:32,864 - #38 ;
INFO  04:17:32,864 - #12 print
INFO  04:17:32,864 - #40 (
INFO  04:17:32,864 - #49 nizch
INFO  04:17:32,864 - #42 [
INFO  04:17:32,864 - #52 1
INFO  04:17:32,864 - #43 ]
INFO  04:17:32,864 - #41 )
INFO  04:17:32,864 - #38 ;
INFO  04:17:32,864 - #12 print
INFO  04:17:32,864 - #40 (
INFO  04:17:32,864 - #49 nizch
INFO  04:17:32,864 - #42 [
INFO  04:17:32,864 - #49 jedan
INFO  04:17:32,864 - #24 *
INFO  04:17:32,864 - #52 2
INFO  04:17:32,864 - #43 ]
INFO  04:17:32,864 - #41 )
INFO  04:17:32,864 - #38 ;
INFO  04:17:32,864 - #49 bodovi
INFO  04:17:32,864 - #27 =
INFO  04:17:32,864 - #49 bodovi
INFO  04:17:32,864 - #22 +
INFO  04:17:32,864 - #40 (
INFO  04:17:32,864 - #49 pet
INFO  04:17:32,864 - #24 *
INFO  04:17:32,865 - #49 jedan
INFO  04:17:32,865 - #23 -
INFO  04:17:32,865 - #52 1
INFO  04:17:32,865 - #41 )
INFO  04:17:32,865 - #24 *
INFO  04:17:32,865 - #49 bodovi
INFO  04:17:32,865 - #23 -
INFO  04:17:32,865 - #40 (
INFO  04:17:32,865 - #52 3
INFO  04:17:32,865 - #26 %
INFO  04:17:32,865 - #52 2
INFO  04:17:32,865 - #22 +
INFO  04:17:32,865 - #52 3
INFO  04:17:32,865 - #24 *
INFO  04:17:32,865 - #52 2
INFO  04:17:32,865 - #23 -
INFO  04:17:32,865 - #52 3
INFO  04:17:32,865 - #41 )
INFO  04:17:32,866 - #38 ;
INFO  04:17:32,866 - #12 print
INFO  04:17:32,866 - #40 (
INFO  04:17:32,866 - #49 bodovi
INFO  04:17:32,866 - #41 )
INFO  04:17:32,866 - #38 ;
INFO  04:17:32,866 - #45 }
INFO  04:17:32,866 - #45 }
INFO  04:17:32,870 - Line 17: Using local variable name: bodovi
INFO  04:17:32,870 - Line 18: Using local variable name: bodovi
INFO  04:17:32,870 - Line 19: Using local variable name: bodovi
INFO  04:17:32,870 - Line 19: Using local variable name: bodovi
INFO  04:17:32,870 - Line 20: Using local variable name: bodovi
INFO  04:17:32,870 - Line 20: Using local variable name: bodovi
INFO  04:17:32,870 - Line 21: Using local variable name: bodovi
INFO  04:17:32,870 - Line 22: Using local variable name: bodovi
INFO  04:17:32,870 - Line 25: Using global variable name: niz
INFO  04:17:32,870 - Line 26: Using global variable name: niz
INFO  04:17:32,870 - Line 26: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 27: Using global variable name: niz
INFO  04:17:32,870 - Line 27: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 28: Using global variable name: niz
INFO  04:17:32,870 - Line 28: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 28: Using global variable name: niz
INFO  04:17:32,870 - Line 28: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 28: Using global variable name: niz
INFO  04:17:32,870 - Line 28: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 28: Using global variable name: niz
INFO  04:17:32,870 - Line 28: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 29: Using local variable name: bodovi
INFO  04:17:32,870 - Line 29: Using global variable name: niz
INFO  04:17:32,870 - Line 29: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 29: Using global variable name: niz
INFO  04:17:32,870 - Line 29: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 30: Using local variable name: bodovi
INFO  04:17:32,870 - Line 31: Using global variable name: niz
INFO  04:17:32,870 - Line 31: Access to array element detected. Array name: niz
INFO  04:17:32,870 - Line 34: Using global variable name: nizch
INFO  04:17:32,870 - Line 35: Using global variable name: nizch
INFO  04:17:32,870 - Line 35: Access to array element detected. Array name: nizch
INFO  04:17:32,870 - Line 36: Using global variable name: nizch
INFO  04:17:32,870 - Line 36: Access to array element detected. Array name: nizch
INFO  04:17:32,870 - Line 37: Using global variable name: nizch
INFO  04:17:32,870 - Line 37: Access to array element detected. Array name: nizch
INFO  04:17:32,870 - Line 38: Using global variable name: nizch
INFO  04:17:32,870 - Line 38: Access to array element detected. Array name: nizch
INFO  04:17:32,870 - Line 39: Using global variable name: nizch
INFO  04:17:32,870 - Line 39: Access to array element detected. Array name: nizch
INFO  04:17:32,870 - Line 42: Using local variable name: bodovi
INFO  04:17:32,870 - Line 42: Using local variable name: bodovi
INFO  04:17:32,870 - Line 42: Using local variable name: bodovi
INFO  04:17:32,871 - Line 43: Using local variable name: bodovi
INFO  04:17:32,872 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:27:39,869 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:27:39,888 - #2 program
INFO  04:27:39,888 - #49 MJProgram
INFO  04:27:39,888 - #49 int
INFO  04:27:39,888 - #49 x
INFO  04:27:39,888 - #38 ;
INFO  04:27:39,889 - #49 int
INFO  04:27:39,889 - #49 y
INFO  04:27:39,889 - #38 ;
INFO  04:27:39,889 - #44 {
INFO  04:27:39,889 - #49 int
INFO  04:27:39,889 - #49 a
INFO  04:27:39,889 - #40 (
INFO  04:27:39,889 - #49 int
INFO  04:27:39,890 - #49 x
INFO  04:27:39,890 - #39 ,
INFO  04:27:39,890 - #49 int
INFO  04:27:39,890 - #47 .
INFO  04:27:39,890 - #47 .
INFO  04:27:39,890 - #47 .
INFO  04:27:39,890 - #49 y
INFO  04:27:39,890 - #41 )
INFO  04:27:39,890 - #44 {
INFO  04:27:39,890 - #49 x
INFO  04:27:39,891 - #27 =
INFO  04:27:39,891 - #52 0
INFO  04:27:39,891 - #38 ;
INFO  04:27:39,891 - #9 do
INFO  04:27:39,891 - #44 {
INFO  04:27:39,891 - #12 print
INFO  04:27:39,891 - #40 (
INFO  04:27:39,891 - #49 y
INFO  04:27:39,891 - #42 [
INFO  04:27:39,891 - #49 x
INFO  04:27:39,892 - #43 ]
INFO  04:27:39,892 - #41 )
INFO  04:27:39,892 - #38 ;
INFO  04:27:39,892 - #12 print
INFO  04:27:39,892 - #40 (
INFO  04:27:39,892 - #49 eol
INFO  04:27:39,892 - #41 )
INFO  04:27:39,892 - #38 ;
INFO  04:27:39,892 - #49 x
INFO  04:27:39,892 - #36 ++
INFO  04:27:39,892 - #38 ;
INFO  04:27:39,892 - #45 }
INFO  04:27:39,892 - #10 while
INFO  04:27:39,892 - #40 (
INFO  04:27:39,893 - #49 x
INFO  04:27:39,893 - #32 <
INFO  04:27:39,893 - #52 3
INFO  04:27:39,893 - #41 )
INFO  04:27:39,894 - #38 ;
INFO  04:27:39,894 - #15 return
INFO  04:27:39,894 - #52 0
INFO  04:27:39,894 - #38 ;
INFO  04:27:39,894 - #45 }
INFO  04:27:39,894 - #14 void
INFO  04:27:39,894 - #49 main
INFO  04:27:39,895 - #40 (
INFO  04:27:39,895 - #41 )
INFO  04:27:39,895 - #49 int
INFO  04:27:39,895 - #49 niz
INFO  04:27:39,895 - #42 [
INFO  04:27:39,895 - #43 ]
INFO  04:27:39,895 - #39 ,
INFO  04:27:39,895 - #49 p
INFO  04:27:39,895 - #38 ;
INFO  04:27:39,895 - #44 {
INFO  04:27:39,895 - #49 p
INFO  04:27:39,895 - #27 =
INFO  04:27:39,896 - #49 a
INFO  04:27:39,896 - #40 (
INFO  04:27:39,896 - #52 1
INFO  04:27:39,896 - #39 ,
INFO  04:27:39,896 - #52 8
INFO  04:27:39,896 - #39 ,
INFO  04:27:39,896 - #52 9
INFO  04:27:39,896 - #39 ,
INFO  04:27:39,896 - #52 10
INFO  04:27:39,896 - #41 )
INFO  04:27:39,896 - #38 ;
INFO  04:27:39,897 - #12 print
INFO  04:27:39,897 - #40 (
INFO  04:27:39,897 - #49 eol
INFO  04:27:39,897 - #41 )
INFO  04:27:39,897 - #38 ;
INFO  04:27:39,897 - #12 print
INFO  04:27:39,897 - #40 (
INFO  04:27:39,897 - #49 p
INFO  04:27:39,897 - #41 )
INFO  04:27:39,897 - #38 ;
INFO  04:27:39,897 - #45 }
INFO  04:27:39,897 - #45 }
INFO  04:27:39,900 - Line 5: Access to formal argument detected. Method name: a, argument name: x
INFO  04:27:39,901 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  04:27:39,901 - Line 7: Access to array element detected. Array name: y
INFO  04:27:39,901 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  04:27:39,901 - Line 9: Access to formal argument detected. Method name: a, argument name: x
INFO  04:27:39,901 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:27:39,901 - Line 16: Using local variable name: p
INFO  04:27:39,901 - Line 16: Method Call detected. Method name: a
INFO  04:27:39,901 - Method a has varArgs with 3 args
INFO  04:27:39,901 - Line 18: Using local variable name: p
INFO  04:27:39,903 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:28:27,838 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:28:27,858 - #2 program
INFO  04:28:27,858 - #49 MJProgram
INFO  04:28:27,858 - #49 int
INFO  04:28:27,858 - #49 x
INFO  04:28:27,858 - #38 ;
INFO  04:28:27,859 - #49 int
INFO  04:28:27,859 - #49 y
INFO  04:28:27,859 - #38 ;
INFO  04:28:27,859 - #49 int
INFO  04:28:27,859 - #49 q
INFO  04:28:27,859 - #42 [
INFO  04:28:27,859 - #43 ]
INFO  04:28:27,859 - #38 ;
INFO  04:28:27,859 - #44 {
INFO  04:28:27,859 - #49 int
INFO  04:28:27,860 - #49 a
INFO  04:28:27,860 - #40 (
INFO  04:28:27,860 - #49 int
INFO  04:28:27,860 - #49 x
INFO  04:28:27,860 - #39 ,
INFO  04:28:27,860 - #49 int
INFO  04:28:27,860 - #47 .
INFO  04:28:27,860 - #47 .
INFO  04:28:27,860 - #47 .
INFO  04:28:27,860 - #49 y
INFO  04:28:27,860 - #41 )
INFO  04:28:27,860 - #44 {
INFO  04:28:27,861 - #49 x
INFO  04:28:27,861 - #27 =
INFO  04:28:27,861 - #52 0
INFO  04:28:27,861 - #38 ;
INFO  04:28:27,861 - #9 do
INFO  04:28:27,861 - #44 {
INFO  04:28:27,861 - #12 print
INFO  04:28:27,861 - #40 (
INFO  04:28:27,862 - #49 y
INFO  04:28:27,862 - #42 [
INFO  04:28:27,862 - #49 x
INFO  04:28:27,862 - #43 ]
INFO  04:28:27,862 - #41 )
INFO  04:28:27,862 - #38 ;
INFO  04:28:27,862 - #12 print
INFO  04:28:27,862 - #40 (
INFO  04:28:27,862 - #49 eol
INFO  04:28:27,862 - #41 )
INFO  04:28:27,862 - #38 ;
INFO  04:28:27,862 - #49 x
INFO  04:28:27,862 - #36 ++
INFO  04:28:27,862 - #38 ;
INFO  04:28:27,862 - #45 }
INFO  04:28:27,862 - #10 while
INFO  04:28:27,863 - #40 (
INFO  04:28:27,863 - #49 x
INFO  04:28:27,863 - #32 <
INFO  04:28:27,863 - #52 3
INFO  04:28:27,863 - #41 )
INFO  04:28:27,863 - #38 ;
INFO  04:28:27,864 - #15 return
INFO  04:28:27,864 - #52 0
INFO  04:28:27,864 - #38 ;
INFO  04:28:27,864 - #45 }
INFO  04:28:27,864 - #14 void
INFO  04:28:27,864 - #49 main
INFO  04:28:27,864 - #40 (
INFO  04:28:27,864 - #41 )
INFO  04:28:27,864 - #49 int
INFO  04:28:27,864 - #49 niz
INFO  04:28:27,864 - #42 [
INFO  04:28:27,864 - #43 ]
INFO  04:28:27,864 - #39 ,
INFO  04:28:27,864 - #49 p
INFO  04:28:27,864 - #38 ;
INFO  04:28:27,865 - #44 {
INFO  04:28:27,865 - #49 p
INFO  04:28:27,865 - #27 =
INFO  04:28:27,865 - #49 a
INFO  04:28:27,865 - #40 (
INFO  04:28:27,865 - #52 1
INFO  04:28:27,865 - #39 ,
INFO  04:28:27,865 - #52 8
INFO  04:28:27,865 - #39 ,
INFO  04:28:27,865 - #52 9
INFO  04:28:27,865 - #39 ,
INFO  04:28:27,865 - #52 10
INFO  04:28:27,865 - #41 )
INFO  04:28:27,865 - #38 ;
INFO  04:28:27,866 - #12 print
INFO  04:28:27,866 - #40 (
INFO  04:28:27,866 - #49 eol
INFO  04:28:27,866 - #41 )
INFO  04:28:27,866 - #38 ;
INFO  04:28:27,866 - #12 print
INFO  04:28:27,866 - #40 (
INFO  04:28:27,866 - #49 p
INFO  04:28:27,866 - #41 )
INFO  04:28:27,866 - #38 ;
INFO  04:28:27,866 - #49 q
INFO  04:28:27,866 - #27 =
INFO  04:28:27,866 - #11 new
INFO  04:28:27,866 - #49 int
INFO  04:28:27,866 - #42 [
INFO  04:28:27,866 - #52 5
INFO  04:28:27,866 - #43 ]
INFO  04:28:27,866 - #38 ;
INFO  04:28:27,866 - #49 q
INFO  04:28:27,866 - #42 [
INFO  04:28:27,866 - #52 0
INFO  04:28:27,866 - #43 ]
INFO  04:28:27,866 - #27 =
INFO  04:28:27,866 - #52 2
INFO  04:28:27,866 - #24 *
INFO  04:28:27,866 - #49 a
INFO  04:28:27,867 - #40 (
INFO  04:28:27,867 - #52 1
INFO  04:28:27,867 - #39 ,
INFO  04:28:27,867 - #52 2
INFO  04:28:27,867 - #41 )
INFO  04:28:27,867 - #38 ;
INFO  04:28:27,867 - #12 print
INFO  04:28:27,867 - #40 (
INFO  04:28:27,867 - #49 q
INFO  04:28:27,867 - #42 [
INFO  04:28:27,867 - #52 0
INFO  04:28:27,867 - #43 ]
INFO  04:28:27,867 - #41 )
INFO  04:28:27,867 - #38 ;
INFO  04:28:27,867 - #45 }
INFO  04:28:27,867 - #45 }
INFO  04:28:27,871 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:28:27,871 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:28:27,871 - Line 8: Access to array element detected. Array name: y
INFO  04:28:27,871 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:28:27,871 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:28:27,872 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:28:27,872 - Line 17: Using local variable name: p
INFO  04:28:27,872 - Line 17: Method Call detected. Method name: a
INFO  04:28:27,872 - Method a has varArgs with 3 args
INFO  04:28:27,872 - Line 19: Using local variable name: p
INFO  04:28:27,872 - Line 21: Using global variable name: q
INFO  04:28:27,872 - Line 22: Using global variable name: q
INFO  04:28:27,872 - Line 22: Access to array element detected. Array name: q
INFO  04:28:27,872 - Line 22: Method Call detected. Method name: a
INFO  04:28:27,872 - Method a has varArgs with 1 args
INFO  04:28:27,872 - Line 23: Using global variable name: q
INFO  04:28:27,872 - Line 23: Access to array element detected. Array name: q
INFO  04:28:27,874 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:29:26,736 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:29:26,755 - #2 program
INFO  04:29:26,755 - #49 MJProgram
INFO  04:29:26,755 - #49 int
INFO  04:29:26,756 - #49 x
INFO  04:29:26,756 - #38 ;
INFO  04:29:26,756 - #49 int
INFO  04:29:26,756 - #49 y
INFO  04:29:26,756 - #38 ;
INFO  04:29:26,756 - #49 int
INFO  04:29:26,756 - #49 q
INFO  04:29:26,757 - #42 [
INFO  04:29:26,757 - #43 ]
INFO  04:29:26,757 - #38 ;
INFO  04:29:26,757 - #44 {
INFO  04:29:26,757 - #49 int
INFO  04:29:26,757 - #49 a
INFO  04:29:26,757 - #40 (
INFO  04:29:26,757 - #49 int
INFO  04:29:26,757 - #49 x
INFO  04:29:26,757 - #39 ,
INFO  04:29:26,758 - #49 int
INFO  04:29:26,758 - #47 .
INFO  04:29:26,758 - #47 .
INFO  04:29:26,758 - #47 .
INFO  04:29:26,758 - #49 y
INFO  04:29:26,758 - #41 )
INFO  04:29:26,758 - #44 {
INFO  04:29:26,758 - #49 x
INFO  04:29:26,758 - #27 =
INFO  04:29:26,758 - #52 0
INFO  04:29:26,758 - #38 ;
INFO  04:29:26,759 - #9 do
INFO  04:29:26,759 - #44 {
INFO  04:29:26,759 - #12 print
INFO  04:29:26,759 - #40 (
INFO  04:29:26,759 - #49 y
INFO  04:29:26,759 - #42 [
INFO  04:29:26,759 - #49 x
INFO  04:29:26,759 - #43 ]
INFO  04:29:26,759 - #41 )
INFO  04:29:26,760 - #38 ;
INFO  04:29:26,760 - #12 print
INFO  04:29:26,760 - #40 (
INFO  04:29:26,760 - #49 eol
INFO  04:29:26,760 - #41 )
INFO  04:29:26,760 - #38 ;
INFO  04:29:26,760 - #49 x
INFO  04:29:26,760 - #36 ++
INFO  04:29:26,760 - #38 ;
INFO  04:29:26,760 - #45 }
INFO  04:29:26,760 - #10 while
INFO  04:29:26,760 - #40 (
INFO  04:29:26,761 - #49 x
INFO  04:29:26,761 - #32 <
INFO  04:29:26,761 - #52 3
INFO  04:29:26,761 - #41 )
INFO  04:29:26,761 - #38 ;
INFO  04:29:26,762 - #15 return
INFO  04:29:26,762 - #52 0
INFO  04:29:26,762 - #38 ;
INFO  04:29:26,762 - #45 }
INFO  04:29:26,762 - #14 void
INFO  04:29:26,762 - #49 main
INFO  04:29:26,762 - #40 (
INFO  04:29:26,762 - #41 )
INFO  04:29:26,762 - #49 int
INFO  04:29:26,762 - #49 niz
INFO  04:29:26,762 - #42 [
INFO  04:29:26,762 - #43 ]
INFO  04:29:26,762 - #39 ,
INFO  04:29:26,762 - #49 p
INFO  04:29:26,763 - #38 ;
INFO  04:29:26,763 - #44 {
INFO  04:29:26,763 - #49 p
INFO  04:29:26,763 - #27 =
INFO  04:29:26,763 - #49 a
INFO  04:29:26,763 - #40 (
INFO  04:29:26,763 - #52 1
INFO  04:29:26,763 - #39 ,
INFO  04:29:26,763 - #52 8
INFO  04:29:26,763 - #39 ,
INFO  04:29:26,763 - #52 9
INFO  04:29:26,763 - #39 ,
INFO  04:29:26,763 - #52 10
INFO  04:29:26,763 - #41 )
INFO  04:29:26,763 - #38 ;
INFO  04:29:26,764 - #12 print
INFO  04:29:26,764 - #40 (
INFO  04:29:26,764 - #49 eol
INFO  04:29:26,764 - #41 )
INFO  04:29:26,764 - #38 ;
INFO  04:29:26,764 - #12 print
INFO  04:29:26,764 - #40 (
INFO  04:29:26,764 - #49 p
INFO  04:29:26,764 - #41 )
INFO  04:29:26,764 - #38 ;
INFO  04:29:26,764 - #49 q
INFO  04:29:26,764 - #27 =
INFO  04:29:26,764 - #11 new
INFO  04:29:26,764 - #49 int
INFO  04:29:26,764 - #42 [
INFO  04:29:26,764 - #52 5
INFO  04:29:26,764 - #43 ]
INFO  04:29:26,764 - #38 ;
INFO  04:29:26,764 - #49 q
INFO  04:29:26,764 - #42 [
INFO  04:29:26,764 - #52 0
INFO  04:29:26,764 - #43 ]
INFO  04:29:26,764 - #27 =
INFO  04:29:26,765 - #52 2
INFO  04:29:26,765 - #24 *
INFO  04:29:26,765 - #49 a
INFO  04:29:26,765 - #40 (
INFO  04:29:26,765 - #52 1
INFO  04:29:26,765 - #39 ,
INFO  04:29:26,765 - #52 2
INFO  04:29:26,765 - #39 ,
INFO  04:29:26,765 - #52 3
INFO  04:29:26,765 - #39 ,
INFO  04:29:26,765 - #52 4
INFO  04:29:26,765 - #41 )
INFO  04:29:26,765 - #38 ;
INFO  04:29:26,765 - #12 print
INFO  04:29:26,765 - #40 (
INFO  04:29:26,765 - #49 q
INFO  04:29:26,766 - #42 [
INFO  04:29:26,766 - #52 0
INFO  04:29:26,766 - #43 ]
INFO  04:29:26,766 - #41 )
INFO  04:29:26,766 - #38 ;
INFO  04:29:26,766 - #45 }
INFO  04:29:26,766 - #45 }
INFO  04:29:26,769 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:26,769 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:26,769 - Line 8: Access to array element detected. Array name: y
INFO  04:29:26,769 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:29:26,769 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:26,770 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:26,770 - Line 17: Using local variable name: p
INFO  04:29:26,770 - Line 17: Method Call detected. Method name: a
INFO  04:29:26,770 - Method a has varArgs with 3 args
INFO  04:29:26,770 - Line 19: Using local variable name: p
INFO  04:29:26,770 - Line 21: Using global variable name: q
INFO  04:29:26,770 - Line 22: Using global variable name: q
INFO  04:29:26,770 - Line 22: Access to array element detected. Array name: q
INFO  04:29:26,770 - Line 22: Method Call detected. Method name: a
INFO  04:29:26,770 - Method a has varArgs with 3 args
INFO  04:29:26,770 - Line 23: Using global variable name: q
INFO  04:29:26,770 - Line 23: Access to array element detected. Array name: q
INFO  04:29:26,772 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:29:36,634 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:29:36,652 - #2 program
INFO  04:29:36,652 - #49 MJProgram
INFO  04:29:36,652 - #49 int
INFO  04:29:36,653 - #49 x
INFO  04:29:36,653 - #38 ;
INFO  04:29:36,653 - #49 int
INFO  04:29:36,653 - #49 y
INFO  04:29:36,653 - #38 ;
INFO  04:29:36,653 - #49 int
INFO  04:29:36,653 - #49 q
INFO  04:29:36,653 - #42 [
INFO  04:29:36,654 - #43 ]
INFO  04:29:36,654 - #38 ;
INFO  04:29:36,654 - #44 {
INFO  04:29:36,654 - #49 int
INFO  04:29:36,654 - #49 a
INFO  04:29:36,654 - #40 (
INFO  04:29:36,654 - #49 int
INFO  04:29:36,654 - #49 x
INFO  04:29:36,654 - #39 ,
INFO  04:29:36,655 - #49 int
INFO  04:29:36,655 - #47 .
INFO  04:29:36,655 - #47 .
INFO  04:29:36,655 - #47 .
INFO  04:29:36,655 - #49 y
INFO  04:29:36,655 - #41 )
INFO  04:29:36,655 - #44 {
INFO  04:29:36,655 - #49 x
INFO  04:29:36,655 - #27 =
INFO  04:29:36,655 - #52 0
INFO  04:29:36,655 - #38 ;
INFO  04:29:36,656 - #9 do
INFO  04:29:36,656 - #44 {
INFO  04:29:36,656 - #12 print
INFO  04:29:36,656 - #40 (
INFO  04:29:36,656 - #49 y
INFO  04:29:36,656 - #42 [
INFO  04:29:36,656 - #49 x
INFO  04:29:36,656 - #43 ]
INFO  04:29:36,656 - #41 )
INFO  04:29:36,656 - #38 ;
INFO  04:29:36,657 - #12 print
INFO  04:29:36,657 - #40 (
INFO  04:29:36,657 - #49 eol
INFO  04:29:36,657 - #41 )
INFO  04:29:36,657 - #38 ;
INFO  04:29:36,657 - #49 x
INFO  04:29:36,657 - #36 ++
INFO  04:29:36,657 - #38 ;
INFO  04:29:36,657 - #45 }
INFO  04:29:36,657 - #10 while
INFO  04:29:36,658 - #40 (
INFO  04:29:36,658 - #49 x
INFO  04:29:36,658 - #32 <
INFO  04:29:36,658 - #52 3
INFO  04:29:36,658 - #41 )
INFO  04:29:36,658 - #38 ;
INFO  04:29:36,659 - #15 return
INFO  04:29:36,659 - #52 0
INFO  04:29:36,659 - #38 ;
INFO  04:29:36,659 - #45 }
INFO  04:29:36,659 - #14 void
INFO  04:29:36,659 - #49 main
INFO  04:29:36,659 - #40 (
INFO  04:29:36,659 - #41 )
INFO  04:29:36,659 - #49 int
INFO  04:29:36,659 - #49 niz
INFO  04:29:36,659 - #42 [
INFO  04:29:36,659 - #43 ]
INFO  04:29:36,660 - #39 ,
INFO  04:29:36,660 - #49 p
INFO  04:29:36,660 - #38 ;
INFO  04:29:36,660 - #44 {
INFO  04:29:36,660 - #49 p
INFO  04:29:36,660 - #27 =
INFO  04:29:36,660 - #49 a
INFO  04:29:36,660 - #40 (
INFO  04:29:36,660 - #52 1
INFO  04:29:36,660 - #39 ,
INFO  04:29:36,660 - #52 8
INFO  04:29:36,660 - #39 ,
INFO  04:29:36,660 - #52 9
INFO  04:29:36,660 - #39 ,
INFO  04:29:36,660 - #52 10
INFO  04:29:36,660 - #41 )
INFO  04:29:36,661 - #38 ;
INFO  04:29:36,661 - #12 print
INFO  04:29:36,661 - #40 (
INFO  04:29:36,661 - #49 eol
INFO  04:29:36,661 - #41 )
INFO  04:29:36,661 - #38 ;
INFO  04:29:36,661 - #12 print
INFO  04:29:36,661 - #40 (
INFO  04:29:36,661 - #49 p
INFO  04:29:36,661 - #41 )
INFO  04:29:36,661 - #38 ;
INFO  04:29:36,661 - #49 q
INFO  04:29:36,661 - #27 =
INFO  04:29:36,661 - #11 new
INFO  04:29:36,661 - #49 int
INFO  04:29:36,662 - #42 [
INFO  04:29:36,662 - #52 5
INFO  04:29:36,662 - #43 ]
INFO  04:29:36,662 - #38 ;
INFO  04:29:36,662 - #49 q
INFO  04:29:36,662 - #42 [
INFO  04:29:36,662 - #52 0
INFO  04:29:36,662 - #43 ]
INFO  04:29:36,662 - #27 =
INFO  04:29:36,662 - #52 2
INFO  04:29:36,662 - #24 *
INFO  04:29:36,662 - #49 a
INFO  04:29:36,662 - #40 (
INFO  04:29:36,662 - #52 1
INFO  04:29:36,662 - #39 ,
INFO  04:29:36,662 - #52 2
INFO  04:29:36,662 - #39 ,
INFO  04:29:36,662 - #52 3
INFO  04:29:36,663 - #39 ,
INFO  04:29:36,663 - #52 4
INFO  04:29:36,663 - #41 )
INFO  04:29:36,663 - #38 ;
INFO  04:29:36,663 - #12 print
INFO  04:29:36,663 - #40 (
INFO  04:29:36,663 - #49 eol
INFO  04:29:36,663 - #41 )
INFO  04:29:36,663 - #38 ;
INFO  04:29:36,663 - #12 print
INFO  04:29:36,663 - #40 (
INFO  04:29:36,663 - #49 q
INFO  04:29:36,663 - #42 [
INFO  04:29:36,663 - #52 0
INFO  04:29:36,663 - #43 ]
INFO  04:29:36,663 - #41 )
INFO  04:29:36,663 - #38 ;
INFO  04:29:36,663 - #45 }
INFO  04:29:36,663 - #45 }
INFO  04:29:36,667 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:36,667 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:36,667 - Line 8: Access to array element detected. Array name: y
INFO  04:29:36,667 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:29:36,667 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:36,667 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:29:36,667 - Line 17: Using local variable name: p
INFO  04:29:36,667 - Line 17: Method Call detected. Method name: a
INFO  04:29:36,667 - Method a has varArgs with 3 args
INFO  04:29:36,667 - Line 19: Using local variable name: p
INFO  04:29:36,667 - Line 21: Using global variable name: q
INFO  04:29:36,667 - Line 22: Using global variable name: q
INFO  04:29:36,667 - Line 22: Access to array element detected. Array name: q
INFO  04:29:36,667 - Line 22: Method Call detected. Method name: a
INFO  04:29:36,667 - Method a has varArgs with 3 args
INFO  04:29:36,667 - Line 24: Using global variable name: q
INFO  04:29:36,667 - Line 24: Access to array element detected. Array name: q
INFO  04:29:36,669 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:30:22,928 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:30:22,946 - #2 program
INFO  04:30:22,946 - #49 MJProgram
INFO  04:30:22,946 - #49 char
INFO  04:30:22,946 - #49 x
INFO  04:30:22,946 - #38 ;
INFO  04:30:22,947 - #49 char
INFO  04:30:22,947 - #49 y
INFO  04:30:22,947 - #38 ;
INFO  04:30:22,947 - #49 int
INFO  04:30:22,947 - #49 q
INFO  04:30:22,947 - #42 [
INFO  04:30:22,947 - #43 ]
INFO  04:30:22,947 - #38 ;
INFO  04:30:22,947 - #44 {
INFO  04:30:22,947 - #49 int
INFO  04:30:22,948 - #49 a
INFO  04:30:22,948 - #40 (
INFO  04:30:22,948 - #49 int
INFO  04:30:22,948 - #49 x
INFO  04:30:22,948 - #39 ,
INFO  04:30:22,948 - #49 int
INFO  04:30:22,948 - #47 .
INFO  04:30:22,948 - #47 .
INFO  04:30:22,948 - #47 .
INFO  04:30:22,948 - #49 y
INFO  04:30:22,948 - #41 )
INFO  04:30:22,948 - #44 {
INFO  04:30:22,949 - #49 x
INFO  04:30:22,949 - #27 =
INFO  04:30:22,949 - #52 0
INFO  04:30:22,949 - #38 ;
INFO  04:30:22,950 - #9 do
INFO  04:30:22,950 - #44 {
INFO  04:30:22,950 - #12 print
INFO  04:30:22,950 - #40 (
INFO  04:30:22,950 - #49 y
INFO  04:30:22,950 - #42 [
INFO  04:30:22,950 - #49 x
INFO  04:30:22,950 - #43 ]
INFO  04:30:22,950 - #41 )
INFO  04:30:22,950 - #38 ;
INFO  04:30:22,951 - #12 print
INFO  04:30:22,951 - #40 (
INFO  04:30:22,951 - #49 eol
INFO  04:30:22,951 - #41 )
INFO  04:30:22,951 - #38 ;
INFO  04:30:22,951 - #49 x
INFO  04:30:22,951 - #36 ++
INFO  04:30:22,951 - #38 ;
INFO  04:30:22,951 - #45 }
INFO  04:30:22,951 - #10 while
INFO  04:30:22,951 - #40 (
INFO  04:30:22,951 - #49 x
INFO  04:30:22,951 - #32 <
INFO  04:30:22,951 - #52 3
INFO  04:30:22,952 - #41 )
INFO  04:30:22,952 - #38 ;
INFO  04:30:22,952 - #15 return
INFO  04:30:22,952 - #52 0
INFO  04:30:22,952 - #38 ;
INFO  04:30:22,952 - #45 }
INFO  04:30:22,952 - #14 void
INFO  04:30:22,952 - #49 main
INFO  04:30:22,953 - #40 (
INFO  04:30:22,953 - #41 )
INFO  04:30:22,953 - #49 int
INFO  04:30:22,953 - #49 niz
INFO  04:30:22,953 - #42 [
INFO  04:30:22,953 - #43 ]
INFO  04:30:22,953 - #39 ,
INFO  04:30:22,953 - #49 p
INFO  04:30:22,953 - #38 ;
INFO  04:30:22,953 - #44 {
INFO  04:30:22,953 - #49 p
INFO  04:30:22,953 - #27 =
INFO  04:30:22,953 - #49 a
INFO  04:30:22,953 - #40 (
INFO  04:30:22,954 - #52 1
INFO  04:30:22,954 - #39 ,
INFO  04:30:22,954 - #52 8
INFO  04:30:22,954 - #39 ,
INFO  04:30:22,954 - #52 9
INFO  04:30:22,954 - #39 ,
INFO  04:30:22,954 - #52 10
INFO  04:30:22,954 - #41 )
INFO  04:30:22,954 - #38 ;
INFO  04:30:22,954 - #12 print
INFO  04:30:22,954 - #40 (
INFO  04:30:22,955 - #49 eol
INFO  04:30:22,955 - #41 )
INFO  04:30:22,955 - #38 ;
INFO  04:30:22,955 - #12 print
INFO  04:30:22,955 - #40 (
INFO  04:30:22,955 - #49 p
INFO  04:30:22,955 - #41 )
INFO  04:30:22,955 - #38 ;
INFO  04:30:22,955 - #49 q
INFO  04:30:22,955 - #27 =
INFO  04:30:22,955 - #11 new
INFO  04:30:22,955 - #49 int
INFO  04:30:22,955 - #42 [
INFO  04:30:22,955 - #52 5
INFO  04:30:22,955 - #43 ]
INFO  04:30:22,955 - #38 ;
INFO  04:30:22,955 - #49 q
INFO  04:30:22,955 - #42 [
INFO  04:30:22,955 - #52 0
INFO  04:30:22,955 - #43 ]
INFO  04:30:22,955 - #27 =
INFO  04:30:22,955 - #52 2
INFO  04:30:22,955 - #24 *
INFO  04:30:22,956 - #49 a
INFO  04:30:22,956 - #40 (
INFO  04:30:22,956 - #52 1
INFO  04:30:22,956 - #39 ,
INFO  04:30:22,956 - #52 2
INFO  04:30:22,956 - #39 ,
INFO  04:30:22,956 - #52 3
INFO  04:30:22,956 - #39 ,
INFO  04:30:22,956 - #52 4
INFO  04:30:22,956 - #41 )
INFO  04:30:22,956 - #38 ;
INFO  04:30:22,956 - #12 print
INFO  04:30:22,956 - #40 (
INFO  04:30:22,956 - #49 eol
INFO  04:30:22,956 - #41 )
INFO  04:30:22,956 - #38 ;
INFO  04:30:22,956 - #12 print
INFO  04:30:22,956 - #40 (
INFO  04:30:22,956 - #49 q
INFO  04:30:22,957 - #42 [
INFO  04:30:22,957 - #52 0
INFO  04:30:22,957 - #43 ]
INFO  04:30:22,957 - #41 )
INFO  04:30:22,957 - #38 ;
INFO  04:30:22,957 - #45 }
INFO  04:30:22,957 - #45 }
INFO  04:30:22,960 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:22,960 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:22,960 - Line 8: Access to array element detected. Array name: y
INFO  04:30:22,960 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:30:22,960 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:22,960 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:22,961 - Line 17: Using local variable name: p
INFO  04:30:22,961 - Line 17: Method Call detected. Method name: a
INFO  04:30:22,961 - Method a has varArgs with 3 args
INFO  04:30:22,961 - Line 19: Using local variable name: p
INFO  04:30:22,961 - Line 21: Using global variable name: q
INFO  04:30:22,961 - Line 22: Using global variable name: q
INFO  04:30:22,961 - Line 22: Access to array element detected. Array name: q
INFO  04:30:22,961 - Line 22: Method Call detected. Method name: a
INFO  04:30:22,961 - Method a has varArgs with 3 args
INFO  04:30:22,961 - Line 24: Using global variable name: q
INFO  04:30:22,961 - Line 24: Access to array element detected. Array name: q
INFO  04:30:22,963 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:30:57,842 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:30:57,861 - #2 program
INFO  04:30:57,861 - #49 MJProgram
INFO  04:30:57,861 - #49 char
INFO  04:30:57,861 - #49 x
INFO  04:30:57,862 - #38 ;
INFO  04:30:57,862 - #49 char
INFO  04:30:57,862 - #49 y
INFO  04:30:57,862 - #38 ;
INFO  04:30:57,862 - #49 int
INFO  04:30:57,862 - #49 q
INFO  04:30:57,862 - #42 [
INFO  04:30:57,862 - #43 ]
INFO  04:30:57,862 - #38 ;
INFO  04:30:57,863 - #44 {
INFO  04:30:57,863 - #49 int
INFO  04:30:57,863 - #49 a
INFO  04:30:57,863 - #40 (
INFO  04:30:57,863 - #49 int
INFO  04:30:57,863 - #49 x
INFO  04:30:57,863 - #39 ,
INFO  04:30:57,863 - #49 int
INFO  04:30:57,863 - #47 .
INFO  04:30:57,864 - #47 .
INFO  04:30:57,864 - #47 .
INFO  04:30:57,864 - #49 y
INFO  04:30:57,864 - #41 )
INFO  04:30:57,864 - #44 {
INFO  04:30:57,864 - #49 x
INFO  04:30:57,864 - #27 =
INFO  04:30:57,864 - #52 0
INFO  04:30:57,864 - #38 ;
INFO  04:30:57,865 - #9 do
INFO  04:30:57,865 - #44 {
INFO  04:30:57,865 - #12 print
INFO  04:30:57,865 - #40 (
INFO  04:30:57,865 - #49 y
INFO  04:30:57,865 - #42 [
INFO  04:30:57,865 - #49 x
INFO  04:30:57,865 - #43 ]
INFO  04:30:57,865 - #41 )
INFO  04:30:57,866 - #38 ;
INFO  04:30:57,866 - #12 print
INFO  04:30:57,866 - #40 (
INFO  04:30:57,866 - #49 eol
INFO  04:30:57,866 - #41 )
INFO  04:30:57,866 - #38 ;
INFO  04:30:57,866 - #49 x
INFO  04:30:57,866 - #36 ++
INFO  04:30:57,866 - #38 ;
INFO  04:30:57,866 - #45 }
INFO  04:30:57,866 - #10 while
INFO  04:30:57,866 - #40 (
INFO  04:30:57,867 - #49 x
INFO  04:30:57,867 - #32 <
INFO  04:30:57,867 - #52 3
INFO  04:30:57,867 - #41 )
INFO  04:30:57,867 - #38 ;
INFO  04:30:57,868 - #15 return
INFO  04:30:57,868 - #52 0
INFO  04:30:57,868 - #38 ;
INFO  04:30:57,868 - #45 }
INFO  04:30:57,868 - #14 void
INFO  04:30:57,868 - #49 main
INFO  04:30:57,868 - #40 (
INFO  04:30:57,868 - #41 )
INFO  04:30:57,868 - #49 int
INFO  04:30:57,868 - #49 niz
INFO  04:30:57,868 - #42 [
INFO  04:30:57,868 - #43 ]
INFO  04:30:57,868 - #39 ,
INFO  04:30:57,869 - #49 p
INFO  04:30:57,869 - #38 ;
INFO  04:30:57,869 - #44 {
INFO  04:30:57,869 - #49 x
INFO  04:30:57,869 - #27 =
INFO  04:30:57,869 - #52 10
INFO  04:30:57,869 - #38 ;
INFO  04:30:57,869 - #49 p
INFO  04:30:57,869 - #27 =
INFO  04:30:57,869 - #49 a
INFO  04:30:57,869 - #40 (
INFO  04:30:57,869 - #52 1
INFO  04:30:57,869 - #39 ,
INFO  04:30:57,869 - #52 8
INFO  04:30:57,869 - #39 ,
INFO  04:30:57,870 - #52 9
INFO  04:30:57,870 - #39 ,
INFO  04:30:57,870 - #52 10
INFO  04:30:57,870 - #41 )
INFO  04:30:57,870 - #38 ;
INFO  04:30:57,870 - #12 print
INFO  04:30:57,870 - #40 (
INFO  04:30:57,870 - #49 eol
INFO  04:30:57,870 - #41 )
INFO  04:30:57,870 - #38 ;
INFO  04:30:57,870 - #12 print
INFO  04:30:57,870 - #40 (
INFO  04:30:57,870 - #49 x
INFO  04:30:57,870 - #41 )
INFO  04:30:57,870 - #38 ;
INFO  04:30:57,871 - #45 }
INFO  04:30:57,871 - #45 }
INFO  04:30:57,874 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:57,874 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:57,874 - Line 8: Access to array element detected. Array name: y
INFO  04:30:57,874 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:30:57,874 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:57,874 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:30:57,875 - Line 17: Using global variable name: x
ERROR 04:30:57,875 - Line 17: Invalid assignment. Types are incompatible.
INFO  04:30:57,875 - Line 18: Using local variable name: p
INFO  04:30:57,875 - Line 18: Method Call detected. Method name: a
INFO  04:30:57,875 - Method a has varArgs with 3 args
INFO  04:30:57,875 - Line 20: Using global variable name: x
ERROR 04:30:57,875 - One or more semantic errors found! Compiling unsuccessful!
INFO  04:31:08,828 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:31:08,847 - #2 program
INFO  04:31:08,847 - #49 MJProgram
INFO  04:31:08,847 - #49 char
INFO  04:31:08,847 - #49 x
INFO  04:31:08,848 - #38 ;
INFO  04:31:08,848 - #49 char
INFO  04:31:08,848 - #49 y
INFO  04:31:08,848 - #38 ;
INFO  04:31:08,848 - #49 int
INFO  04:31:08,848 - #49 q
INFO  04:31:08,848 - #42 [
INFO  04:31:08,848 - #43 ]
INFO  04:31:08,848 - #38 ;
INFO  04:31:08,849 - #44 {
INFO  04:31:08,849 - #49 int
INFO  04:31:08,849 - #49 a
INFO  04:31:08,849 - #40 (
INFO  04:31:08,849 - #49 int
INFO  04:31:08,849 - #49 x
INFO  04:31:08,849 - #39 ,
INFO  04:31:08,849 - #49 int
INFO  04:31:08,849 - #47 .
INFO  04:31:08,849 - #47 .
INFO  04:31:08,850 - #47 .
INFO  04:31:08,850 - #49 y
INFO  04:31:08,850 - #41 )
INFO  04:31:08,850 - #44 {
INFO  04:31:08,850 - #49 x
INFO  04:31:08,850 - #27 =
INFO  04:31:08,850 - #52 0
INFO  04:31:08,850 - #38 ;
INFO  04:31:08,851 - #9 do
INFO  04:31:08,851 - #44 {
INFO  04:31:08,851 - #12 print
INFO  04:31:08,851 - #40 (
INFO  04:31:08,851 - #49 y
INFO  04:31:08,851 - #42 [
INFO  04:31:08,851 - #49 x
INFO  04:31:08,851 - #43 ]
INFO  04:31:08,851 - #41 )
INFO  04:31:08,851 - #38 ;
INFO  04:31:08,851 - #12 print
INFO  04:31:08,852 - #40 (
INFO  04:31:08,852 - #49 eol
INFO  04:31:08,852 - #41 )
INFO  04:31:08,852 - #38 ;
INFO  04:31:08,852 - #49 x
INFO  04:31:08,852 - #36 ++
INFO  04:31:08,852 - #38 ;
INFO  04:31:08,852 - #45 }
INFO  04:31:08,852 - #10 while
INFO  04:31:08,852 - #40 (
INFO  04:31:08,852 - #49 x
INFO  04:31:08,852 - #32 <
INFO  04:31:08,852 - #52 3
INFO  04:31:08,853 - #41 )
INFO  04:31:08,853 - #38 ;
INFO  04:31:08,853 - #15 return
INFO  04:31:08,853 - #52 0
INFO  04:31:08,853 - #38 ;
INFO  04:31:08,853 - #45 }
INFO  04:31:08,853 - #14 void
INFO  04:31:08,853 - #49 main
INFO  04:31:08,854 - #40 (
INFO  04:31:08,854 - #41 )
INFO  04:31:08,854 - #49 int
INFO  04:31:08,854 - #49 niz
INFO  04:31:08,854 - #42 [
INFO  04:31:08,854 - #43 ]
INFO  04:31:08,854 - #39 ,
INFO  04:31:08,854 - #49 p
INFO  04:31:08,854 - #38 ;
INFO  04:31:08,854 - #44 {
INFO  04:31:08,854 - #49 x
INFO  04:31:08,854 - #27 =
INFO  04:31:08,854 - #51 a
INFO  04:31:08,854 - #38 ;
INFO  04:31:08,854 - #49 p
INFO  04:31:08,855 - #27 =
INFO  04:31:08,855 - #49 a
INFO  04:31:08,855 - #40 (
INFO  04:31:08,855 - #52 1
INFO  04:31:08,855 - #39 ,
INFO  04:31:08,855 - #52 8
INFO  04:31:08,855 - #39 ,
INFO  04:31:08,855 - #52 9
INFO  04:31:08,855 - #39 ,
INFO  04:31:08,855 - #52 10
INFO  04:31:08,855 - #41 )
INFO  04:31:08,855 - #38 ;
INFO  04:31:08,855 - #12 print
INFO  04:31:08,856 - #40 (
INFO  04:31:08,856 - #49 eol
INFO  04:31:08,856 - #41 )
INFO  04:31:08,856 - #38 ;
INFO  04:31:08,856 - #12 print
INFO  04:31:08,856 - #40 (
INFO  04:31:08,856 - #49 x
INFO  04:31:08,856 - #41 )
INFO  04:31:08,856 - #38 ;
INFO  04:31:08,856 - #45 }
INFO  04:31:08,856 - #45 }
INFO  04:31:08,859 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:31:08,859 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:31:08,859 - Line 8: Access to array element detected. Array name: y
INFO  04:31:08,859 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:31:08,859 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:31:08,859 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:31:08,860 - Line 17: Using global variable name: x
INFO  04:31:08,860 - Line 18: Using local variable name: p
INFO  04:31:08,860 - Line 18: Method Call detected. Method name: a
INFO  04:31:08,860 - Method a has varArgs with 3 args
INFO  04:31:08,860 - Line 20: Using global variable name: x
INFO  04:31:08,862 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:34:59,044 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:34:59,063 - #2 program
INFO  04:34:59,063 - #49 MJProgram
INFO  04:34:59,063 - #49 char
INFO  04:34:59,063 - #49 x
INFO  04:34:59,063 - #38 ;
INFO  04:34:59,064 - #49 char
INFO  04:34:59,064 - #49 y
INFO  04:34:59,064 - #38 ;
INFO  04:34:59,064 - #49 int
INFO  04:34:59,064 - #49 q
INFO  04:34:59,064 - #42 [
INFO  04:34:59,064 - #43 ]
INFO  04:34:59,064 - #38 ;
INFO  04:34:59,064 - #44 {
INFO  04:34:59,064 - #49 int
INFO  04:34:59,065 - #49 a
INFO  04:34:59,065 - #40 (
INFO  04:34:59,065 - #49 int
INFO  04:34:59,065 - #49 x
INFO  04:34:59,065 - #39 ,
INFO  04:34:59,065 - #49 int
INFO  04:34:59,065 - #47 .
INFO  04:34:59,065 - #47 .
INFO  04:34:59,065 - #47 .
INFO  04:34:59,065 - #49 y
INFO  04:34:59,065 - #41 )
INFO  04:34:59,065 - #44 {
INFO  04:34:59,066 - #49 x
INFO  04:34:59,066 - #27 =
INFO  04:34:59,066 - #52 0
INFO  04:34:59,066 - #38 ;
INFO  04:34:59,066 - #9 do
INFO  04:34:59,066 - #44 {
INFO  04:34:59,066 - #12 print
INFO  04:34:59,067 - #40 (
INFO  04:34:59,067 - #49 y
INFO  04:34:59,067 - #42 [
INFO  04:34:59,067 - #49 x
INFO  04:34:59,067 - #43 ]
INFO  04:34:59,067 - #41 )
INFO  04:34:59,067 - #38 ;
INFO  04:34:59,067 - #12 print
INFO  04:34:59,067 - #40 (
INFO  04:34:59,067 - #49 eol
INFO  04:34:59,067 - #41 )
INFO  04:34:59,067 - #38 ;
INFO  04:34:59,067 - #49 x
INFO  04:34:59,067 - #36 ++
INFO  04:34:59,068 - #38 ;
INFO  04:34:59,068 - #45 }
INFO  04:34:59,068 - #10 while
INFO  04:34:59,068 - #40 (
INFO  04:34:59,068 - #49 x
INFO  04:34:59,068 - #32 <
INFO  04:34:59,068 - #52 3
INFO  04:34:59,068 - #41 )
INFO  04:34:59,069 - #38 ;
INFO  04:34:59,069 - #15 return
INFO  04:34:59,069 - #52 0
INFO  04:34:59,069 - #38 ;
INFO  04:34:59,069 - #45 }
INFO  04:34:59,069 - #14 void
INFO  04:34:59,069 - #49 main
INFO  04:34:59,069 - #40 (
INFO  04:34:59,069 - #41 )
INFO  04:34:59,069 - #49 int
INFO  04:34:59,069 - #49 niz
INFO  04:34:59,069 - #42 [
INFO  04:34:59,069 - #43 ]
INFO  04:34:59,069 - #39 ,
INFO  04:34:59,070 - #49 p
INFO  04:34:59,070 - #38 ;
INFO  04:34:59,070 - #44 {
INFO  04:34:59,070 - #49 x
INFO  04:34:59,070 - #27 =
INFO  04:34:59,070 - #51 a
INFO  04:34:59,070 - #38 ;
INFO  04:34:59,070 - #49 p
INFO  04:34:59,070 - #27 =
INFO  04:34:59,070 - #49 a
INFO  04:34:59,070 - #40 (
INFO  04:34:59,070 - #52 1
INFO  04:34:59,070 - #39 ,
INFO  04:34:59,070 - #52 8
INFO  04:34:59,070 - #39 ,
INFO  04:34:59,071 - #52 9
INFO  04:34:59,071 - #39 ,
INFO  04:34:59,071 - #52 10
INFO  04:34:59,071 - #41 )
INFO  04:34:59,071 - #38 ;
INFO  04:34:59,071 - #12 print
INFO  04:34:59,071 - #40 (
INFO  04:34:59,071 - #49 eol
INFO  04:34:59,071 - #41 )
INFO  04:34:59,071 - #38 ;
INFO  04:34:59,071 - #12 print
INFO  04:34:59,071 - #40 (
INFO  04:34:59,071 - #49 x
INFO  04:34:59,071 - #41 )
INFO  04:34:59,071 - #38 ;
INFO  04:34:59,071 - #45 }
INFO  04:34:59,071 - #45 }
INFO  04:34:59,075 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:34:59,075 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:34:59,075 - Line 8: Access to array element detected. Array name: y
INFO  04:34:59,075 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:34:59,075 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:34:59,075 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:34:59,075 - Line 17: Using global variable name: x
INFO  04:34:59,075 - Line 18: Using local variable name: p
INFO  04:34:59,076 - Line 18: Method Call detected. Method name: a
INFO  04:34:59,076 - Method a has varArgs with 3 args
INFO  04:34:59,076 - Line 20: Using global variable name: x
INFO  04:34:59,077 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:36:04,749 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:36:04,768 - #2 program
INFO  04:36:04,768 - #49 MJProgram
INFO  04:36:04,768 - #49 char
INFO  04:36:04,769 - #49 x
INFO  04:36:04,769 - #38 ;
INFO  04:36:04,769 - #49 char
INFO  04:36:04,769 - #49 y
INFO  04:36:04,769 - #38 ;
INFO  04:36:04,770 - #49 int
INFO  04:36:04,770 - #49 q
INFO  04:36:04,770 - #42 [
INFO  04:36:04,770 - #43 ]
INFO  04:36:04,770 - #38 ;
INFO  04:36:04,770 - #44 {
INFO  04:36:04,770 - #49 int
INFO  04:36:04,770 - #49 a
INFO  04:36:04,770 - #40 (
INFO  04:36:04,770 - #49 int
INFO  04:36:04,770 - #49 x
INFO  04:36:04,771 - #39 ,
INFO  04:36:04,771 - #49 int
INFO  04:36:04,771 - #47 .
INFO  04:36:04,771 - #47 .
INFO  04:36:04,771 - #47 .
INFO  04:36:04,771 - #49 y
INFO  04:36:04,771 - #41 )
INFO  04:36:04,771 - #44 {
INFO  04:36:04,771 - #49 x
INFO  04:36:04,771 - #27 =
INFO  04:36:04,771 - #52 0
INFO  04:36:04,772 - #38 ;
INFO  04:36:04,772 - #9 do
INFO  04:36:04,772 - #44 {
INFO  04:36:04,772 - #12 print
INFO  04:36:04,772 - #40 (
INFO  04:36:04,772 - #49 y
INFO  04:36:04,772 - #42 [
INFO  04:36:04,772 - #49 x
INFO  04:36:04,772 - #43 ]
INFO  04:36:04,773 - #41 )
INFO  04:36:04,773 - #38 ;
INFO  04:36:04,773 - #12 print
INFO  04:36:04,773 - #40 (
INFO  04:36:04,773 - #49 eol
INFO  04:36:04,773 - #41 )
INFO  04:36:04,773 - #38 ;
INFO  04:36:04,773 - #49 x
INFO  04:36:04,773 - #36 ++
INFO  04:36:04,773 - #38 ;
INFO  04:36:04,774 - #45 }
INFO  04:36:04,774 - #10 while
INFO  04:36:04,774 - #40 (
INFO  04:36:04,774 - #49 x
INFO  04:36:04,774 - #32 <
INFO  04:36:04,774 - #52 3
INFO  04:36:04,775 - #41 )
INFO  04:36:04,775 - #38 ;
INFO  04:36:04,775 - #15 return
INFO  04:36:04,775 - #52 0
INFO  04:36:04,775 - #38 ;
INFO  04:36:04,775 - #45 }
INFO  04:36:04,775 - #14 void
INFO  04:36:04,775 - #49 main
INFO  04:36:04,776 - #40 (
INFO  04:36:04,776 - #41 )
INFO  04:36:04,776 - #49 int
INFO  04:36:04,776 - #49 niz
INFO  04:36:04,776 - #42 [
INFO  04:36:04,776 - #43 ]
INFO  04:36:04,776 - #39 ,
INFO  04:36:04,776 - #49 p
INFO  04:36:04,776 - #38 ;
INFO  04:36:04,777 - #44 {
INFO  04:36:04,777 - #49 x
INFO  04:36:04,777 - #27 =
INFO  04:36:04,777 - #51 a
INFO  04:36:04,777 - #38 ;
INFO  04:36:04,777 - #12 print
INFO  04:36:04,777 - #40 (
INFO  04:36:04,777 - #49 x
INFO  04:36:04,777 - #41 )
INFO  04:36:04,777 - #38 ;
INFO  04:36:04,777 - #49 p
INFO  04:36:04,777 - #27 =
INFO  04:36:04,777 - #49 a
INFO  04:36:04,777 - #40 (
INFO  04:36:04,777 - #52 1
INFO  04:36:04,777 - #39 ,
INFO  04:36:04,777 - #52 8
INFO  04:36:04,777 - #39 ,
INFO  04:36:04,777 - #52 9
INFO  04:36:04,777 - #39 ,
INFO  04:36:04,778 - #52 10
INFO  04:36:04,778 - #41 )
INFO  04:36:04,778 - #38 ;
INFO  04:36:04,778 - #12 print
INFO  04:36:04,778 - #40 (
INFO  04:36:04,778 - #49 eol
INFO  04:36:04,778 - #41 )
INFO  04:36:04,778 - #38 ;
INFO  04:36:04,778 - #12 print
INFO  04:36:04,778 - #40 (
INFO  04:36:04,778 - #49 x
INFO  04:36:04,778 - #41 )
INFO  04:36:04,778 - #38 ;
INFO  04:36:04,778 - #45 }
INFO  04:36:04,778 - #45 }
INFO  04:36:04,782 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:36:04,782 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:36:04,782 - Line 8: Access to array element detected. Array name: y
INFO  04:36:04,782 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:36:04,782 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:36:04,782 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:36:04,782 - Line 17: Using global variable name: x
INFO  04:36:04,782 - Line 18: Using global variable name: x
INFO  04:36:04,782 - Line 19: Using local variable name: p
INFO  04:36:04,782 - Line 19: Method Call detected. Method name: a
INFO  04:36:04,782 - Method a has varArgs with 3 args
INFO  04:36:04,783 - Line 21: Using global variable name: x
INFO  04:36:04,784 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  04:38:27,741 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.mj
INFO  04:38:27,759 - #2 program
INFO  04:38:27,759 - #49 MJProgram
INFO  04:38:27,759 - #49 char
INFO  04:38:27,760 - #49 x
INFO  04:38:27,760 - #38 ;
INFO  04:38:27,760 - #49 char
INFO  04:38:27,760 - #49 y
INFO  04:38:27,760 - #38 ;
INFO  04:38:27,760 - #49 int
INFO  04:38:27,760 - #49 q
INFO  04:38:27,760 - #42 [
INFO  04:38:27,760 - #43 ]
INFO  04:38:27,760 - #38 ;
INFO  04:38:27,761 - #44 {
INFO  04:38:27,761 - #49 int
INFO  04:38:27,761 - #49 a
INFO  04:38:27,761 - #40 (
INFO  04:38:27,761 - #49 int
INFO  04:38:27,761 - #49 x
INFO  04:38:27,761 - #39 ,
INFO  04:38:27,761 - #49 int
INFO  04:38:27,761 - #47 .
INFO  04:38:27,761 - #47 .
INFO  04:38:27,762 - #47 .
INFO  04:38:27,762 - #49 y
INFO  04:38:27,762 - #41 )
INFO  04:38:27,762 - #44 {
INFO  04:38:27,762 - #49 x
INFO  04:38:27,762 - #27 =
INFO  04:38:27,762 - #52 0
INFO  04:38:27,762 - #38 ;
INFO  04:38:27,763 - #9 do
INFO  04:38:27,763 - #44 {
INFO  04:38:27,763 - #12 print
INFO  04:38:27,763 - #40 (
INFO  04:38:27,763 - #49 y
INFO  04:38:27,763 - #42 [
INFO  04:38:27,763 - #49 x
INFO  04:38:27,763 - #43 ]
INFO  04:38:27,763 - #41 )
INFO  04:38:27,763 - #38 ;
INFO  04:38:27,763 - #12 print
INFO  04:38:27,764 - #40 (
INFO  04:38:27,764 - #49 eol
INFO  04:38:27,764 - #41 )
INFO  04:38:27,764 - #38 ;
INFO  04:38:27,764 - #49 x
INFO  04:38:27,764 - #36 ++
INFO  04:38:27,764 - #38 ;
INFO  04:38:27,764 - #45 }
INFO  04:38:27,764 - #10 while
INFO  04:38:27,764 - #40 (
INFO  04:38:27,764 - #49 x
INFO  04:38:27,764 - #32 <
INFO  04:38:27,765 - #52 3
INFO  04:38:27,765 - #41 )
INFO  04:38:27,765 - #38 ;
INFO  04:38:27,765 - #15 return
INFO  04:38:27,765 - #52 0
INFO  04:38:27,765 - #38 ;
INFO  04:38:27,765 - #45 }
INFO  04:38:27,765 - #14 void
INFO  04:38:27,766 - #49 main
INFO  04:38:27,766 - #40 (
INFO  04:38:27,766 - #41 )
INFO  04:38:27,766 - #49 int
INFO  04:38:27,766 - #49 niz
INFO  04:38:27,766 - #42 [
INFO  04:38:27,766 - #43 ]
INFO  04:38:27,766 - #39 ,
INFO  04:38:27,766 - #49 p
INFO  04:38:27,766 - #38 ;
INFO  04:38:27,767 - #44 {
INFO  04:38:27,767 - #49 x
INFO  04:38:27,767 - #27 =
INFO  04:38:27,767 - #51 a
INFO  04:38:27,767 - #38 ;
INFO  04:38:27,767 - #12 print
INFO  04:38:27,767 - #40 (
INFO  04:38:27,767 - #49 x
INFO  04:38:27,767 - #41 )
INFO  04:38:27,767 - #38 ;
INFO  04:38:27,767 - #49 p
INFO  04:38:27,767 - #27 =
INFO  04:38:27,767 - #49 a
INFO  04:38:27,767 - #40 (
INFO  04:38:27,767 - #52 1
INFO  04:38:27,767 - #39 ,
INFO  04:38:27,767 - #52 8
INFO  04:38:27,767 - #39 ,
INFO  04:38:27,768 - #52 9
INFO  04:38:27,768 - #39 ,
INFO  04:38:27,768 - #52 10
INFO  04:38:27,768 - #41 )
INFO  04:38:27,768 - #38 ;
INFO  04:38:27,768 - #12 print
INFO  04:38:27,768 - #40 (
INFO  04:38:27,768 - #49 eol
INFO  04:38:27,768 - #41 )
INFO  04:38:27,768 - #38 ;
INFO  04:38:27,768 - #12 print
INFO  04:38:27,768 - #40 (
INFO  04:38:27,768 - #49 x
INFO  04:38:27,768 - #41 )
INFO  04:38:27,768 - #38 ;
INFO  04:38:27,769 - #45 }
INFO  04:38:27,769 - #45 }
INFO  04:38:27,772 - Line 6: Access to formal argument detected. Method name: a, argument name: x
INFO  04:38:27,772 - Line 8: Access to formal argument detected. Method name: a, argument name: x
INFO  04:38:27,772 - Line 8: Access to array element detected. Array name: y
INFO  04:38:27,772 - Line 8: Access to formal argument detected. Method name: a, argument name: y
INFO  04:38:27,772 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  04:38:27,772 - Line 11: Access to formal argument detected. Method name: a, argument name: x
INFO  04:38:27,772 - Line 17: Using global variable name: x
INFO  04:38:27,773 - Line 18: Using global variable name: x
INFO  04:38:27,773 - Line 19: Using local variable name: p
INFO  04:38:27,773 - Line 19: Method Call detected. Method name: a
INFO  04:38:27,773 - Method a has varArgs with 3 args
INFO  04:38:27,773 - Line 21: Using global variable name: x
INFO  04:38:27,775 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\program.obj
INFO  05:45:55,617 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:45:55,635 - #2 program
INFO  05:45:55,635 - #49 testVarArgs
INFO  05:45:55,635 - #38 ;
ERROR 05:45:55,635 - 
Sintaksna greska na liniji 1
ERROR 05:45:55,635 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 1
ERROR 05:45:55,635 - One or more syntax errors found! Compiling unsuccessful!
INFO  05:46:16,515 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:46:16,534 - #2 program
INFO  05:46:16,534 - #49 testVarArgs
INFO  05:46:16,534 - #49 int
INFO  05:46:16,534 - #49 x
INFO  05:46:16,535 - #38 ;
INFO  05:46:16,535 - #44 {
INFO  05:46:16,535 - #49 int
INFO  05:46:16,535 - #49 sum
INFO  05:46:16,536 - #40 (
INFO  05:46:16,536 - #49 int
INFO  05:46:16,536 - #47 .
INFO  05:46:16,536 - #47 .
INFO  05:46:16,536 - #47 .
INFO  05:46:16,536 - #49 args
INFO  05:46:16,536 - #41 )
INFO  05:46:16,536 - #49 int
INFO  05:46:16,536 - #49 i
INFO  05:46:16,536 - #39 ,
INFO  05:46:16,537 - #49 s
INFO  05:46:16,537 - #38 ;
INFO  05:46:16,537 - #44 {
INFO  05:46:16,537 - #49 i
INFO  05:46:16,537 - #27 =
INFO  05:46:16,537 - #49 len
INFO  05:46:16,537 - #40 (
INFO  05:46:16,537 - #49 args
INFO  05:46:16,537 - #41 )
INFO  05:46:16,538 - #23 -
INFO  05:46:16,538 - #52 1
INFO  05:46:16,538 - #38 ;
INFO  05:46:16,538 - #49 s
INFO  05:46:16,539 - #27 =
INFO  05:46:16,539 - #52 0
INFO  05:46:16,539 - #38 ;
INFO  05:46:16,539 - #9 do
INFO  05:46:16,539 - #44 {
INFO  05:46:16,539 - #49 s
INFO  05:46:16,539 - #27 =
INFO  05:46:16,539 - #49 s
INFO  05:46:16,539 - #22 +
INFO  05:46:16,539 - #49 args
INFO  05:46:16,539 - #42 [
INFO  05:46:16,540 - #49 i
INFO  05:46:16,540 - #43 ]
INFO  05:46:16,540 - #38 ;
INFO  05:46:16,540 - #49 i
INFO  05:46:16,540 - #37 --
INFO  05:46:16,540 - #38 ;
INFO  05:46:16,540 - #45 }
INFO  05:46:16,540 - #10 while
INFO  05:46:16,540 - #40 (
INFO  05:46:16,540 - #49 i
INFO  05:46:16,540 - #30 >
INFO  05:46:16,540 - #52 0
INFO  05:46:16,541 - #41 )
INFO  05:46:16,541 - #38 ;
INFO  05:46:16,541 - #15 return
INFO  05:46:16,541 - #49 s
INFO  05:46:16,541 - #38 ;
INFO  05:46:16,541 - #45 }
INFO  05:46:16,541 - #14 void
INFO  05:46:16,541 - #49 main
INFO  05:46:16,542 - #40 (
INFO  05:46:16,542 - #41 )
INFO  05:46:16,542 - #44 {
INFO  05:46:16,542 - #12 print
INFO  05:46:16,542 - #40 (
INFO  05:46:16,542 - #49 sum
INFO  05:46:16,542 - #40 (
INFO  05:46:16,542 - #52 1
INFO  05:46:16,542 - #39 ,
INFO  05:46:16,542 - #52 2
INFO  05:46:16,542 - #39 ,
INFO  05:46:16,542 - #52 3
INFO  05:46:16,542 - #39 ,
INFO  05:46:16,542 - #52 4
INFO  05:46:16,542 - #39 ,
INFO  05:46:16,542 - #52 5
INFO  05:46:16,542 - #41 )
INFO  05:46:16,542 - #41 )
INFO  05:46:16,542 - #38 ;
INFO  05:46:16,543 - #45 }
INFO  05:46:16,543 - #45 }
INFO  05:46:16,546 - Line 7: Using local variable name: i
INFO  05:46:16,546 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:46:16,546 - Line 7: Method Call detected. Method name: len
INFO  05:46:16,546 - Line 8: Using local variable name: s
INFO  05:46:16,546 - Line 10: Using local variable name: s
INFO  05:46:16,546 - Line 10: Using local variable name: s
INFO  05:46:16,547 - Line 10: Using local variable name: i
INFO  05:46:16,547 - Line 10: Access to array element detected. Array name: args
INFO  05:46:16,547 - Line 10: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:46:16,547 - Line 11: Using local variable name: i
INFO  05:46:16,547 - Line 12: Using local variable name: i
INFO  05:46:16,547 - Line 14: Using local variable name: s
INFO  05:46:16,547 - Line 18: Method Call detected. Method name: sum
INFO  05:46:16,547 - Method sum has varArgs with 5 args
INFO  05:46:16,548 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:47:44,834 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:47:44,852 - #2 program
INFO  05:47:44,853 - #49 testVarArgs
INFO  05:47:44,853 - #49 int
INFO  05:47:44,853 - #49 x
INFO  05:47:44,853 - #38 ;
INFO  05:47:44,853 - #44 {
INFO  05:47:44,854 - #49 int
INFO  05:47:44,854 - #49 sum
INFO  05:47:44,854 - #40 (
INFO  05:47:44,854 - #49 int
INFO  05:47:44,854 - #47 .
INFO  05:47:44,854 - #47 .
INFO  05:47:44,854 - #47 .
INFO  05:47:44,854 - #49 args
INFO  05:47:44,854 - #41 )
INFO  05:47:44,854 - #49 int
INFO  05:47:44,855 - #49 i
INFO  05:47:44,855 - #39 ,
INFO  05:47:44,855 - #49 s
INFO  05:47:44,855 - #38 ;
INFO  05:47:44,855 - #44 {
INFO  05:47:44,855 - #49 i
INFO  05:47:44,856 - #27 =
INFO  05:47:44,856 - #49 len
INFO  05:47:44,856 - #40 (
INFO  05:47:44,856 - #49 args
INFO  05:47:44,856 - #41 )
INFO  05:47:44,856 - #23 -
INFO  05:47:44,856 - #52 1
INFO  05:47:44,857 - #38 ;
INFO  05:47:44,857 - #49 s
INFO  05:47:44,857 - #27 =
INFO  05:47:44,857 - #52 0
INFO  05:47:44,857 - #38 ;
INFO  05:47:44,857 - #9 do
INFO  05:47:44,857 - #44 {
INFO  05:47:44,858 - #49 s
INFO  05:47:44,858 - #27 =
INFO  05:47:44,858 - #49 s
INFO  05:47:44,858 - #22 +
INFO  05:47:44,858 - #49 args
INFO  05:47:44,858 - #42 [
INFO  05:47:44,858 - #49 i
INFO  05:47:44,858 - #43 ]
INFO  05:47:44,858 - #38 ;
INFO  05:47:44,858 - #49 i
INFO  05:47:44,858 - #37 --
INFO  05:47:44,858 - #38 ;
INFO  05:47:44,859 - #45 }
INFO  05:47:44,859 - #10 while
INFO  05:47:44,859 - #40 (
INFO  05:47:44,859 - #49 i
INFO  05:47:44,859 - #30 >
INFO  05:47:44,859 - #52 0
INFO  05:47:44,859 - #41 )
INFO  05:47:44,859 - #38 ;
INFO  05:47:44,859 - #15 return
INFO  05:47:44,860 - #49 s
INFO  05:47:44,860 - #38 ;
INFO  05:47:44,860 - #45 }
INFO  05:47:44,860 - #14 void
INFO  05:47:44,860 - #49 main
INFO  05:47:44,860 - #40 (
INFO  05:47:44,860 - #41 )
INFO  05:47:44,860 - #44 {
INFO  05:47:44,860 - #12 print
INFO  05:47:44,860 - #40 (
INFO  05:47:44,860 - #49 sum
INFO  05:47:44,860 - #40 (
INFO  05:47:44,860 - #52 1
INFO  05:47:44,860 - #39 ,
INFO  05:47:44,860 - #52 2
INFO  05:47:44,860 - #39 ,
INFO  05:47:44,860 - #52 3
INFO  05:47:44,860 - #39 ,
INFO  05:47:44,860 - #52 4
INFO  05:47:44,860 - #39 ,
INFO  05:47:44,861 - #52 5
INFO  05:47:44,861 - #41 )
INFO  05:47:44,861 - #41 )
INFO  05:47:44,861 - #38 ;
INFO  05:47:44,861 - #45 }
INFO  05:47:44,861 - #45 }
INFO  05:47:44,864 - Line 7: Using local variable name: i
INFO  05:47:44,865 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:47:44,865 - Line 7: Method Call detected. Method name: len
INFO  05:47:44,865 - Line 8: Using local variable name: s
INFO  05:47:44,865 - Line 10: Using local variable name: s
INFO  05:47:44,865 - Line 10: Using local variable name: s
INFO  05:47:44,865 - Line 10: Using local variable name: i
INFO  05:47:44,865 - Line 10: Access to array element detected. Array name: args
INFO  05:47:44,865 - Line 10: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:47:44,865 - Line 11: Using local variable name: i
INFO  05:47:44,865 - Line 12: Using local variable name: i
INFO  05:47:44,865 - Line 14: Using local variable name: s
INFO  05:47:44,865 - Line 18: Method Call detected. Method name: sum
INFO  05:47:44,865 - Method sum has varArgs with 5 args
INFO  05:47:44,867 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:48:01,220 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:48:01,239 - #2 program
INFO  05:48:01,239 - #49 testVarArgs
INFO  05:48:01,239 - #49 int
INFO  05:48:01,239 - #49 x
INFO  05:48:01,239 - #38 ;
INFO  05:48:01,240 - #44 {
INFO  05:48:01,240 - #49 int
INFO  05:48:01,240 - #49 sum
INFO  05:48:01,240 - #40 (
INFO  05:48:01,240 - #49 int
INFO  05:48:01,240 - #47 .
INFO  05:48:01,240 - #47 .
INFO  05:48:01,240 - #47 .
INFO  05:48:01,240 - #49 args
INFO  05:48:01,240 - #41 )
INFO  05:48:01,240 - #49 int
INFO  05:48:01,241 - #49 i
INFO  05:48:01,241 - #39 ,
INFO  05:48:01,241 - #49 s
INFO  05:48:01,241 - #38 ;
INFO  05:48:01,241 - #44 {
INFO  05:48:01,241 - #49 i
INFO  05:48:01,242 - #27 =
INFO  05:48:01,242 - #49 len
INFO  05:48:01,242 - #40 (
INFO  05:48:01,242 - #49 args
INFO  05:48:01,242 - #41 )
INFO  05:48:01,242 - #23 -
INFO  05:48:01,243 - #52 1
INFO  05:48:01,243 - #38 ;
INFO  05:48:01,243 - #49 s
INFO  05:48:01,243 - #27 =
INFO  05:48:01,243 - #52 0
INFO  05:48:01,243 - #38 ;
INFO  05:48:01,243 - #9 do
INFO  05:48:01,243 - #44 {
INFO  05:48:01,244 - #49 s
INFO  05:48:01,244 - #27 =
INFO  05:48:01,244 - #49 s
INFO  05:48:01,244 - #22 +
INFO  05:48:01,244 - #49 args
INFO  05:48:01,244 - #42 [
INFO  05:48:01,244 - #49 i
INFO  05:48:01,244 - #43 ]
INFO  05:48:01,244 - #38 ;
INFO  05:48:01,244 - #49 i
INFO  05:48:01,244 - #37 --
INFO  05:48:01,244 - #38 ;
INFO  05:48:01,244 - #45 }
INFO  05:48:01,244 - #10 while
INFO  05:48:01,245 - #40 (
INFO  05:48:01,245 - #49 i
INFO  05:48:01,245 - #30 >
INFO  05:48:01,245 - #52 0
INFO  05:48:01,245 - #41 )
INFO  05:48:01,245 - #38 ;
INFO  05:48:01,245 - #15 return
INFO  05:48:01,245 - #49 s
INFO  05:48:01,246 - #38 ;
INFO  05:48:01,246 - #45 }
INFO  05:48:01,246 - #14 void
INFO  05:48:01,246 - #49 main
INFO  05:48:01,246 - #40 (
INFO  05:48:01,246 - #41 )
INFO  05:48:01,246 - #44 {
INFO  05:48:01,246 - #12 print
INFO  05:48:01,246 - #40 (
INFO  05:48:01,246 - #49 sum
INFO  05:48:01,246 - #40 (
INFO  05:48:01,246 - #52 1
INFO  05:48:01,246 - #39 ,
INFO  05:48:01,246 - #52 2
INFO  05:48:01,246 - #39 ,
INFO  05:48:01,246 - #52 3
INFO  05:48:01,246 - #39 ,
INFO  05:48:01,246 - #52 4
INFO  05:48:01,246 - #39 ,
INFO  05:48:01,246 - #52 5
INFO  05:48:01,246 - #39 ,
INFO  05:48:01,246 - #52 6
INFO  05:48:01,246 - #41 )
INFO  05:48:01,246 - #41 )
INFO  05:48:01,247 - #38 ;
INFO  05:48:01,247 - #45 }
INFO  05:48:01,247 - #45 }
INFO  05:48:01,251 - Line 7: Using local variable name: i
INFO  05:48:01,251 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:48:01,251 - Line 7: Method Call detected. Method name: len
INFO  05:48:01,251 - Line 8: Using local variable name: s
INFO  05:48:01,251 - Line 10: Using local variable name: s
INFO  05:48:01,251 - Line 10: Using local variable name: s
INFO  05:48:01,251 - Line 10: Using local variable name: i
INFO  05:48:01,251 - Line 10: Access to array element detected. Array name: args
INFO  05:48:01,251 - Line 10: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:48:01,251 - Line 11: Using local variable name: i
INFO  05:48:01,251 - Line 12: Using local variable name: i
INFO  05:48:01,251 - Line 14: Using local variable name: s
INFO  05:48:01,251 - Line 18: Method Call detected. Method name: sum
INFO  05:48:01,251 - Method sum has varArgs with 6 args
INFO  05:48:01,252 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:48:35,338 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:48:35,356 - #2 program
INFO  05:48:35,356 - #49 testVarArgs
INFO  05:48:35,356 - #49 int
INFO  05:48:35,356 - #49 x
INFO  05:48:35,357 - #38 ;
INFO  05:48:35,357 - #44 {
INFO  05:48:35,357 - #49 int
INFO  05:48:35,357 - #49 sum
INFO  05:48:35,357 - #40 (
INFO  05:48:35,357 - #49 int
INFO  05:48:35,358 - #47 .
INFO  05:48:35,358 - #47 .
INFO  05:48:35,358 - #47 .
INFO  05:48:35,358 - #49 args
INFO  05:48:35,358 - #41 )
INFO  05:48:35,358 - #49 int
INFO  05:48:35,358 - #49 i
INFO  05:48:35,358 - #39 ,
INFO  05:48:35,358 - #49 s
INFO  05:48:35,358 - #38 ;
INFO  05:48:35,359 - #44 {
INFO  05:48:35,359 - #49 i
INFO  05:48:35,359 - #27 =
INFO  05:48:35,359 - #49 len
INFO  05:48:35,359 - #40 (
INFO  05:48:35,359 - #49 args
INFO  05:48:35,359 - #41 )
INFO  05:48:35,359 - #23 -
INFO  05:48:35,360 - #52 1
INFO  05:48:35,360 - #38 ;
INFO  05:48:35,360 - #49 s
INFO  05:48:35,360 - #27 =
INFO  05:48:35,360 - #52 0
INFO  05:48:35,360 - #38 ;
INFO  05:48:35,360 - #9 do
INFO  05:48:35,361 - #44 {
INFO  05:48:35,361 - #49 s
INFO  05:48:35,361 - #27 =
INFO  05:48:35,361 - #49 s
INFO  05:48:35,361 - #22 +
INFO  05:48:35,361 - #49 args
INFO  05:48:35,361 - #42 [
INFO  05:48:35,361 - #49 i
INFO  05:48:35,361 - #43 ]
INFO  05:48:35,361 - #38 ;
INFO  05:48:35,362 - #49 i
INFO  05:48:35,362 - #37 --
INFO  05:48:35,362 - #38 ;
INFO  05:48:35,362 - #45 }
INFO  05:48:35,362 - #10 while
INFO  05:48:35,362 - #40 (
INFO  05:48:35,362 - #49 i
INFO  05:48:35,362 - #30 >
INFO  05:48:35,362 - #52 0
INFO  05:48:35,362 - #41 )
INFO  05:48:35,362 - #38 ;
INFO  05:48:35,363 - #15 return
INFO  05:48:35,363 - #49 s
INFO  05:48:35,363 - #38 ;
INFO  05:48:35,363 - #45 }
INFO  05:48:35,363 - #14 void
INFO  05:48:35,363 - #49 main
INFO  05:48:35,363 - #40 (
INFO  05:48:35,363 - #41 )
INFO  05:48:35,364 - #44 {
INFO  05:48:35,364 - #12 print
INFO  05:48:35,364 - #40 (
INFO  05:48:35,364 - #49 sum
INFO  05:48:35,364 - #40 (
INFO  05:48:35,364 - #52 1
INFO  05:48:35,364 - #39 ,
INFO  05:48:35,364 - #52 2
INFO  05:48:35,364 - #39 ,
INFO  05:48:35,364 - #52 3
INFO  05:48:35,364 - #39 ,
INFO  05:48:35,364 - #52 4
INFO  05:48:35,364 - #39 ,
INFO  05:48:35,364 - #52 5
INFO  05:48:35,364 - #39 ,
INFO  05:48:35,364 - #52 6
INFO  05:48:35,364 - #41 )
INFO  05:48:35,364 - #41 )
INFO  05:48:35,364 - #38 ;
INFO  05:48:35,364 - #45 }
INFO  05:48:35,364 - #45 }
INFO  05:48:35,368 - Line 7: Using local variable name: i
INFO  05:48:35,368 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:48:35,368 - Line 7: Method Call detected. Method name: len
INFO  05:48:35,368 - Line 8: Using local variable name: s
INFO  05:48:35,369 - Line 10: Using local variable name: s
INFO  05:48:35,369 - Line 10: Using local variable name: s
INFO  05:48:35,369 - Line 10: Using local variable name: i
INFO  05:48:35,369 - Line 10: Access to array element detected. Array name: args
INFO  05:48:35,369 - Line 10: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:48:35,369 - Line 11: Using local variable name: i
INFO  05:48:35,369 - Line 12: Using local variable name: i
INFO  05:48:35,369 - Line 14: Using local variable name: s
INFO  05:48:35,369 - Line 18: Method Call detected. Method name: sum
INFO  05:48:35,369 - Method sum has varArgs with 6 args
INFO  05:48:35,370 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:51:11,138 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:51:11,159 - #2 program
INFO  05:51:11,159 - #49 testVarArgs
INFO  05:51:11,159 - #49 int
INFO  05:51:11,160 - #49 x
INFO  05:51:11,160 - #38 ;
INFO  05:51:11,160 - #44 {
INFO  05:51:11,161 - #49 int
INFO  05:51:11,161 - #49 sum
INFO  05:51:11,161 - #40 (
INFO  05:51:11,161 - #49 int
INFO  05:51:11,161 - #47 .
INFO  05:51:11,161 - #47 .
INFO  05:51:11,161 - #47 .
INFO  05:51:11,161 - #49 args
INFO  05:51:11,161 - #41 )
INFO  05:51:11,161 - #49 int
INFO  05:51:11,162 - #49 i
INFO  05:51:11,162 - #39 ,
INFO  05:51:11,162 - #49 s
INFO  05:51:11,162 - #38 ;
INFO  05:51:11,162 - #44 {
INFO  05:51:11,162 - #49 i
INFO  05:51:11,162 - #27 =
INFO  05:51:11,163 - #52 5
INFO  05:51:11,163 - #38 ;
INFO  05:51:11,163 - #49 s
INFO  05:51:11,163 - #27 =
INFO  05:51:11,163 - #52 0
INFO  05:51:11,163 - #38 ;
INFO  05:51:11,163 - #9 do
INFO  05:51:11,163 - #44 {
INFO  05:51:11,163 - #49 s
INFO  05:51:11,163 - #27 =
INFO  05:51:11,163 - #49 s
INFO  05:51:11,163 - #22 +
INFO  05:51:11,163 - #49 args
INFO  05:51:11,164 - #42 [
INFO  05:51:11,164 - #49 i
INFO  05:51:11,164 - #43 ]
INFO  05:51:11,164 - #38 ;
INFO  05:51:11,164 - #49 i
INFO  05:51:11,164 - #37 --
INFO  05:51:11,164 - #38 ;
INFO  05:51:11,164 - #45 }
INFO  05:51:11,164 - #10 while
INFO  05:51:11,164 - #40 (
INFO  05:51:11,165 - #49 i
INFO  05:51:11,165 - #30 >
INFO  05:51:11,165 - #52 0
INFO  05:51:11,165 - #41 )
INFO  05:51:11,165 - #38 ;
INFO  05:51:11,166 - #15 return
INFO  05:51:11,166 - #49 s
INFO  05:51:11,166 - #38 ;
INFO  05:51:11,166 - #45 }
INFO  05:51:11,166 - #14 void
INFO  05:51:11,166 - #49 main
INFO  05:51:11,166 - #40 (
INFO  05:51:11,166 - #41 )
INFO  05:51:11,166 - #44 {
INFO  05:51:11,166 - #12 print
INFO  05:51:11,166 - #40 (
INFO  05:51:11,166 - #49 sum
INFO  05:51:11,166 - #40 (
INFO  05:51:11,166 - #52 1
INFO  05:51:11,167 - #39 ,
INFO  05:51:11,167 - #52 2
INFO  05:51:11,167 - #39 ,
INFO  05:51:11,167 - #52 3
INFO  05:51:11,167 - #39 ,
INFO  05:51:11,167 - #52 4
INFO  05:51:11,167 - #39 ,
INFO  05:51:11,167 - #52 5
INFO  05:51:11,167 - #39 ,
INFO  05:51:11,167 - #52 6
INFO  05:51:11,167 - #41 )
INFO  05:51:11,167 - #41 )
INFO  05:51:11,168 - #38 ;
INFO  05:51:11,168 - #45 }
INFO  05:51:11,168 - #45 }
INFO  05:51:11,172 - Line 7: Using local variable name: i
INFO  05:51:11,172 - Line 8: Using local variable name: s
INFO  05:51:11,172 - Line 10: Using local variable name: s
INFO  05:51:11,172 - Line 10: Using local variable name: s
INFO  05:51:11,172 - Line 10: Using local variable name: i
INFO  05:51:11,172 - Line 10: Access to array element detected. Array name: args
INFO  05:51:11,172 - Line 10: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:51:11,172 - Line 11: Using local variable name: i
INFO  05:51:11,172 - Line 12: Using local variable name: i
INFO  05:51:11,172 - Line 14: Using local variable name: s
INFO  05:51:11,172 - Line 18: Method Call detected. Method name: sum
INFO  05:51:11,172 - Method sum has varArgs with 6 args
INFO  05:51:11,174 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:51:46,102 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:51:46,121 - #2 program
INFO  05:51:46,121 - #49 testVarArgs
INFO  05:51:46,121 - #49 int
INFO  05:51:46,121 - #49 x
INFO  05:51:46,121 - #38 ;
INFO  05:51:46,122 - #44 {
INFO  05:51:46,122 - #49 int
INFO  05:51:46,122 - #49 sum
INFO  05:51:46,122 - #40 (
INFO  05:51:46,122 - #49 int
INFO  05:51:46,122 - #49 a
INFO  05:51:46,122 - #39 ,
INFO  05:51:46,122 - #49 int
INFO  05:51:46,122 - #47 .
INFO  05:51:46,122 - #47 .
INFO  05:51:46,122 - #47 .
INFO  05:51:46,123 - #49 args
INFO  05:51:46,123 - #41 )
INFO  05:51:46,123 - #49 int
INFO  05:51:46,123 - #49 i
INFO  05:51:46,123 - #39 ,
INFO  05:51:46,123 - #49 s
INFO  05:51:46,124 - #38 ;
INFO  05:51:46,124 - #44 {
INFO  05:51:46,124 - #49 i
INFO  05:51:46,124 - #27 =
INFO  05:51:46,124 - #52 3
INFO  05:51:46,124 - #38 ;
INFO  05:51:46,124 - #49 s
INFO  05:51:46,124 - #27 =
INFO  05:51:46,124 - #52 0
INFO  05:51:46,124 - #38 ;
INFO  05:51:46,124 - #9 do
INFO  05:51:46,124 - #44 {
INFO  05:51:46,125 - #49 s
INFO  05:51:46,125 - #27 =
INFO  05:51:46,125 - #49 s
INFO  05:51:46,125 - #22 +
INFO  05:51:46,125 - #49 args
INFO  05:51:46,125 - #42 [
INFO  05:51:46,125 - #49 i
INFO  05:51:46,125 - #43 ]
INFO  05:51:46,125 - #38 ;
INFO  05:51:46,125 - #49 i
INFO  05:51:46,126 - #37 --
INFO  05:51:46,126 - #38 ;
INFO  05:51:46,126 - #45 }
INFO  05:51:46,126 - #10 while
INFO  05:51:46,126 - #40 (
INFO  05:51:46,126 - #49 i
INFO  05:51:46,126 - #30 >
INFO  05:51:46,126 - #52 0
INFO  05:51:46,127 - #41 )
INFO  05:51:46,127 - #38 ;
INFO  05:51:46,127 - #15 return
INFO  05:51:46,127 - #49 s
INFO  05:51:46,127 - #38 ;
INFO  05:51:46,127 - #45 }
INFO  05:51:46,127 - #14 void
INFO  05:51:46,127 - #49 main
INFO  05:51:46,127 - #40 (
INFO  05:51:46,127 - #41 )
INFO  05:51:46,127 - #44 {
INFO  05:51:46,127 - #12 print
INFO  05:51:46,127 - #40 (
INFO  05:51:46,128 - #49 sum
INFO  05:51:46,128 - #40 (
INFO  05:51:46,128 - #52 1
INFO  05:51:46,128 - #39 ,
INFO  05:51:46,128 - #52 2
INFO  05:51:46,128 - #39 ,
INFO  05:51:46,128 - #52 3
INFO  05:51:46,128 - #39 ,
INFO  05:51:46,128 - #52 4
INFO  05:51:46,128 - #39 ,
INFO  05:51:46,128 - #52 5
INFO  05:51:46,128 - #39 ,
INFO  05:51:46,128 - #52 6
INFO  05:51:46,128 - #41 )
INFO  05:51:46,128 - #41 )
INFO  05:51:46,129 - #38 ;
INFO  05:51:46,129 - #45 }
INFO  05:51:46,129 - #45 }
INFO  05:51:46,132 - Line 7: Using local variable name: i
INFO  05:51:46,132 - Line 8: Using local variable name: s
INFO  05:51:46,132 - Line 10: Using local variable name: s
INFO  05:51:46,132 - Line 10: Using local variable name: s
INFO  05:51:46,132 - Line 10: Using local variable name: i
INFO  05:51:46,132 - Line 10: Access to array element detected. Array name: args
INFO  05:51:46,133 - Line 10: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:51:46,133 - Line 11: Using local variable name: i
INFO  05:51:46,133 - Line 12: Using local variable name: i
INFO  05:51:46,133 - Line 14: Using local variable name: s
INFO  05:51:46,133 - Line 18: Method Call detected. Method name: sum
INFO  05:51:46,133 - Method sum has varArgs with 5 args
INFO  05:51:46,134 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:52:40,867 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:52:40,885 - #2 program
INFO  05:52:40,885 - #49 testVarArgs
INFO  05:52:40,885 - #49 int
INFO  05:52:40,886 - #49 x
INFO  05:52:40,886 - #38 ;
INFO  05:52:40,886 - #44 {
INFO  05:52:40,886 - #49 int
INFO  05:52:40,887 - #49 sum
INFO  05:52:40,887 - #40 (
INFO  05:52:40,887 - #49 int
INFO  05:52:40,887 - #49 a
INFO  05:52:40,887 - #39 ,
INFO  05:52:40,887 - #49 int
INFO  05:52:40,887 - #47 .
INFO  05:52:40,887 - #47 .
INFO  05:52:40,887 - #47 .
INFO  05:52:40,887 - #49 args
INFO  05:52:40,887 - #41 )
INFO  05:52:40,887 - #49 int
INFO  05:52:40,888 - #49 i
INFO  05:52:40,888 - #39 ,
INFO  05:52:40,888 - #49 s
INFO  05:52:40,888 - #38 ;
INFO  05:52:40,888 - #44 {
INFO  05:52:40,888 - #49 i
INFO  05:52:40,889 - #27 =
INFO  05:52:40,889 - #49 len
INFO  05:52:40,889 - #40 (
INFO  05:52:40,889 - #49 args
INFO  05:52:40,889 - #41 )
INFO  05:52:40,889 - #38 ;
INFO  05:52:40,890 - #49 s
INFO  05:52:40,890 - #27 =
INFO  05:52:40,890 - #52 0
INFO  05:52:40,890 - #38 ;
INFO  05:52:40,890 - #9 do
INFO  05:52:40,890 - #44 {
INFO  05:52:40,890 - #49 s
INFO  05:52:40,890 - #27 =
INFO  05:52:40,890 - #49 s
INFO  05:52:40,890 - #22 +
INFO  05:52:40,890 - #52 1
INFO  05:52:40,891 - #38 ;
INFO  05:52:40,891 - #49 i
INFO  05:52:40,891 - #37 --
INFO  05:52:40,891 - #38 ;
INFO  05:52:40,891 - #45 }
INFO  05:52:40,891 - #10 while
INFO  05:52:40,891 - #40 (
INFO  05:52:40,891 - #49 i
INFO  05:52:40,891 - #30 >
INFO  05:52:40,891 - #52 0
INFO  05:52:40,892 - #41 )
INFO  05:52:40,892 - #38 ;
INFO  05:52:40,892 - #15 return
INFO  05:52:40,892 - #49 s
INFO  05:52:40,892 - #38 ;
INFO  05:52:40,892 - #45 }
INFO  05:52:40,892 - #14 void
INFO  05:52:40,892 - #49 main
INFO  05:52:40,892 - #40 (
INFO  05:52:40,893 - #41 )
INFO  05:52:40,893 - #44 {
INFO  05:52:40,893 - #12 print
INFO  05:52:40,893 - #40 (
INFO  05:52:40,893 - #49 sum
INFO  05:52:40,893 - #40 (
INFO  05:52:40,893 - #52 1
INFO  05:52:40,893 - #39 ,
INFO  05:52:40,893 - #52 2
INFO  05:52:40,893 - #39 ,
INFO  05:52:40,893 - #52 3
INFO  05:52:40,893 - #39 ,
INFO  05:52:40,893 - #52 4
INFO  05:52:40,893 - #39 ,
INFO  05:52:40,893 - #52 5
INFO  05:52:40,893 - #39 ,
INFO  05:52:40,893 - #52 6
INFO  05:52:40,893 - #41 )
INFO  05:52:40,893 - #41 )
INFO  05:52:40,893 - #38 ;
INFO  05:52:40,893 - #45 }
INFO  05:52:40,893 - #45 }
INFO  05:52:40,897 - Line 7: Using local variable name: i
INFO  05:52:40,897 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:52:40,897 - Line 7: Method Call detected. Method name: len
INFO  05:52:40,897 - Line 8: Using local variable name: s
INFO  05:52:40,897 - Line 10: Using local variable name: s
INFO  05:52:40,897 - Line 10: Using local variable name: s
INFO  05:52:40,897 - Line 11: Using local variable name: i
INFO  05:52:40,897 - Line 12: Using local variable name: i
INFO  05:52:40,898 - Line 14: Using local variable name: s
INFO  05:52:40,898 - Line 18: Method Call detected. Method name: sum
INFO  05:52:40,898 - Method sum has varArgs with 5 args
INFO  05:52:40,899 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:53:03,684 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:53:03,703 - #2 program
INFO  05:53:03,703 - #49 testVarArgs
INFO  05:53:03,703 - #49 int
INFO  05:53:03,704 - #49 x
INFO  05:53:03,704 - #38 ;
INFO  05:53:03,704 - #44 {
INFO  05:53:03,704 - #49 int
INFO  05:53:03,704 - #49 sum
INFO  05:53:03,705 - #40 (
INFO  05:53:03,705 - #49 int
INFO  05:53:03,705 - #49 a
INFO  05:53:03,705 - #39 ,
INFO  05:53:03,705 - #49 int
INFO  05:53:03,705 - #47 .
INFO  05:53:03,705 - #47 .
INFO  05:53:03,705 - #47 .
INFO  05:53:03,705 - #49 args
INFO  05:53:03,705 - #41 )
INFO  05:53:03,705 - #49 int
INFO  05:53:03,706 - #49 i
INFO  05:53:03,706 - #39 ,
INFO  05:53:03,706 - #49 s
INFO  05:53:03,706 - #38 ;
INFO  05:53:03,706 - #44 {
INFO  05:53:03,706 - #49 i
INFO  05:53:03,706 - #27 =
INFO  05:53:03,707 - #49 len
INFO  05:53:03,707 - #40 (
INFO  05:53:03,707 - #49 args
INFO  05:53:03,707 - #41 )
INFO  05:53:03,707 - #38 ;
INFO  05:53:03,707 - #49 s
INFO  05:53:03,708 - #27 =
INFO  05:53:03,708 - #52 0
INFO  05:53:03,708 - #38 ;
INFO  05:53:03,708 - #9 do
INFO  05:53:03,708 - #44 {
INFO  05:53:03,708 - #49 s
INFO  05:53:03,708 - #27 =
INFO  05:53:03,708 - #49 s
INFO  05:53:03,708 - #22 +
INFO  05:53:03,708 - #52 1
INFO  05:53:03,708 - #38 ;
INFO  05:53:03,709 - #49 i
INFO  05:53:03,709 - #37 --
INFO  05:53:03,709 - #38 ;
INFO  05:53:03,709 - #45 }
INFO  05:53:03,709 - #10 while
INFO  05:53:03,709 - #40 (
INFO  05:53:03,709 - #49 i
INFO  05:53:03,709 - #30 >
INFO  05:53:03,709 - #52 0
INFO  05:53:03,710 - #41 )
INFO  05:53:03,710 - #38 ;
INFO  05:53:03,710 - #15 return
INFO  05:53:03,710 - #49 s
INFO  05:53:03,710 - #38 ;
INFO  05:53:03,710 - #45 }
INFO  05:53:03,710 - #14 void
INFO  05:53:03,710 - #49 main
INFO  05:53:03,710 - #40 (
INFO  05:53:03,710 - #41 )
INFO  05:53:03,710 - #44 {
INFO  05:53:03,710 - #12 print
INFO  05:53:03,711 - #40 (
INFO  05:53:03,711 - #52 1
INFO  05:53:03,711 - #41 )
INFO  05:53:03,711 - #38 ;
INFO  05:53:03,711 - #45 }
INFO  05:53:03,711 - #45 }
INFO  05:53:03,714 - Line 7: Using local variable name: i
INFO  05:53:03,715 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:53:03,715 - Line 7: Method Call detected. Method name: len
INFO  05:53:03,715 - Line 8: Using local variable name: s
INFO  05:53:03,715 - Line 10: Using local variable name: s
INFO  05:53:03,715 - Line 10: Using local variable name: s
INFO  05:53:03,715 - Line 11: Using local variable name: i
INFO  05:53:03,715 - Line 12: Using local variable name: i
INFO  05:53:03,715 - Line 14: Using local variable name: s
INFO  05:53:03,716 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:53:36,584 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:53:36,602 - #2 program
INFO  05:53:36,602 - #49 testVarArgs
INFO  05:53:36,603 - #49 int
INFO  05:53:36,603 - #49 x
INFO  05:53:36,603 - #38 ;
INFO  05:53:36,603 - #44 {
INFO  05:53:36,604 - #49 int
INFO  05:53:36,604 - #49 sum
INFO  05:53:36,604 - #40 (
INFO  05:53:36,604 - #49 int
INFO  05:53:36,604 - #49 a
INFO  05:53:36,604 - #39 ,
INFO  05:53:36,604 - #49 int
INFO  05:53:36,604 - #47 .
INFO  05:53:36,604 - #47 .
INFO  05:53:36,604 - #47 .
INFO  05:53:36,605 - #49 args
INFO  05:53:36,605 - #41 )
INFO  05:53:36,605 - #49 int
INFO  05:53:36,605 - #49 i
INFO  05:53:36,605 - #39 ,
INFO  05:53:36,605 - #49 s
INFO  05:53:36,605 - #38 ;
INFO  05:53:36,606 - #44 {
INFO  05:53:36,606 - #49 i
INFO  05:53:36,606 - #27 =
INFO  05:53:36,606 - #49 len
INFO  05:53:36,606 - #40 (
INFO  05:53:36,606 - #49 args
INFO  05:53:36,606 - #41 )
INFO  05:53:36,606 - #38 ;
INFO  05:53:36,607 - #49 s
INFO  05:53:36,607 - #27 =
INFO  05:53:36,607 - #52 0
INFO  05:53:36,607 - #38 ;
INFO  05:53:36,607 - #9 do
INFO  05:53:36,607 - #44 {
INFO  05:53:36,607 - #49 s
INFO  05:53:36,607 - #27 =
INFO  05:53:36,607 - #49 s
INFO  05:53:36,607 - #22 +
INFO  05:53:36,607 - #52 1
INFO  05:53:36,608 - #38 ;
INFO  05:53:36,608 - #49 i
INFO  05:53:36,608 - #37 --
INFO  05:53:36,608 - #38 ;
INFO  05:53:36,608 - #45 }
INFO  05:53:36,608 - #10 while
INFO  05:53:36,608 - #40 (
INFO  05:53:36,609 - #49 i
INFO  05:53:36,609 - #30 >
INFO  05:53:36,609 - #52 0
INFO  05:53:36,609 - #41 )
INFO  05:53:36,609 - #38 ;
INFO  05:53:36,609 - #15 return
INFO  05:53:36,609 - #49 s
INFO  05:53:36,610 - #38 ;
INFO  05:53:36,610 - #45 }
INFO  05:53:36,610 - #14 void
INFO  05:53:36,610 - #49 main
INFO  05:53:36,610 - #40 (
INFO  05:53:36,610 - #41 )
INFO  05:53:36,610 - #44 {
INFO  05:53:36,610 - #12 print
INFO  05:53:36,610 - #40 (
INFO  05:53:36,610 - #49 sum
INFO  05:53:36,610 - #40 (
INFO  05:53:36,610 - #52 1
INFO  05:53:36,610 - #39 ,
INFO  05:53:36,610 - #52 2
INFO  05:53:36,610 - #39 ,
INFO  05:53:36,610 - #52 3
INFO  05:53:36,610 - #41 )
INFO  05:53:36,610 - #41 )
INFO  05:53:36,611 - #38 ;
INFO  05:53:36,611 - #45 }
INFO  05:53:36,611 - #45 }
INFO  05:53:36,614 - Line 7: Using local variable name: i
INFO  05:53:36,614 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:53:36,614 - Line 7: Method Call detected. Method name: len
INFO  05:53:36,614 - Line 8: Using local variable name: s
INFO  05:53:36,615 - Line 10: Using local variable name: s
INFO  05:53:36,615 - Line 10: Using local variable name: s
INFO  05:53:36,615 - Line 11: Using local variable name: i
INFO  05:53:36,615 - Line 12: Using local variable name: i
INFO  05:53:36,615 - Line 14: Using local variable name: s
INFO  05:53:36,615 - Line 18: Method Call detected. Method name: sum
INFO  05:53:36,615 - Method sum has varArgs with 2 args
INFO  05:53:36,616 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:53:56,228 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:53:56,247 - #2 program
INFO  05:53:56,247 - #49 testVarArgs
INFO  05:53:56,247 - #49 int
INFO  05:53:56,247 - #49 x
INFO  05:53:56,248 - #38 ;
INFO  05:53:56,248 - #44 {
INFO  05:53:56,248 - #49 int
INFO  05:53:56,248 - #49 sum
INFO  05:53:56,248 - #40 (
INFO  05:53:56,248 - #49 int
INFO  05:53:56,249 - #49 a
INFO  05:53:56,249 - #39 ,
INFO  05:53:56,249 - #49 int
INFO  05:53:56,249 - #47 .
INFO  05:53:56,249 - #47 .
INFO  05:53:56,249 - #47 .
INFO  05:53:56,249 - #49 args
INFO  05:53:56,249 - #41 )
INFO  05:53:56,249 - #49 int
INFO  05:53:56,249 - #49 i
INFO  05:53:56,249 - #39 ,
INFO  05:53:56,250 - #49 s
INFO  05:53:56,250 - #38 ;
INFO  05:53:56,250 - #44 {
INFO  05:53:56,250 - #49 i
INFO  05:53:56,250 - #27 =
INFO  05:53:56,250 - #49 len
INFO  05:53:56,250 - #40 (
INFO  05:53:56,250 - #49 args
INFO  05:53:56,250 - #41 )
INFO  05:53:56,251 - #38 ;
INFO  05:53:56,251 - #49 s
INFO  05:53:56,251 - #27 =
INFO  05:53:56,251 - #52 0
INFO  05:53:56,251 - #38 ;
INFO  05:53:56,251 - #9 do
INFO  05:53:56,251 - #44 {
INFO  05:53:56,252 - #49 s
INFO  05:53:56,252 - #27 =
INFO  05:53:56,252 - #49 s
INFO  05:53:56,252 - #22 +
INFO  05:53:56,252 - #52 1
INFO  05:53:56,252 - #38 ;
INFO  05:53:56,253 - #49 i
INFO  05:53:56,253 - #37 --
INFO  05:53:56,253 - #38 ;
INFO  05:53:56,253 - #45 }
INFO  05:53:56,253 - #10 while
INFO  05:53:56,253 - #40 (
INFO  05:53:56,253 - #49 i
INFO  05:53:56,253 - #30 >
INFO  05:53:56,253 - #52 0
INFO  05:53:56,253 - #41 )
INFO  05:53:56,254 - #38 ;
INFO  05:53:56,254 - #15 return
INFO  05:53:56,254 - #49 s
INFO  05:53:56,254 - #38 ;
INFO  05:53:56,254 - #45 }
INFO  05:53:56,254 - #14 void
INFO  05:53:56,254 - #49 main
INFO  05:53:56,254 - #40 (
INFO  05:53:56,254 - #41 )
INFO  05:53:56,254 - #44 {
INFO  05:53:56,254 - #12 print
INFO  05:53:56,254 - #40 (
INFO  05:53:56,254 - #49 sum
INFO  05:53:56,254 - #40 (
INFO  05:53:56,255 - #52 1
INFO  05:53:56,255 - #39 ,
INFO  05:53:56,255 - #52 2
INFO  05:53:56,255 - #41 )
INFO  05:53:56,255 - #41 )
INFO  05:53:56,255 - #38 ;
INFO  05:53:56,255 - #45 }
INFO  05:53:56,255 - #45 }
INFO  05:53:56,258 - Line 7: Using local variable name: i
INFO  05:53:56,259 - Line 7: Access to formal argument detected. Method name: sum, argument name: args
INFO  05:53:56,259 - Line 7: Method Call detected. Method name: len
INFO  05:53:56,259 - Line 8: Using local variable name: s
INFO  05:53:56,259 - Line 10: Using local variable name: s
INFO  05:53:56,259 - Line 10: Using local variable name: s
INFO  05:53:56,259 - Line 11: Using local variable name: i
INFO  05:53:56,259 - Line 12: Using local variable name: i
INFO  05:53:56,259 - Line 14: Using local variable name: s
INFO  05:53:56,259 - Line 18: Method Call detected. Method name: sum
INFO  05:53:56,259 - Method sum has varArgs with 1 args
INFO  05:53:56,260 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:54:33,508 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:54:33,526 - #2 program
INFO  05:54:33,526 - #49 MJProgram
INFO  05:54:33,526 - #49 int
INFO  05:54:33,527 - #49 x
INFO  05:54:33,527 - #38 ;
INFO  05:54:33,527 - #49 int
INFO  05:54:33,527 - #49 y
INFO  05:54:33,527 - #38 ;
INFO  05:54:33,527 - #44 {
INFO  05:54:33,527 - #49 int
INFO  05:54:33,528 - #49 a
INFO  05:54:33,528 - #40 (
INFO  05:54:33,528 - #49 int
INFO  05:54:33,528 - #49 x
INFO  05:54:33,528 - #39 ,
INFO  05:54:33,528 - #49 int
INFO  05:54:33,528 - #47 .
INFO  05:54:33,528 - #47 .
INFO  05:54:33,528 - #47 .
INFO  05:54:33,528 - #49 y
INFO  05:54:33,528 - #41 )
INFO  05:54:33,528 - #44 {
INFO  05:54:33,529 - #49 x
INFO  05:54:33,529 - #27 =
INFO  05:54:33,529 - #52 0
INFO  05:54:33,529 - #38 ;
INFO  05:54:33,530 - #9 do
INFO  05:54:33,530 - #44 {
INFO  05:54:33,530 - #12 print
INFO  05:54:33,530 - #40 (
INFO  05:54:33,530 - #49 y
INFO  05:54:33,530 - #42 [
INFO  05:54:33,530 - #49 x
INFO  05:54:33,530 - #43 ]
INFO  05:54:33,531 - #41 )
INFO  05:54:33,531 - #38 ;
INFO  05:54:33,531 - #12 print
INFO  05:54:33,531 - #40 (
INFO  05:54:33,531 - #49 eol
INFO  05:54:33,531 - #41 )
INFO  05:54:33,531 - #38 ;
INFO  05:54:33,531 - #49 x
INFO  05:54:33,531 - #36 ++
INFO  05:54:33,531 - #38 ;
INFO  05:54:33,531 - #45 }
INFO  05:54:33,531 - #10 while
INFO  05:54:33,532 - #40 (
INFO  05:54:33,532 - #49 x
INFO  05:54:33,532 - #32 <
INFO  05:54:33,532 - #52 3
INFO  05:54:33,533 - #41 )
INFO  05:54:33,533 - #38 ;
INFO  05:54:33,533 - #15 return
INFO  05:54:33,533 - #52 0
INFO  05:54:33,533 - #38 ;
INFO  05:54:33,533 - #45 }
INFO  05:54:33,533 - #14 void
INFO  05:54:33,534 - #49 main
INFO  05:54:33,534 - #40 (
INFO  05:54:33,534 - #41 )
INFO  05:54:33,534 - #49 int
INFO  05:54:33,534 - #49 niz
INFO  05:54:33,534 - #42 [
INFO  05:54:33,534 - #43 ]
INFO  05:54:33,534 - #39 ,
INFO  05:54:33,534 - #49 p
INFO  05:54:33,534 - #38 ;
INFO  05:54:33,534 - #44 {
INFO  05:54:33,534 - #49 p
INFO  05:54:33,534 - #27 =
INFO  05:54:33,534 - #49 a
INFO  05:54:33,535 - #40 (
INFO  05:54:33,535 - #52 1
INFO  05:54:33,535 - #39 ,
INFO  05:54:33,535 - #52 8
INFO  05:54:33,535 - #39 ,
INFO  05:54:33,535 - #52 9
INFO  05:54:33,535 - #39 ,
INFO  05:54:33,535 - #52 10
INFO  05:54:33,535 - #41 )
INFO  05:54:33,535 - #38 ;
INFO  05:54:33,535 - #12 print
INFO  05:54:33,535 - #40 (
INFO  05:54:33,535 - #49 eol
INFO  05:54:33,536 - #41 )
INFO  05:54:33,536 - #38 ;
INFO  05:54:33,536 - #12 print
INFO  05:54:33,536 - #40 (
INFO  05:54:33,536 - #49 p
INFO  05:54:33,536 - #41 )
INFO  05:54:33,536 - #38 ;
INFO  05:54:33,536 - #45 }
INFO  05:54:33,536 - #45 }
INFO  05:54:33,539 - Line 5: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:33,539 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:33,539 - Line 7: Access to array element detected. Array name: y
INFO  05:54:33,539 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  05:54:33,540 - Line 9: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:33,540 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:33,540 - Line 16: Using local variable name: p
INFO  05:54:33,540 - Line 16: Method Call detected. Method name: a
INFO  05:54:33,540 - Method a has varArgs with 3 args
INFO  05:54:33,540 - Line 18: Using local variable name: p
INFO  05:54:33,541 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:54:35,337 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:54:35,355 - #2 program
INFO  05:54:35,355 - #49 MJProgram
INFO  05:54:35,355 - #49 int
INFO  05:54:35,355 - #49 x
INFO  05:54:35,355 - #38 ;
INFO  05:54:35,356 - #49 int
INFO  05:54:35,356 - #49 y
INFO  05:54:35,356 - #38 ;
INFO  05:54:35,356 - #44 {
INFO  05:54:35,356 - #49 int
INFO  05:54:35,356 - #49 a
INFO  05:54:35,356 - #40 (
INFO  05:54:35,356 - #49 int
INFO  05:54:35,356 - #49 x
INFO  05:54:35,356 - #39 ,
INFO  05:54:35,357 - #49 int
INFO  05:54:35,357 - #47 .
INFO  05:54:35,357 - #47 .
INFO  05:54:35,357 - #47 .
INFO  05:54:35,357 - #49 y
INFO  05:54:35,357 - #41 )
INFO  05:54:35,357 - #44 {
INFO  05:54:35,357 - #49 x
INFO  05:54:35,357 - #27 =
INFO  05:54:35,357 - #52 0
INFO  05:54:35,357 - #38 ;
INFO  05:54:35,358 - #9 do
INFO  05:54:35,358 - #44 {
INFO  05:54:35,358 - #12 print
INFO  05:54:35,358 - #40 (
INFO  05:54:35,358 - #49 y
INFO  05:54:35,358 - #42 [
INFO  05:54:35,358 - #49 x
INFO  05:54:35,358 - #43 ]
INFO  05:54:35,358 - #41 )
INFO  05:54:35,358 - #38 ;
INFO  05:54:35,359 - #12 print
INFO  05:54:35,359 - #40 (
INFO  05:54:35,359 - #49 eol
INFO  05:54:35,359 - #41 )
INFO  05:54:35,359 - #38 ;
INFO  05:54:35,359 - #49 x
INFO  05:54:35,359 - #36 ++
INFO  05:54:35,359 - #38 ;
INFO  05:54:35,359 - #45 }
INFO  05:54:35,359 - #10 while
INFO  05:54:35,359 - #40 (
INFO  05:54:35,359 - #49 x
INFO  05:54:35,359 - #32 <
INFO  05:54:35,359 - #52 3
INFO  05:54:35,360 - #41 )
INFO  05:54:35,360 - #38 ;
INFO  05:54:35,360 - #15 return
INFO  05:54:35,360 - #52 0
INFO  05:54:35,360 - #38 ;
INFO  05:54:35,360 - #45 }
INFO  05:54:35,360 - #14 void
INFO  05:54:35,360 - #49 main
INFO  05:54:35,360 - #40 (
INFO  05:54:35,360 - #41 )
INFO  05:54:35,361 - #49 int
INFO  05:54:35,361 - #49 niz
INFO  05:54:35,361 - #42 [
INFO  05:54:35,361 - #43 ]
INFO  05:54:35,361 - #39 ,
INFO  05:54:35,361 - #49 p
INFO  05:54:35,361 - #38 ;
INFO  05:54:35,361 - #44 {
INFO  05:54:35,361 - #49 p
INFO  05:54:35,361 - #27 =
INFO  05:54:35,361 - #49 a
INFO  05:54:35,361 - #40 (
INFO  05:54:35,362 - #52 1
INFO  05:54:35,362 - #39 ,
INFO  05:54:35,362 - #52 8
INFO  05:54:35,362 - #39 ,
INFO  05:54:35,362 - #52 9
INFO  05:54:35,362 - #39 ,
INFO  05:54:35,362 - #52 10
INFO  05:54:35,362 - #41 )
INFO  05:54:35,362 - #38 ;
INFO  05:54:35,362 - #12 print
INFO  05:54:35,362 - #40 (
INFO  05:54:35,362 - #49 eol
INFO  05:54:35,362 - #41 )
INFO  05:54:35,362 - #38 ;
INFO  05:54:35,362 - #12 print
INFO  05:54:35,363 - #40 (
INFO  05:54:35,363 - #49 p
INFO  05:54:35,363 - #41 )
INFO  05:54:35,363 - #38 ;
INFO  05:54:35,363 - #45 }
INFO  05:54:35,363 - #45 }
INFO  05:54:35,366 - Line 5: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:35,366 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:35,366 - Line 7: Access to array element detected. Array name: y
INFO  05:54:35,366 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  05:54:35,366 - Line 9: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:35,367 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:35,367 - Line 16: Using local variable name: p
INFO  05:54:35,367 - Line 16: Method Call detected. Method name: a
INFO  05:54:35,367 - Method a has varArgs with 3 args
INFO  05:54:35,367 - Line 18: Using local variable name: p
INFO  05:54:35,368 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:54:57,060 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:54:57,078 - #2 program
INFO  05:54:57,078 - #49 MJProgram
INFO  05:54:57,078 - #49 int
INFO  05:54:57,079 - #49 x
INFO  05:54:57,079 - #38 ;
INFO  05:54:57,079 - #49 int
INFO  05:54:57,079 - #49 y
INFO  05:54:57,080 - #38 ;
INFO  05:54:57,080 - #44 {
INFO  05:54:57,080 - #49 int
INFO  05:54:57,080 - #49 a
INFO  05:54:57,080 - #40 (
INFO  05:54:57,080 - #49 int
INFO  05:54:57,080 - #49 x
INFO  05:54:57,080 - #39 ,
INFO  05:54:57,080 - #49 int
INFO  05:54:57,080 - #47 .
INFO  05:54:57,080 - #47 .
INFO  05:54:57,080 - #47 .
INFO  05:54:57,080 - #49 y
INFO  05:54:57,080 - #41 )
INFO  05:54:57,081 - #44 {
INFO  05:54:57,081 - #49 x
INFO  05:54:57,081 - #27 =
INFO  05:54:57,081 - #52 0
INFO  05:54:57,081 - #38 ;
INFO  05:54:57,082 - #9 do
INFO  05:54:57,082 - #44 {
INFO  05:54:57,082 - #12 print
INFO  05:54:57,082 - #40 (
INFO  05:54:57,082 - #49 y
INFO  05:54:57,082 - #42 [
INFO  05:54:57,082 - #49 x
INFO  05:54:57,082 - #43 ]
INFO  05:54:57,082 - #41 )
INFO  05:54:57,082 - #38 ;
INFO  05:54:57,082 - #12 print
INFO  05:54:57,082 - #40 (
INFO  05:54:57,083 - #49 eol
INFO  05:54:57,083 - #41 )
INFO  05:54:57,083 - #38 ;
INFO  05:54:57,083 - #49 x
INFO  05:54:57,083 - #36 ++
INFO  05:54:57,083 - #38 ;
INFO  05:54:57,083 - #45 }
INFO  05:54:57,083 - #10 while
INFO  05:54:57,084 - #40 (
INFO  05:54:57,084 - #49 x
INFO  05:54:57,084 - #32 <
INFO  05:54:57,084 - #52 3
INFO  05:54:57,084 - #41 )
INFO  05:54:57,084 - #38 ;
INFO  05:54:57,085 - #15 return
INFO  05:54:57,085 - #52 0
INFO  05:54:57,085 - #38 ;
INFO  05:54:57,085 - #45 }
INFO  05:54:57,085 - #14 void
INFO  05:54:57,085 - #49 main
INFO  05:54:57,085 - #40 (
INFO  05:54:57,085 - #41 )
INFO  05:54:57,085 - #49 int
INFO  05:54:57,085 - #49 niz
INFO  05:54:57,085 - #42 [
INFO  05:54:57,085 - #43 ]
INFO  05:54:57,085 - #39 ,
INFO  05:54:57,086 - #49 p
INFO  05:54:57,086 - #38 ;
INFO  05:54:57,086 - #44 {
INFO  05:54:57,086 - #12 print
INFO  05:54:57,086 - #40 (
INFO  05:54:57,086 - #49 a
INFO  05:54:57,086 - #40 (
INFO  05:54:57,086 - #52 1
INFO  05:54:57,086 - #39 ,
INFO  05:54:57,086 - #52 8
INFO  05:54:57,086 - #39 ,
INFO  05:54:57,086 - #52 9
INFO  05:54:57,086 - #39 ,
INFO  05:54:57,086 - #52 10
INFO  05:54:57,086 - #41 )
INFO  05:54:57,087 - #41 )
INFO  05:54:57,087 - #38 ;
INFO  05:54:57,087 - #12 print
INFO  05:54:57,087 - #40 (
INFO  05:54:57,087 - #49 eol
INFO  05:54:57,087 - #41 )
INFO  05:54:57,087 - #38 ;
INFO  05:54:57,087 - #12 print
INFO  05:54:57,087 - #40 (
INFO  05:54:57,087 - #49 p
INFO  05:54:57,087 - #41 )
INFO  05:54:57,087 - #38 ;
INFO  05:54:57,087 - #45 }
INFO  05:54:57,087 - #45 }
INFO  05:54:57,090 - Line 5: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:57,090 - Line 7: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:57,090 - Line 7: Access to array element detected. Array name: y
INFO  05:54:57,090 - Line 7: Access to formal argument detected. Method name: a, argument name: y
INFO  05:54:57,090 - Line 9: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:57,090 - Line 10: Access to formal argument detected. Method name: a, argument name: x
INFO  05:54:57,090 - Line 16: Method Call detected. Method name: a
INFO  05:54:57,090 - Method a has varArgs with 3 args
INFO  05:54:57,091 - Line 18: Using local variable name: p
INFO  05:54:57,092 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:55:31,450 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:55:31,469 - #2 program
INFO  05:55:31,469 - #49 MJProgram
INFO  05:55:31,469 - #49 int
INFO  05:55:31,470 - #49 x
INFO  05:55:31,470 - #38 ;
INFO  05:55:31,470 - #49 int
INFO  05:55:31,470 - #49 y
INFO  05:55:31,470 - #38 ;
INFO  05:55:31,470 - #44 {
INFO  05:55:31,471 - #49 int
INFO  05:55:31,471 - #49 a
INFO  05:55:31,471 - #40 (
INFO  05:55:31,471 - #49 int
INFO  05:55:31,471 - #49 x
INFO  05:55:31,471 - #39 ,
INFO  05:55:31,471 - #49 int
INFO  05:55:31,471 - #47 .
INFO  05:55:31,471 - #47 .
INFO  05:55:31,471 - #47 .
INFO  05:55:31,471 - #49 t
INFO  05:55:31,472 - #41 )
INFO  05:55:31,472 - #44 {
INFO  05:55:31,472 - #15 return
INFO  05:55:31,472 - #49 len
INFO  05:55:31,472 - #40 (
INFO  05:55:31,472 - #49 t
INFO  05:55:31,472 - #41 )
INFO  05:55:31,473 - #38 ;
INFO  05:55:31,473 - #45 }
INFO  05:55:31,473 - #14 void
INFO  05:55:31,473 - #49 main
INFO  05:55:31,474 - #40 (
INFO  05:55:31,474 - #41 )
INFO  05:55:31,474 - #49 int
INFO  05:55:31,474 - #49 niz
INFO  05:55:31,474 - #42 [
INFO  05:55:31,474 - #43 ]
INFO  05:55:31,474 - #39 ,
INFO  05:55:31,474 - #49 p
INFO  05:55:31,474 - #38 ;
INFO  05:55:31,474 - #44 {
INFO  05:55:31,475 - #12 print
INFO  05:55:31,475 - #40 (
INFO  05:55:31,475 - #49 a
INFO  05:55:31,475 - #40 (
INFO  05:55:31,475 - #52 1
INFO  05:55:31,475 - #39 ,
INFO  05:55:31,475 - #52 8
INFO  05:55:31,475 - #39 ,
INFO  05:55:31,475 - #52 9
INFO  05:55:31,475 - #39 ,
INFO  05:55:31,475 - #52 10
INFO  05:55:31,475 - #41 )
INFO  05:55:31,475 - #41 )
INFO  05:55:31,475 - #38 ;
INFO  05:55:31,475 - #12 print
INFO  05:55:31,475 - #40 (
INFO  05:55:31,475 - #49 eol
INFO  05:55:31,476 - #41 )
INFO  05:55:31,476 - #38 ;
INFO  05:55:31,476 - #12 print
INFO  05:55:31,476 - #40 (
INFO  05:55:31,476 - #49 p
INFO  05:55:31,476 - #41 )
INFO  05:55:31,476 - #38 ;
INFO  05:55:31,476 - #45 }
INFO  05:55:31,476 - #45 }
INFO  05:55:31,479 - Line 6: Access to formal argument detected. Method name: a, argument name: t
INFO  05:55:31,479 - Line 6: Method Call detected. Method name: len
INFO  05:55:31,480 - Line 10: Method Call detected. Method name: a
INFO  05:55:31,480 - Method a has varArgs with 3 args
INFO  05:55:31,480 - Line 12: Using local variable name: p
INFO  05:55:31,481 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:55:47,435 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:55:47,454 - #2 program
INFO  05:55:47,454 - #49 MJProgram
INFO  05:55:47,454 - #49 int
INFO  05:55:47,455 - #49 x
INFO  05:55:47,455 - #38 ;
INFO  05:55:47,455 - #49 int
INFO  05:55:47,456 - #49 y
INFO  05:55:47,456 - #38 ;
INFO  05:55:47,456 - #44 {
INFO  05:55:47,456 - #49 int
INFO  05:55:47,456 - #49 a
INFO  05:55:47,456 - #40 (
INFO  05:55:47,456 - #49 int
INFO  05:55:47,456 - #49 x
INFO  05:55:47,456 - #39 ,
INFO  05:55:47,457 - #49 int
INFO  05:55:47,457 - #47 .
INFO  05:55:47,457 - #47 .
INFO  05:55:47,457 - #47 .
INFO  05:55:47,457 - #49 t
INFO  05:55:47,457 - #41 )
INFO  05:55:47,457 - #44 {
INFO  05:55:47,457 - #15 return
INFO  05:55:47,458 - #49 len
INFO  05:55:47,458 - #40 (
INFO  05:55:47,458 - #49 t
INFO  05:55:47,458 - #41 )
INFO  05:55:47,458 - #38 ;
INFO  05:55:47,459 - #45 }
INFO  05:55:47,459 - #14 void
INFO  05:55:47,459 - #49 main
INFO  05:55:47,459 - #40 (
INFO  05:55:47,459 - #41 )
INFO  05:55:47,459 - #49 int
INFO  05:55:47,459 - #49 niz
INFO  05:55:47,459 - #42 [
INFO  05:55:47,459 - #43 ]
INFO  05:55:47,459 - #39 ,
INFO  05:55:47,460 - #49 p
INFO  05:55:47,460 - #38 ;
INFO  05:55:47,460 - #44 {
INFO  05:55:47,460 - #12 print
INFO  05:55:47,460 - #40 (
INFO  05:55:47,460 - #49 a
INFO  05:55:47,460 - #40 (
INFO  05:55:47,460 - #52 1
INFO  05:55:47,460 - #39 ,
INFO  05:55:47,460 - #52 8
INFO  05:55:47,460 - #39 ,
INFO  05:55:47,460 - #52 9
INFO  05:55:47,460 - #39 ,
INFO  05:55:47,461 - #52 10
INFO  05:55:47,461 - #39 ,
INFO  05:55:47,461 - #52 11
INFO  05:55:47,461 - #39 ,
INFO  05:55:47,461 - #52 12
INFO  05:55:47,461 - #39 ,
INFO  05:55:47,461 - #52 13
INFO  05:55:47,461 - #39 ,
INFO  05:55:47,461 - #52 14
INFO  05:55:47,461 - #41 )
INFO  05:55:47,461 - #41 )
INFO  05:55:47,461 - #38 ;
INFO  05:55:47,461 - #12 print
INFO  05:55:47,461 - #40 (
INFO  05:55:47,461 - #49 eol
INFO  05:55:47,461 - #41 )
INFO  05:55:47,461 - #38 ;
INFO  05:55:47,462 - #12 print
INFO  05:55:47,462 - #40 (
INFO  05:55:47,462 - #49 p
INFO  05:55:47,462 - #41 )
INFO  05:55:47,462 - #38 ;
INFO  05:55:47,462 - #45 }
INFO  05:55:47,462 - #45 }
INFO  05:55:47,464 - Line 6: Access to formal argument detected. Method name: a, argument name: t
INFO  05:55:47,464 - Line 6: Method Call detected. Method name: len
INFO  05:55:47,465 - Line 10: Method Call detected. Method name: a
INFO  05:55:47,465 - Method a has varArgs with 7 args
INFO  05:55:47,465 - Line 12: Using local variable name: p
INFO  05:55:47,466 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:56:05,381 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:56:05,399 - #2 program
INFO  05:56:05,400 - #49 MJProgram
INFO  05:56:05,400 - #49 int
INFO  05:56:05,400 - #49 x
INFO  05:56:05,400 - #38 ;
INFO  05:56:05,400 - #49 int
INFO  05:56:05,400 - #49 y
INFO  05:56:05,400 - #38 ;
INFO  05:56:05,400 - #44 {
INFO  05:56:05,400 - #49 int
INFO  05:56:05,400 - #49 a
INFO  05:56:05,400 - #40 (
INFO  05:56:05,400 - #49 int
INFO  05:56:05,400 - #47 .
INFO  05:56:05,400 - #47 .
INFO  05:56:05,400 - #47 .
INFO  05:56:05,400 - #49 t
INFO  05:56:05,400 - #41 )
INFO  05:56:05,400 - #44 {
INFO  05:56:05,401 - #15 return
INFO  05:56:05,401 - #49 len
INFO  05:56:05,401 - #40 (
INFO  05:56:05,401 - #49 t
INFO  05:56:05,402 - #41 )
INFO  05:56:05,402 - #38 ;
INFO  05:56:05,402 - #45 }
INFO  05:56:05,402 - #14 void
INFO  05:56:05,402 - #49 main
INFO  05:56:05,402 - #40 (
INFO  05:56:05,402 - #41 )
INFO  05:56:05,402 - #49 int
INFO  05:56:05,403 - #49 niz
INFO  05:56:05,403 - #42 [
INFO  05:56:05,403 - #43 ]
INFO  05:56:05,403 - #39 ,
INFO  05:56:05,403 - #49 p
INFO  05:56:05,403 - #38 ;
INFO  05:56:05,403 - #44 {
INFO  05:56:05,403 - #12 print
INFO  05:56:05,403 - #40 (
INFO  05:56:05,403 - #49 a
INFO  05:56:05,403 - #40 (
INFO  05:56:05,403 - #52 1
INFO  05:56:05,403 - #39 ,
INFO  05:56:05,403 - #52 8
INFO  05:56:05,404 - #39 ,
INFO  05:56:05,404 - #52 9
INFO  05:56:05,404 - #39 ,
INFO  05:56:05,404 - #52 10
INFO  05:56:05,404 - #39 ,
INFO  05:56:05,404 - #52 11
INFO  05:56:05,404 - #39 ,
INFO  05:56:05,404 - #52 12
INFO  05:56:05,404 - #39 ,
INFO  05:56:05,404 - #52 13
INFO  05:56:05,404 - #39 ,
INFO  05:56:05,404 - #52 14
INFO  05:56:05,404 - #41 )
INFO  05:56:05,404 - #41 )
INFO  05:56:05,404 - #38 ;
INFO  05:56:05,404 - #12 print
INFO  05:56:05,405 - #40 (
INFO  05:56:05,405 - #49 eol
INFO  05:56:05,405 - #41 )
INFO  05:56:05,405 - #38 ;
INFO  05:56:05,405 - #12 print
INFO  05:56:05,405 - #40 (
INFO  05:56:05,405 - #49 p
INFO  05:56:05,405 - #41 )
INFO  05:56:05,405 - #38 ;
INFO  05:56:05,405 - #45 }
INFO  05:56:05,405 - #45 }
INFO  05:56:05,408 - Line 6: Access to formal argument detected. Method name: a, argument name: t
INFO  05:56:05,408 - Line 6: Method Call detected. Method name: len
INFO  05:56:05,408 - Line 10: Method Call detected. Method name: a
INFO  05:56:05,409 - Method a has varArgs with 8 args
INFO  05:56:05,409 - Line 12: Using local variable name: p
INFO  05:56:05,410 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:56:28,372 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:56:28,390 - #2 program
INFO  05:56:28,390 - #49 MJProgram
INFO  05:56:28,390 - #44 {
INFO  05:56:28,391 - #49 int
INFO  05:56:28,391 - #49 a
INFO  05:56:28,391 - #40 (
INFO  05:56:28,391 - #49 int
INFO  05:56:28,391 - #47 .
INFO  05:56:28,391 - #47 .
INFO  05:56:28,391 - #47 .
INFO  05:56:28,391 - #49 t
INFO  05:56:28,391 - #41 )
INFO  05:56:28,391 - #44 {
INFO  05:56:28,392 - #15 return
INFO  05:56:28,392 - #49 len
INFO  05:56:28,392 - #40 (
INFO  05:56:28,392 - #49 t
INFO  05:56:28,392 - #41 )
INFO  05:56:28,393 - #38 ;
INFO  05:56:28,393 - #45 }
INFO  05:56:28,393 - #14 void
INFO  05:56:28,393 - #49 main
INFO  05:56:28,394 - #40 (
INFO  05:56:28,394 - #41 )
INFO  05:56:28,394 - #49 int
INFO  05:56:28,394 - #49 niz
INFO  05:56:28,394 - #42 [
INFO  05:56:28,394 - #43 ]
INFO  05:56:28,394 - #39 ,
INFO  05:56:28,394 - #49 p
INFO  05:56:28,394 - #38 ;
INFO  05:56:28,395 - #44 {
INFO  05:56:28,395 - #12 print
INFO  05:56:28,395 - #40 (
INFO  05:56:28,395 - #49 a
INFO  05:56:28,395 - #40 (
INFO  05:56:28,395 - #52 1
INFO  05:56:28,395 - #39 ,
INFO  05:56:28,395 - #52 8
INFO  05:56:28,395 - #39 ,
INFO  05:56:28,395 - #52 9
INFO  05:56:28,395 - #39 ,
INFO  05:56:28,395 - #52 10
INFO  05:56:28,395 - #39 ,
INFO  05:56:28,395 - #52 11
INFO  05:56:28,395 - #39 ,
INFO  05:56:28,395 - #52 12
INFO  05:56:28,395 - #39 ,
INFO  05:56:28,395 - #52 13
INFO  05:56:28,396 - #39 ,
INFO  05:56:28,396 - #52 14
INFO  05:56:28,396 - #41 )
INFO  05:56:28,396 - #41 )
INFO  05:56:28,396 - #38 ;
INFO  05:56:28,396 - #12 print
INFO  05:56:28,396 - #40 (
INFO  05:56:28,396 - #49 eol
INFO  05:56:28,396 - #41 )
INFO  05:56:28,396 - #38 ;
INFO  05:56:28,396 - #12 print
INFO  05:56:28,396 - #40 (
INFO  05:56:28,396 - #49 p
INFO  05:56:28,396 - #41 )
INFO  05:56:28,396 - #38 ;
INFO  05:56:28,396 - #45 }
INFO  05:56:28,396 - #45 }
INFO  05:56:28,400 - Line 4: Access to formal argument detected. Method name: a, argument name: t
INFO  05:56:28,400 - Line 4: Method Call detected. Method name: len
INFO  05:56:28,400 - Line 8: Method Call detected. Method name: a
INFO  05:56:28,400 - Method a has varArgs with 8 args
INFO  05:56:28,400 - Line 10: Using local variable name: p
INFO  05:56:28,401 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  05:58:04,155 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:58:04,180 - #2 program
INFO  05:58:04,180 - #49 MJProgram
INFO  05:58:04,180 - #44 {
INFO  05:58:04,181 - #49 int
INFO  05:58:04,181 - #49 a
INFO  05:58:04,181 - #40 (
INFO  05:58:04,181 - #49 int
INFO  05:58:04,181 - #47 .
INFO  05:58:04,181 - #47 .
INFO  05:58:04,181 - #47 .
INFO  05:58:04,181 - #49 t
INFO  05:58:04,182 - #41 )
INFO  05:58:04,182 - #44 {
INFO  05:58:04,182 - #15 return
INFO  05:58:04,183 - #49 len
INFO  05:58:04,183 - #40 (
INFO  05:58:04,183 - #49 t
INFO  05:58:04,183 - #41 )
INFO  05:58:04,183 - #38 ;
INFO  05:58:04,184 - #45 }
INFO  05:58:04,184 - #14 void
INFO  05:58:04,184 - #49 main
INFO  05:58:04,184 - #40 (
INFO  05:58:04,184 - #41 )
INFO  05:58:04,184 - #49 int
INFO  05:58:04,185 - #49 niz
INFO  05:58:04,185 - #42 [
INFO  05:58:04,185 - #43 ]
INFO  05:58:04,185 - #39 ,
INFO  05:58:04,185 - #49 p
INFO  05:58:04,185 - #38 ;
INFO  05:58:04,185 - #44 {
INFO  05:58:04,186 - #12 print
INFO  05:58:04,186 - #40 (
INFO  05:58:04,186 - #49 a
INFO  05:58:04,186 - #40 (
INFO  05:58:04,186 - #52 1
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 8
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 9
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 10
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 11
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 12
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 13
INFO  05:58:04,186 - #39 ,
INFO  05:58:04,186 - #52 14
INFO  05:58:04,186 - #41 )
INFO  05:58:04,186 - #41 )
INFO  05:58:04,187 - #38 ;
INFO  05:58:04,187 - #12 print
INFO  05:58:04,187 - #40 (
INFO  05:58:04,187 - #49 eol
INFO  05:58:04,187 - #41 )
INFO  05:58:04,187 - #38 ;
INFO  05:58:04,187 - #12 print
INFO  05:58:04,187 - #40 (
INFO  05:58:04,187 - #49 p
INFO  05:58:04,187 - #41 )
INFO  05:58:04,187 - #38 ;
INFO  05:58:04,187 - #45 }
INFO  05:58:04,187 - #45 }
INFO  05:59:27,283 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  05:59:27,301 - #2 program
INFO  05:59:27,301 - #49 MJProgram
INFO  05:59:27,301 - #49 int
INFO  05:59:27,302 - #49 xg
INFO  05:59:27,302 - #38 ;
INFO  05:59:27,302 - #44 {
INFO  05:59:27,302 - #49 int
INFO  05:59:27,302 - #49 a
INFO  05:59:27,303 - #40 (
INFO  05:59:27,303 - #49 int
INFO  05:59:27,303 - #47 .
INFO  05:59:27,303 - #47 .
INFO  05:59:27,303 - #47 .
INFO  05:59:27,303 - #49 t
INFO  05:59:27,303 - #41 )
INFO  05:59:27,303 - #44 {
INFO  05:59:27,303 - #15 return
INFO  05:59:27,304 - #49 len
INFO  05:59:27,304 - #40 (
INFO  05:59:27,304 - #49 t
INFO  05:59:27,304 - #41 )
INFO  05:59:27,304 - #38 ;
INFO  05:59:27,305 - #45 }
INFO  05:59:27,305 - #14 void
INFO  05:59:27,305 - #49 main
INFO  05:59:27,305 - #40 (
INFO  05:59:27,305 - #41 )
INFO  05:59:27,305 - #49 int
INFO  05:59:27,305 - #49 niz
INFO  05:59:27,305 - #42 [
INFO  05:59:27,305 - #43 ]
INFO  05:59:27,305 - #39 ,
INFO  05:59:27,306 - #49 p
INFO  05:59:27,306 - #38 ;
INFO  05:59:27,306 - #44 {
INFO  05:59:27,306 - #49 xg
INFO  05:59:27,306 - #27 =
INFO  05:59:27,306 - #52 5
INFO  05:59:27,306 - #38 ;
INFO  05:59:27,306 - #12 print
INFO  05:59:27,306 - #40 (
INFO  05:59:27,306 - #49 xg
INFO  05:59:27,306 - #41 )
INFO  05:59:27,307 - #38 ;
INFO  05:59:27,307 - #12 print
INFO  05:59:27,307 - #40 (
INFO  05:59:27,307 - #49 a
INFO  05:59:27,307 - #40 (
INFO  05:59:27,307 - #52 1
INFO  05:59:27,307 - #39 ,
INFO  05:59:27,307 - #52 8
INFO  05:59:27,307 - #39 ,
INFO  05:59:27,307 - #52 9
INFO  05:59:27,307 - #39 ,
INFO  05:59:27,307 - #52 10
INFO  05:59:27,307 - #39 ,
INFO  05:59:27,307 - #52 11
INFO  05:59:27,307 - #39 ,
INFO  05:59:27,307 - #52 12
INFO  05:59:27,308 - #39 ,
INFO  05:59:27,308 - #52 13
INFO  05:59:27,308 - #39 ,
INFO  05:59:27,308 - #52 14
INFO  05:59:27,308 - #41 )
INFO  05:59:27,308 - #41 )
INFO  05:59:27,308 - #38 ;
INFO  05:59:27,308 - #12 print
INFO  05:59:27,308 - #40 (
INFO  05:59:27,308 - #49 eol
INFO  05:59:27,308 - #41 )
INFO  05:59:27,308 - #38 ;
INFO  05:59:27,308 - #12 print
INFO  05:59:27,308 - #40 (
INFO  05:59:27,308 - #49 xg
INFO  05:59:27,308 - #41 )
INFO  05:59:27,308 - #38 ;
INFO  05:59:27,308 - #45 }
INFO  05:59:27,308 - #45 }
INFO  05:59:27,312 - Line 5: Access to formal argument detected. Method name: a, argument name: t
INFO  05:59:27,312 - Line 5: Method Call detected. Method name: len
INFO  05:59:27,312 - Line 9: Using global variable name: xg
INFO  05:59:27,312 - Line 10: Using global variable name: xg
INFO  05:59:27,312 - Line 11: Method Call detected. Method name: a
INFO  05:59:27,312 - Method a has varArgs with 8 args
INFO  05:59:27,312 - Line 13: Using global variable name: xg
INFO  05:59:27,313 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:02:23,091 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:02:23,109 - #2 program
INFO  06:02:23,109 - #49 MJProgram
INFO  06:02:23,109 - #49 int
INFO  06:02:23,109 - #49 xg
INFO  06:02:23,110 - #38 ;
INFO  06:02:23,110 - #44 {
INFO  06:02:23,110 - #49 int
INFO  06:02:23,110 - #49 a
INFO  06:02:23,110 - #40 (
INFO  06:02:23,111 - #49 int
INFO  06:02:23,111 - #47 .
INFO  06:02:23,111 - #47 .
INFO  06:02:23,111 - #47 .
INFO  06:02:23,111 - #49 t
INFO  06:02:23,111 - #41 )
INFO  06:02:23,111 - #44 {
INFO  06:02:23,111 - #15 return
INFO  06:02:23,112 - #49 len
INFO  06:02:23,112 - #40 (
INFO  06:02:23,112 - #49 t
INFO  06:02:23,112 - #41 )
INFO  06:02:23,112 - #38 ;
INFO  06:02:23,112 - #45 }
INFO  06:02:23,113 - #14 void
INFO  06:02:23,113 - #49 main
INFO  06:02:23,113 - #40 (
INFO  06:02:23,113 - #41 )
INFO  06:02:23,113 - #49 int
INFO  06:02:23,113 - #49 niz
INFO  06:02:23,113 - #42 [
INFO  06:02:23,113 - #43 ]
INFO  06:02:23,113 - #39 ,
INFO  06:02:23,114 - #49 p
INFO  06:02:23,114 - #38 ;
INFO  06:02:23,114 - #44 {
INFO  06:02:23,114 - #49 xg
INFO  06:02:23,114 - #27 =
INFO  06:02:23,114 - #52 5
INFO  06:02:23,114 - #38 ;
INFO  06:02:23,114 - #12 print
INFO  06:02:23,114 - #40 (
INFO  06:02:23,114 - #49 xg
INFO  06:02:23,114 - #41 )
INFO  06:02:23,114 - #38 ;
INFO  06:02:23,115 - #12 print
INFO  06:02:23,115 - #40 (
INFO  06:02:23,115 - #49 a
INFO  06:02:23,115 - #40 (
INFO  06:02:23,115 - #52 1
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 8
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 9
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 10
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 11
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 12
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 13
INFO  06:02:23,115 - #39 ,
INFO  06:02:23,115 - #52 14
INFO  06:02:23,115 - #41 )
INFO  06:02:23,115 - #41 )
INFO  06:02:23,115 - #38 ;
INFO  06:02:23,115 - #12 print
INFO  06:02:23,115 - #40 (
INFO  06:02:23,115 - #49 eol
INFO  06:02:23,116 - #41 )
INFO  06:02:23,116 - #38 ;
INFO  06:02:23,116 - #12 print
INFO  06:02:23,116 - #40 (
INFO  06:02:23,116 - #49 xg
INFO  06:02:23,116 - #41 )
INFO  06:02:23,116 - #38 ;
INFO  06:02:23,116 - #45 }
INFO  06:02:23,116 - #45 }
INFO  06:02:23,119 - Line 5: Access to formal argument detected. Method name: a, argument name: t
INFO  06:02:23,119 - Line 5: Method Call detected. Method name: len
INFO  06:02:23,119 - Line 9: Using global variable name: xg
INFO  06:02:23,119 - Line 10: Using global variable name: xg
INFO  06:02:23,119 - Line 11: Method Call detected. Method name: a
INFO  06:02:23,119 - Method a has varArgs with 8 args
INFO  06:02:23,119 - Line 13: Using global variable name: xg
INFO  06:02:23,121 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:04:32,725 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:04:32,742 - #2 program
INFO  06:04:32,743 - #49 MJProgram
INFO  06:04:32,743 - #49 int
INFO  06:04:32,743 - #49 xg
INFO  06:04:32,743 - #39 ,
INFO  06:04:32,744 - #49 yg
INFO  06:04:32,744 - #38 ;
INFO  06:04:32,744 - #44 {
INFO  06:04:32,744 - #49 int
INFO  06:04:32,744 - #49 a
INFO  06:04:32,744 - #40 (
INFO  06:04:32,744 - #49 int
INFO  06:04:32,745 - #47 .
INFO  06:04:32,745 - #47 .
INFO  06:04:32,745 - #47 .
INFO  06:04:32,745 - #49 t
INFO  06:04:32,745 - #41 )
INFO  06:04:32,745 - #44 {
INFO  06:04:32,745 - #15 return
INFO  06:04:32,745 - #49 len
INFO  06:04:32,745 - #40 (
INFO  06:04:32,746 - #49 t
INFO  06:04:32,746 - #41 )
INFO  06:04:32,746 - #38 ;
INFO  06:04:32,747 - #45 }
INFO  06:04:32,747 - #14 void
INFO  06:04:32,747 - #49 main
INFO  06:04:32,747 - #40 (
INFO  06:04:32,747 - #41 )
INFO  06:04:32,747 - #49 int
INFO  06:04:32,747 - #49 niz
INFO  06:04:32,747 - #42 [
INFO  06:04:32,747 - #43 ]
INFO  06:04:32,747 - #39 ,
INFO  06:04:32,748 - #49 p
INFO  06:04:32,748 - #38 ;
INFO  06:04:32,748 - #44 {
INFO  06:04:32,748 - #49 xg
INFO  06:04:32,748 - #27 =
INFO  06:04:32,748 - #52 5
INFO  06:04:32,748 - #38 ;
INFO  06:04:32,748 - #12 print
INFO  06:04:32,748 - #40 (
INFO  06:04:32,748 - #49 xg
INFO  06:04:32,748 - #41 )
INFO  06:04:32,749 - #38 ;
INFO  06:04:32,749 - #12 print
INFO  06:04:32,749 - #40 (
INFO  06:04:32,749 - #49 a
INFO  06:04:32,749 - #40 (
INFO  06:04:32,749 - #52 1
INFO  06:04:32,749 - #39 ,
INFO  06:04:32,749 - #52 8
INFO  06:04:32,749 - #39 ,
INFO  06:04:32,749 - #52 9
INFO  06:04:32,749 - #39 ,
INFO  06:04:32,749 - #52 10
INFO  06:04:32,749 - #39 ,
INFO  06:04:32,749 - #52 11
INFO  06:04:32,750 - #39 ,
INFO  06:04:32,750 - #52 12
INFO  06:04:32,750 - #39 ,
INFO  06:04:32,750 - #52 13
INFO  06:04:32,750 - #39 ,
INFO  06:04:32,750 - #52 14
INFO  06:04:32,750 - #41 )
INFO  06:04:32,750 - #41 )
INFO  06:04:32,750 - #38 ;
INFO  06:04:32,750 - #12 print
INFO  06:04:32,750 - #40 (
INFO  06:04:32,750 - #49 eol
INFO  06:04:32,750 - #41 )
INFO  06:04:32,750 - #38 ;
INFO  06:04:32,750 - #12 print
INFO  06:04:32,750 - #40 (
INFO  06:04:32,750 - #49 xg
INFO  06:04:32,750 - #41 )
INFO  06:04:32,750 - #38 ;
INFO  06:04:32,750 - #45 }
INFO  06:04:32,750 - #45 }
INFO  06:04:32,754 - Line 5: Access to formal argument detected. Method name: a, argument name: t
INFO  06:04:32,754 - Line 5: Method Call detected. Method name: len
INFO  06:04:32,754 - Line 9: Using global variable name: xg
INFO  06:04:32,754 - Line 10: Using global variable name: xg
INFO  06:04:32,754 - Line 11: Method Call detected. Method name: a
INFO  06:04:32,754 - Method a has varArgs with 8 args
INFO  06:04:32,754 - Line 13: Using global variable name: xg
INFO  06:04:32,755 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:04:49,274 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:04:49,292 - #2 program
INFO  06:04:49,292 - #49 MJProgram
INFO  06:04:49,292 - #49 int
INFO  06:04:49,293 - #49 xg
INFO  06:04:49,293 - #39 ,
INFO  06:04:49,293 - #49 yg
INFO  06:04:49,293 - #39 ,
INFO  06:04:49,293 - #49 tg
INFO  06:04:49,293 - #38 ;
INFO  06:04:49,293 - #44 {
INFO  06:04:49,293 - #49 int
INFO  06:04:49,294 - #49 a
INFO  06:04:49,294 - #40 (
INFO  06:04:49,294 - #49 int
INFO  06:04:49,294 - #47 .
INFO  06:04:49,294 - #47 .
INFO  06:04:49,294 - #47 .
INFO  06:04:49,294 - #49 t
INFO  06:04:49,294 - #41 )
INFO  06:04:49,294 - #44 {
INFO  06:04:49,295 - #15 return
INFO  06:04:49,295 - #49 len
INFO  06:04:49,295 - #40 (
INFO  06:04:49,295 - #49 t
INFO  06:04:49,295 - #41 )
INFO  06:04:49,296 - #38 ;
INFO  06:04:49,296 - #45 }
INFO  06:04:49,296 - #14 void
INFO  06:04:49,296 - #49 main
INFO  06:04:49,296 - #40 (
INFO  06:04:49,296 - #41 )
INFO  06:04:49,296 - #49 int
INFO  06:04:49,296 - #49 niz
INFO  06:04:49,296 - #42 [
INFO  06:04:49,297 - #43 ]
INFO  06:04:49,297 - #39 ,
INFO  06:04:49,297 - #49 p
INFO  06:04:49,297 - #38 ;
INFO  06:04:49,297 - #44 {
INFO  06:04:49,297 - #49 xg
INFO  06:04:49,297 - #27 =
INFO  06:04:49,297 - #52 5
INFO  06:04:49,297 - #38 ;
INFO  06:04:49,298 - #12 print
INFO  06:04:49,298 - #40 (
INFO  06:04:49,298 - #49 xg
INFO  06:04:49,298 - #41 )
INFO  06:04:49,298 - #38 ;
INFO  06:04:49,298 - #12 print
INFO  06:04:49,298 - #40 (
INFO  06:04:49,298 - #49 a
INFO  06:04:49,298 - #40 (
INFO  06:04:49,298 - #52 1
INFO  06:04:49,298 - #39 ,
INFO  06:04:49,298 - #52 8
INFO  06:04:49,298 - #39 ,
INFO  06:04:49,298 - #52 9
INFO  06:04:49,298 - #39 ,
INFO  06:04:49,298 - #52 10
INFO  06:04:49,298 - #39 ,
INFO  06:04:49,299 - #52 11
INFO  06:04:49,299 - #39 ,
INFO  06:04:49,299 - #52 12
INFO  06:04:49,299 - #39 ,
INFO  06:04:49,299 - #52 13
INFO  06:04:49,299 - #39 ,
INFO  06:04:49,299 - #52 14
INFO  06:04:49,299 - #41 )
INFO  06:04:49,299 - #41 )
INFO  06:04:49,299 - #38 ;
INFO  06:04:49,299 - #12 print
INFO  06:04:49,299 - #40 (
INFO  06:04:49,299 - #49 eol
INFO  06:04:49,299 - #41 )
INFO  06:04:49,299 - #38 ;
INFO  06:04:49,299 - #12 print
INFO  06:04:49,299 - #40 (
INFO  06:04:49,299 - #49 xg
INFO  06:04:49,299 - #41 )
INFO  06:04:49,299 - #38 ;
INFO  06:04:49,299 - #45 }
INFO  06:04:49,299 - #45 }
INFO  06:04:49,303 - Line 5: Access to formal argument detected. Method name: a, argument name: t
INFO  06:04:49,303 - Line 5: Method Call detected. Method name: len
INFO  06:04:49,303 - Line 9: Using global variable name: xg
INFO  06:04:49,303 - Line 10: Using global variable name: xg
INFO  06:04:49,303 - Line 11: Method Call detected. Method name: a
INFO  06:04:49,303 - Method a has varArgs with 8 args
INFO  06:04:49,303 - Line 13: Using global variable name: xg
INFO  06:04:49,304 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:08:28,332 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:08:28,350 - #2 program
INFO  06:08:28,350 - #49 MJProgram
INFO  06:08:28,350 - #49 int
INFO  06:08:28,351 - #49 xg
INFO  06:08:28,351 - #39 ,
INFO  06:08:28,351 - #49 yg
INFO  06:08:28,351 - #39 ,
INFO  06:08:28,352 - #49 tg
INFO  06:08:28,352 - #38 ;
INFO  06:08:28,352 - #44 {
INFO  06:08:28,352 - #49 int
INFO  06:08:28,352 - #49 a
INFO  06:08:28,352 - #40 (
INFO  06:08:28,352 - #49 int
INFO  06:08:28,353 - #47 .
INFO  06:08:28,353 - #47 .
INFO  06:08:28,353 - #47 .
INFO  06:08:28,353 - #49 t
INFO  06:08:28,353 - #41 )
INFO  06:08:28,353 - #44 {
INFO  06:08:28,353 - #15 return
INFO  06:08:28,353 - #49 len
INFO  06:08:28,353 - #40 (
INFO  06:08:28,354 - #49 t
INFO  06:08:28,354 - #41 )
INFO  06:08:28,354 - #38 ;
INFO  06:08:28,354 - #45 }
INFO  06:08:28,354 - #14 void
INFO  06:08:28,354 - #49 main
INFO  06:08:28,355 - #40 (
INFO  06:08:28,355 - #41 )
INFO  06:08:28,355 - #49 int
INFO  06:08:28,355 - #49 niz
INFO  06:08:28,355 - #42 [
INFO  06:08:28,355 - #43 ]
INFO  06:08:28,355 - #39 ,
INFO  06:08:28,355 - #49 p
INFO  06:08:28,355 - #38 ;
INFO  06:08:28,355 - #44 {
INFO  06:08:28,355 - #49 xg
INFO  06:08:28,355 - #27 =
INFO  06:08:28,356 - #52 5
INFO  06:08:28,356 - #38 ;
INFO  06:08:28,356 - #12 print
INFO  06:08:28,356 - #40 (
INFO  06:08:28,356 - #49 xg
INFO  06:08:28,356 - #41 )
INFO  06:08:28,356 - #38 ;
INFO  06:08:28,356 - #12 print
INFO  06:08:28,356 - #40 (
INFO  06:08:28,356 - #49 a
INFO  06:08:28,356 - #40 (
INFO  06:08:28,356 - #52 1
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 8
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 9
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 10
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 11
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 12
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 13
INFO  06:08:28,357 - #39 ,
INFO  06:08:28,357 - #52 14
INFO  06:08:28,357 - #41 )
INFO  06:08:28,357 - #41 )
INFO  06:08:28,357 - #38 ;
INFO  06:08:28,357 - #12 print
INFO  06:08:28,357 - #40 (
INFO  06:08:28,357 - #49 eol
INFO  06:08:28,357 - #41 )
INFO  06:08:28,357 - #38 ;
INFO  06:08:28,357 - #12 print
INFO  06:08:28,357 - #40 (
INFO  06:08:28,357 - #49 xg
INFO  06:08:28,357 - #41 )
INFO  06:08:28,357 - #38 ;
INFO  06:08:28,357 - #45 }
INFO  06:08:28,357 - #45 }
INFO  06:08:28,361 - Line 5: Access to formal argument detected. Method name: a, argument name: t
INFO  06:08:28,361 - Line 5: Method Call detected. Method name: len
INFO  06:08:28,361 - Line 9: Using global variable name: xg
INFO  06:08:28,361 - Line 10: Using global variable name: xg
INFO  06:08:28,361 - Line 11: Method Call detected. Method name: a
INFO  06:08:28,361 - Method a has varArgs with 8 args
INFO  06:08:28,361 - Line 13: Using global variable name: xg
INFO  06:08:28,363 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:08:44,057 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:08:44,075 - #2 program
INFO  06:08:44,075 - #49 MJProgram
INFO  06:08:44,076 - #44 {
INFO  06:08:44,076 - #49 int
INFO  06:08:44,076 - #49 a
INFO  06:08:44,076 - #40 (
INFO  06:08:44,076 - #49 int
INFO  06:08:44,077 - #47 .
INFO  06:08:44,077 - #47 .
INFO  06:08:44,077 - #47 .
INFO  06:08:44,077 - #49 t
INFO  06:08:44,077 - #41 )
INFO  06:08:44,077 - #44 {
INFO  06:08:44,077 - #15 return
INFO  06:08:44,078 - #49 len
INFO  06:08:44,078 - #40 (
INFO  06:08:44,078 - #49 t
INFO  06:08:44,078 - #41 )
INFO  06:08:44,078 - #38 ;
INFO  06:08:44,079 - #45 }
INFO  06:08:44,079 - #14 void
INFO  06:08:44,079 - #49 main
INFO  06:08:44,079 - #40 (
INFO  06:08:44,079 - #41 )
INFO  06:08:44,079 - #49 int
INFO  06:08:44,079 - #49 niz
INFO  06:08:44,079 - #42 [
INFO  06:08:44,079 - #43 ]
INFO  06:08:44,079 - #39 ,
INFO  06:08:44,080 - #49 p
INFO  06:08:44,080 - #38 ;
INFO  06:08:44,080 - #44 {
INFO  06:08:44,080 - #49 xg
INFO  06:08:44,080 - #27 =
INFO  06:08:44,080 - #52 5
INFO  06:08:44,080 - #38 ;
INFO  06:08:44,080 - #12 print
INFO  06:08:44,081 - #40 (
INFO  06:08:44,081 - #49 xg
INFO  06:08:44,081 - #41 )
INFO  06:08:44,081 - #38 ;
INFO  06:08:44,081 - #12 print
INFO  06:08:44,081 - #40 (
INFO  06:08:44,081 - #49 a
INFO  06:08:44,081 - #40 (
INFO  06:08:44,081 - #52 1
INFO  06:08:44,081 - #39 ,
INFO  06:08:44,081 - #52 8
INFO  06:08:44,081 - #39 ,
INFO  06:08:44,081 - #52 9
INFO  06:08:44,081 - #39 ,
INFO  06:08:44,081 - #52 10
INFO  06:08:44,081 - #39 ,
INFO  06:08:44,081 - #52 11
INFO  06:08:44,082 - #39 ,
INFO  06:08:44,082 - #52 12
INFO  06:08:44,082 - #39 ,
INFO  06:08:44,082 - #52 13
INFO  06:08:44,082 - #39 ,
INFO  06:08:44,082 - #52 14
INFO  06:08:44,082 - #41 )
INFO  06:08:44,082 - #41 )
INFO  06:08:44,082 - #38 ;
INFO  06:08:44,082 - #12 print
INFO  06:08:44,082 - #40 (
INFO  06:08:44,082 - #49 eol
INFO  06:08:44,082 - #41 )
INFO  06:08:44,082 - #38 ;
INFO  06:08:44,082 - #12 print
INFO  06:08:44,082 - #40 (
INFO  06:08:44,082 - #49 xg
INFO  06:08:44,082 - #41 )
INFO  06:08:44,082 - #38 ;
INFO  06:08:44,082 - #45 }
INFO  06:08:44,082 - #45 }
INFO  06:08:44,086 - Line 4: Access to formal argument detected. Method name: a, argument name: t
INFO  06:08:44,086 - Line 4: Method Call detected. Method name: len
ERROR 06:08:44,086 - Line 8: Symbol xg is not defined.
ERROR 06:08:44,086 - Line 9: Symbol xg is not defined.
ERROR 06:08:44,086 - Cannot invoke "rs.etf.pp1.symboltable.concepts.Obj.getType()" because "o" is null
INFO  06:08:54,436 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:08:54,453 - #2 program
INFO  06:08:54,453 - #49 MJProgram
INFO  06:08:54,453 - #44 {
INFO  06:08:54,454 - #49 int
INFO  06:08:54,454 - #49 a
INFO  06:08:54,454 - #40 (
INFO  06:08:54,454 - #49 int
INFO  06:08:54,454 - #47 .
INFO  06:08:54,454 - #47 .
INFO  06:08:54,454 - #47 .
INFO  06:08:54,454 - #49 t
INFO  06:08:54,454 - #41 )
INFO  06:08:54,454 - #44 {
INFO  06:08:54,455 - #15 return
INFO  06:08:54,455 - #49 len
INFO  06:08:54,455 - #40 (
INFO  06:08:54,455 - #49 t
INFO  06:08:54,455 - #41 )
INFO  06:08:54,456 - #38 ;
INFO  06:08:54,456 - #45 }
INFO  06:08:54,456 - #14 void
INFO  06:08:54,456 - #49 main
INFO  06:08:54,457 - #40 (
INFO  06:08:54,457 - #41 )
INFO  06:08:54,457 - #49 int
INFO  06:08:54,457 - #49 niz
INFO  06:08:54,457 - #42 [
INFO  06:08:54,457 - #43 ]
INFO  06:08:54,457 - #39 ,
INFO  06:08:54,457 - #49 p
INFO  06:08:54,457 - #38 ;
INFO  06:08:54,458 - #44 {
INFO  06:08:54,458 - #12 print
INFO  06:08:54,458 - #40 (
INFO  06:08:54,458 - #49 a
INFO  06:08:54,458 - #40 (
INFO  06:08:54,458 - #52 1
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 8
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 9
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 10
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 11
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 12
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 13
INFO  06:08:54,458 - #39 ,
INFO  06:08:54,458 - #52 14
INFO  06:08:54,459 - #41 )
INFO  06:08:54,459 - #41 )
INFO  06:08:54,459 - #38 ;
INFO  06:08:54,459 - #12 print
INFO  06:08:54,459 - #40 (
INFO  06:08:54,459 - #49 eol
INFO  06:08:54,459 - #41 )
INFO  06:08:54,459 - #38 ;
INFO  06:08:54,459 - #45 }
INFO  06:08:54,459 - #45 }
INFO  06:08:54,462 - Line 4: Access to formal argument detected. Method name: a, argument name: t
INFO  06:08:54,462 - Line 4: Method Call detected. Method name: len
INFO  06:08:54,463 - Line 8: Method Call detected. Method name: a
INFO  06:08:54,463 - Method a has varArgs with 8 args
INFO  06:08:54,464 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:10:31,478 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:10:31,497 - #2 program
INFO  06:10:31,497 - #49 MJProgram
INFO  06:10:31,497 - #44 {
INFO  06:10:31,497 - #49 int
INFO  06:10:31,497 - #49 sum
INFO  06:10:31,497 - #40 (
INFO  06:10:31,498 - #49 int
INFO  06:10:31,498 - #47 .
INFO  06:10:31,498 - #47 .
INFO  06:10:31,498 - #47 .
INFO  06:10:31,498 - #49 var
INFO  06:10:31,498 - #41 )
INFO  06:10:31,498 - #49 int
INFO  06:10:31,498 - #49 i
INFO  06:10:31,498 - #39 ,
INFO  06:10:31,499 - #49 s
INFO  06:10:31,499 - #38 ;
INFO  06:10:31,499 - #44 {
INFO  06:10:31,499 - #49 i
INFO  06:10:31,499 - #27 =
INFO  06:10:31,499 - #49 len
INFO  06:10:31,499 - #40 (
INFO  06:10:31,499 - #49 var
INFO  06:10:31,500 - #41 )
INFO  06:10:31,500 - #23 -
INFO  06:10:31,500 - #52 1
INFO  06:10:31,500 - #38 ;
INFO  06:10:31,501 - #49 s
INFO  06:10:31,501 - #27 =
INFO  06:10:31,501 - #52 0
INFO  06:10:31,501 - #38 ;
INFO  06:10:31,501 - #9 do
INFO  06:10:31,501 - #44 {
INFO  06:10:31,501 - #49 s
INFO  06:10:31,501 - #27 =
INFO  06:10:31,501 - #49 s
INFO  06:10:31,501 - #22 +
INFO  06:10:31,501 - #49 var
INFO  06:10:31,501 - #42 [
INFO  06:10:31,502 - #49 i
INFO  06:10:31,502 - #43 ]
INFO  06:10:31,502 - #38 ;
INFO  06:10:31,502 - #49 i
INFO  06:10:31,502 - #37 --
INFO  06:10:31,502 - #38 ;
INFO  06:10:31,502 - #45 }
INFO  06:10:31,502 - #10 while
INFO  06:10:31,502 - #40 (
INFO  06:10:31,502 - #49 i
INFO  06:10:31,502 - #31 >=
INFO  06:10:31,502 - #52 0
INFO  06:10:31,503 - #41 )
INFO  06:10:31,503 - #38 ;
INFO  06:10:31,503 - #15 return
INFO  06:10:31,503 - #49 s
INFO  06:10:31,503 - #38 ;
INFO  06:10:31,503 - #45 }
INFO  06:10:31,503 - #14 void
INFO  06:10:31,503 - #49 main
INFO  06:10:31,504 - #40 (
INFO  06:10:31,504 - #41 )
INFO  06:10:31,504 - #49 int
INFO  06:10:31,504 - #49 niz
INFO  06:10:31,504 - #42 [
INFO  06:10:31,504 - #43 ]
INFO  06:10:31,504 - #39 ,
INFO  06:10:31,504 - #49 p
INFO  06:10:31,504 - #38 ;
INFO  06:10:31,504 - #44 {
INFO  06:10:31,504 - #12 print
INFO  06:10:31,504 - #40 (
INFO  06:10:31,504 - #49 a
INFO  06:10:31,504 - #40 (
INFO  06:10:31,504 - #52 1
INFO  06:10:31,504 - #39 ,
INFO  06:10:31,504 - #52 2
INFO  06:10:31,504 - #39 ,
INFO  06:10:31,504 - #52 3
INFO  06:10:31,504 - #39 ,
INFO  06:10:31,504 - #52 4
INFO  06:10:31,504 - #39 ,
INFO  06:10:31,504 - #52 5
INFO  06:10:31,505 - #41 )
INFO  06:10:31,505 - #41 )
INFO  06:10:31,505 - #38 ;
INFO  06:10:31,505 - #45 }
INFO  06:10:31,505 - #45 }
INFO  06:10:31,508 - Line 4: Using local variable name: i
INFO  06:10:31,509 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:10:31,509 - Line 4: Method Call detected. Method name: len
INFO  06:10:31,509 - Line 5: Using local variable name: s
INFO  06:10:31,509 - Line 7: Using local variable name: s
INFO  06:10:31,509 - Line 7: Using local variable name: s
INFO  06:10:31,509 - Line 7: Using local variable name: i
INFO  06:10:31,509 - Line 7: Access to array element detected. Array name: var
INFO  06:10:31,509 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:10:31,509 - Line 8: Using local variable name: i
INFO  06:10:31,509 - Line 9: Using local variable name: i
INFO  06:10:31,509 - Line 10: Using local variable name: s
ERROR 06:10:31,509 - Line 14: Symbol a is not defined.
ERROR 06:10:31,509 - Cannot invoke "rs.etf.pp1.symboltable.concepts.Obj.getKind()" because "methodDesignator" is null
INFO  06:10:42,558 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:10:42,577 - #2 program
INFO  06:10:42,577 - #49 MJProgram
INFO  06:10:42,577 - #44 {
INFO  06:10:42,577 - #49 int
INFO  06:10:42,577 - #49 sum
INFO  06:10:42,578 - #40 (
INFO  06:10:42,578 - #49 int
INFO  06:10:42,578 - #47 .
INFO  06:10:42,578 - #47 .
INFO  06:10:42,578 - #47 .
INFO  06:10:42,578 - #49 var
INFO  06:10:42,578 - #41 )
INFO  06:10:42,578 - #49 int
INFO  06:10:42,579 - #49 i
INFO  06:10:42,579 - #39 ,
INFO  06:10:42,579 - #49 s
INFO  06:10:42,579 - #38 ;
INFO  06:10:42,579 - #44 {
INFO  06:10:42,579 - #49 i
INFO  06:10:42,580 - #27 =
INFO  06:10:42,580 - #49 len
INFO  06:10:42,580 - #40 (
INFO  06:10:42,580 - #49 var
INFO  06:10:42,580 - #41 )
INFO  06:10:42,580 - #23 -
INFO  06:10:42,581 - #52 1
INFO  06:10:42,581 - #38 ;
INFO  06:10:42,581 - #49 s
INFO  06:10:42,581 - #27 =
INFO  06:10:42,581 - #52 0
INFO  06:10:42,581 - #38 ;
INFO  06:10:42,581 - #9 do
INFO  06:10:42,581 - #44 {
INFO  06:10:42,582 - #49 s
INFO  06:10:42,582 - #27 =
INFO  06:10:42,582 - #49 s
INFO  06:10:42,582 - #22 +
INFO  06:10:42,582 - #49 var
INFO  06:10:42,582 - #42 [
INFO  06:10:42,582 - #49 i
INFO  06:10:42,582 - #43 ]
INFO  06:10:42,582 - #38 ;
INFO  06:10:42,582 - #49 i
INFO  06:10:42,582 - #37 --
INFO  06:10:42,582 - #38 ;
INFO  06:10:42,583 - #45 }
INFO  06:10:42,583 - #10 while
INFO  06:10:42,583 - #40 (
INFO  06:10:42,583 - #49 i
INFO  06:10:42,583 - #31 >=
INFO  06:10:42,583 - #52 0
INFO  06:10:42,583 - #41 )
INFO  06:10:42,583 - #38 ;
INFO  06:10:42,584 - #15 return
INFO  06:10:42,584 - #49 s
INFO  06:10:42,584 - #38 ;
INFO  06:10:42,584 - #45 }
INFO  06:10:42,584 - #14 void
INFO  06:10:42,584 - #49 main
INFO  06:10:42,584 - #40 (
INFO  06:10:42,584 - #41 )
INFO  06:10:42,584 - #49 int
INFO  06:10:42,584 - #49 a
INFO  06:10:42,584 - #38 ;
INFO  06:10:42,584 - #44 {
INFO  06:10:42,584 - #12 print
INFO  06:10:42,584 - #40 (
INFO  06:10:42,584 - #49 a
INFO  06:10:42,584 - #40 (
INFO  06:10:42,585 - #52 1
INFO  06:10:42,585 - #39 ,
INFO  06:10:42,585 - #52 2
INFO  06:10:42,585 - #39 ,
INFO  06:10:42,585 - #52 3
INFO  06:10:42,585 - #39 ,
INFO  06:10:42,585 - #52 4
INFO  06:10:42,585 - #39 ,
INFO  06:10:42,585 - #52 5
INFO  06:10:42,585 - #41 )
INFO  06:10:42,585 - #41 )
INFO  06:10:42,585 - #38 ;
INFO  06:10:42,585 - #45 }
INFO  06:10:42,585 - #45 }
INFO  06:10:42,589 - Line 4: Using local variable name: i
INFO  06:10:42,589 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:10:42,589 - Line 4: Method Call detected. Method name: len
INFO  06:10:42,589 - Line 5: Using local variable name: s
INFO  06:10:42,589 - Line 7: Using local variable name: s
INFO  06:10:42,589 - Line 7: Using local variable name: s
INFO  06:10:42,589 - Line 7: Using local variable name: i
INFO  06:10:42,589 - Line 7: Access to array element detected. Array name: var
INFO  06:10:42,589 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:10:42,589 - Line 8: Using local variable name: i
INFO  06:10:42,589 - Line 9: Using local variable name: i
INFO  06:10:42,589 - Line 10: Using local variable name: s
INFO  06:10:42,589 - Line 14: Using local variable name: a
ERROR 06:10:42,590 - Line 14: Symbol a is used like a method but is not a method.
ERROR 06:10:42,590 - One or more semantic errors found! Compiling unsuccessful!
INFO  06:10:53,589 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:10:53,608 - #2 program
INFO  06:10:53,608 - #49 MJProgram
INFO  06:10:53,608 - #44 {
INFO  06:10:53,608 - #49 int
INFO  06:10:53,608 - #49 sum
INFO  06:10:53,609 - #40 (
INFO  06:10:53,609 - #49 int
INFO  06:10:53,609 - #47 .
INFO  06:10:53,609 - #47 .
INFO  06:10:53,609 - #47 .
INFO  06:10:53,609 - #49 var
INFO  06:10:53,609 - #41 )
INFO  06:10:53,609 - #49 int
INFO  06:10:53,610 - #49 i
INFO  06:10:53,610 - #39 ,
INFO  06:10:53,610 - #49 s
INFO  06:10:53,610 - #38 ;
INFO  06:10:53,610 - #44 {
INFO  06:10:53,610 - #49 i
INFO  06:10:53,611 - #27 =
INFO  06:10:53,611 - #49 len
INFO  06:10:53,611 - #40 (
INFO  06:10:53,611 - #49 var
INFO  06:10:53,611 - #41 )
INFO  06:10:53,611 - #23 -
INFO  06:10:53,611 - #52 1
INFO  06:10:53,612 - #38 ;
INFO  06:10:53,612 - #49 s
INFO  06:10:53,612 - #27 =
INFO  06:10:53,612 - #52 0
INFO  06:10:53,612 - #38 ;
INFO  06:10:53,612 - #9 do
INFO  06:10:53,612 - #44 {
INFO  06:10:53,613 - #49 s
INFO  06:10:53,613 - #27 =
INFO  06:10:53,613 - #49 s
INFO  06:10:53,613 - #22 +
INFO  06:10:53,613 - #49 var
INFO  06:10:53,613 - #42 [
INFO  06:10:53,613 - #49 i
INFO  06:10:53,613 - #43 ]
INFO  06:10:53,613 - #38 ;
INFO  06:10:53,613 - #49 i
INFO  06:10:53,613 - #37 --
INFO  06:10:53,613 - #38 ;
INFO  06:10:53,614 - #45 }
INFO  06:10:53,614 - #10 while
INFO  06:10:53,614 - #40 (
INFO  06:10:53,614 - #49 i
INFO  06:10:53,614 - #31 >=
INFO  06:10:53,614 - #52 0
INFO  06:10:53,615 - #41 )
INFO  06:10:53,615 - #38 ;
INFO  06:10:53,615 - #15 return
INFO  06:10:53,615 - #49 s
INFO  06:10:53,615 - #38 ;
INFO  06:10:53,615 - #45 }
INFO  06:10:53,615 - #14 void
INFO  06:10:53,615 - #49 main
INFO  06:10:53,615 - #40 (
INFO  06:10:53,616 - #41 )
INFO  06:10:53,616 - #44 {
INFO  06:10:53,616 - #12 print
INFO  06:10:53,616 - #40 (
INFO  06:10:53,616 - #49 sum
INFO  06:10:53,616 - #40 (
INFO  06:10:53,616 - #52 1
INFO  06:10:53,616 - #39 ,
INFO  06:10:53,616 - #52 2
INFO  06:10:53,616 - #39 ,
INFO  06:10:53,616 - #52 3
INFO  06:10:53,616 - #39 ,
INFO  06:10:53,616 - #52 4
INFO  06:10:53,616 - #39 ,
INFO  06:10:53,616 - #52 5
INFO  06:10:53,616 - #41 )
INFO  06:10:53,616 - #41 )
INFO  06:10:53,616 - #38 ;
INFO  06:10:53,616 - #45 }
INFO  06:10:53,616 - #45 }
INFO  06:10:53,620 - Line 4: Using local variable name: i
INFO  06:10:53,620 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:10:53,620 - Line 4: Method Call detected. Method name: len
INFO  06:10:53,620 - Line 5: Using local variable name: s
INFO  06:10:53,620 - Line 7: Using local variable name: s
INFO  06:10:53,621 - Line 7: Using local variable name: s
INFO  06:10:53,621 - Line 7: Using local variable name: i
INFO  06:10:53,621 - Line 7: Access to array element detected. Array name: var
INFO  06:10:53,621 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:10:53,621 - Line 8: Using local variable name: i
INFO  06:10:53,621 - Line 9: Using local variable name: i
INFO  06:10:53,621 - Line 10: Using local variable name: s
INFO  06:10:53,621 - Line 14: Method Call detected. Method name: sum
INFO  06:10:53,621 - Method sum has varArgs with 5 args
INFO  06:10:53,622 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:11:41,520 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:11:41,539 - #2 program
INFO  06:11:41,539 - #49 MJProgram
INFO  06:11:41,539 - #44 {
INFO  06:11:41,539 - #49 int
INFO  06:11:41,539 - #49 sum
INFO  06:11:41,540 - #40 (
INFO  06:11:41,540 - #49 int
INFO  06:11:41,540 - #47 .
INFO  06:11:41,540 - #47 .
INFO  06:11:41,540 - #47 .
INFO  06:11:41,540 - #49 var
INFO  06:11:41,540 - #41 )
INFO  06:11:41,540 - #49 int
INFO  06:11:41,541 - #49 i
INFO  06:11:41,541 - #39 ,
INFO  06:11:41,541 - #49 s
INFO  06:11:41,541 - #38 ;
INFO  06:11:41,541 - #44 {
INFO  06:11:41,541 - #49 i
INFO  06:11:41,542 - #27 =
INFO  06:11:41,542 - #49 len
INFO  06:11:41,542 - #40 (
INFO  06:11:41,542 - #49 var
INFO  06:11:41,542 - #41 )
INFO  06:11:41,542 - #23 -
INFO  06:11:41,543 - #52 1
INFO  06:11:41,543 - #38 ;
INFO  06:11:41,543 - #49 s
INFO  06:11:41,543 - #27 =
INFO  06:11:41,543 - #52 0
INFO  06:11:41,543 - #38 ;
INFO  06:11:41,543 - #9 do
INFO  06:11:41,543 - #44 {
INFO  06:11:41,543 - #49 s
INFO  06:11:41,544 - #27 =
INFO  06:11:41,544 - #49 s
INFO  06:11:41,544 - #22 +
INFO  06:11:41,544 - #49 var
INFO  06:11:41,544 - #42 [
INFO  06:11:41,544 - #49 i
INFO  06:11:41,544 - #43 ]
INFO  06:11:41,544 - #38 ;
INFO  06:11:41,544 - #49 i
INFO  06:11:41,544 - #37 --
INFO  06:11:41,544 - #38 ;
INFO  06:11:41,544 - #45 }
INFO  06:11:41,544 - #10 while
INFO  06:11:41,545 - #40 (
INFO  06:11:41,545 - #49 i
INFO  06:11:41,545 - #31 >=
INFO  06:11:41,545 - #52 0
INFO  06:11:41,545 - #41 )
INFO  06:11:41,545 - #38 ;
INFO  06:11:41,546 - #15 return
INFO  06:11:41,546 - #49 s
INFO  06:11:41,546 - #38 ;
INFO  06:11:41,546 - #45 }
INFO  06:11:41,546 - #14 void
INFO  06:11:41,546 - #49 main
INFO  06:11:41,546 - #40 (
INFO  06:11:41,546 - #41 )
INFO  06:11:41,546 - #44 {
INFO  06:11:41,546 - #12 print
INFO  06:11:41,546 - #40 (
INFO  06:11:41,546 - #49 sum
INFO  06:11:41,546 - #40 (
INFO  06:11:41,546 - #52 1
INFO  06:11:41,546 - #39 ,
INFO  06:11:41,546 - #52 2
INFO  06:11:41,546 - #39 ,
INFO  06:11:41,547 - #52 3
INFO  06:11:41,547 - #39 ,
INFO  06:11:41,547 - #52 4
INFO  06:11:41,547 - #39 ,
INFO  06:11:41,547 - #52 5
INFO  06:11:41,547 - #41 )
INFO  06:11:41,547 - #41 )
INFO  06:11:41,547 - #38 ;
INFO  06:11:41,547 - #12 print
INFO  06:11:41,547 - #40 (
INFO  06:11:41,547 - #49 eol
INFO  06:11:41,547 - #41 )
INFO  06:11:41,547 - #38 ;
INFO  06:11:41,547 - #12 print
INFO  06:11:41,547 - #40 (
INFO  06:11:41,547 - #49 sum
INFO  06:11:41,547 - #40 (
INFO  06:11:41,547 - #52 1
INFO  06:11:41,547 - #39 ,
INFO  06:11:41,547 - #52 2
INFO  06:11:41,547 - #41 )
INFO  06:11:41,547 - #41 )
INFO  06:11:41,547 - #38 ;
INFO  06:11:41,547 - #12 print
INFO  06:11:41,547 - #40 (
INFO  06:11:41,547 - #49 eol
INFO  06:11:41,548 - #41 )
INFO  06:11:41,548 - #38 ;
INFO  06:11:41,548 - #12 print
INFO  06:11:41,548 - #40 (
INFO  06:11:41,548 - #49 sum
INFO  06:11:41,548 - #40 (
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #39 ,
INFO  06:11:41,548 - #52 10
INFO  06:11:41,548 - #41 )
INFO  06:11:41,548 - #38 ;
ERROR 06:11:41,549 - 
Sintaksna greska na liniji 18
INFO  06:11:41,549 - #45 }
INFO  06:11:41,549 - #45 }
ERROR 06:11:41,549 - Izvrsen oporovak prilikom greske naredbi dodele do ; u liniji 13
INFO  06:11:41,553 - Line 4: Using local variable name: i
INFO  06:11:41,553 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:11:41,553 - Line 4: Method Call detected. Method name: len
INFO  06:11:41,553 - Line 5: Using local variable name: s
INFO  06:11:41,553 - Line 7: Using local variable name: s
INFO  06:11:41,553 - Line 7: Using local variable name: s
INFO  06:11:41,553 - Line 7: Using local variable name: i
INFO  06:11:41,553 - Line 7: Access to array element detected. Array name: var
INFO  06:11:41,553 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:11:41,553 - Line 8: Using local variable name: i
INFO  06:11:41,553 - Line 9: Using local variable name: i
INFO  06:11:41,553 - Line 10: Using local variable name: s
INFO  06:11:41,553 - Line 14: Method Call detected. Method name: sum
INFO  06:11:41,553 - Method sum has varArgs with 5 args
INFO  06:11:41,554 - Line 16: Method Call detected. Method name: sum
INFO  06:11:41,554 - Method sum has varArgs with 2 args
INFO  06:11:41,555 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:12:02,942 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:12:02,961 - #2 program
INFO  06:12:02,961 - #49 MJProgram
INFO  06:12:02,961 - #44 {
INFO  06:12:02,962 - #49 int
INFO  06:12:02,962 - #49 sum
INFO  06:12:02,962 - #40 (
INFO  06:12:02,962 - #49 int
INFO  06:12:02,962 - #47 .
INFO  06:12:02,962 - #47 .
INFO  06:12:02,962 - #47 .
INFO  06:12:02,962 - #49 var
INFO  06:12:02,963 - #41 )
INFO  06:12:02,963 - #49 int
INFO  06:12:02,963 - #49 i
INFO  06:12:02,963 - #39 ,
INFO  06:12:02,964 - #49 s
INFO  06:12:02,964 - #38 ;
INFO  06:12:02,964 - #44 {
INFO  06:12:02,964 - #49 i
INFO  06:12:02,964 - #27 =
INFO  06:12:02,964 - #49 len
INFO  06:12:02,964 - #40 (
INFO  06:12:02,964 - #49 var
INFO  06:12:02,964 - #41 )
INFO  06:12:02,965 - #23 -
INFO  06:12:02,965 - #52 1
INFO  06:12:02,965 - #38 ;
INFO  06:12:02,965 - #49 s
INFO  06:12:02,965 - #27 =
INFO  06:12:02,966 - #52 0
INFO  06:12:02,966 - #38 ;
INFO  06:12:02,966 - #9 do
INFO  06:12:02,966 - #44 {
INFO  06:12:02,966 - #49 s
INFO  06:12:02,966 - #27 =
INFO  06:12:02,966 - #49 s
INFO  06:12:02,966 - #22 +
INFO  06:12:02,966 - #49 var
INFO  06:12:02,966 - #42 [
INFO  06:12:02,966 - #49 i
INFO  06:12:02,966 - #43 ]
INFO  06:12:02,966 - #38 ;
INFO  06:12:02,967 - #49 i
INFO  06:12:02,967 - #37 --
INFO  06:12:02,967 - #38 ;
INFO  06:12:02,967 - #45 }
INFO  06:12:02,967 - #10 while
INFO  06:12:02,967 - #40 (
INFO  06:12:02,967 - #49 i
INFO  06:12:02,967 - #31 >=
INFO  06:12:02,967 - #52 0
INFO  06:12:02,968 - #41 )
INFO  06:12:02,968 - #38 ;
INFO  06:12:02,968 - #15 return
INFO  06:12:02,968 - #49 s
INFO  06:12:02,968 - #38 ;
INFO  06:12:02,968 - #45 }
INFO  06:12:02,968 - #14 void
INFO  06:12:02,968 - #49 main
INFO  06:12:02,969 - #40 (
INFO  06:12:02,969 - #41 )
INFO  06:12:02,969 - #44 {
INFO  06:12:02,969 - #12 print
INFO  06:12:02,969 - #40 (
INFO  06:12:02,969 - #49 sum
INFO  06:12:02,969 - #40 (
INFO  06:12:02,969 - #52 1
INFO  06:12:02,969 - #39 ,
INFO  06:12:02,969 - #52 2
INFO  06:12:02,969 - #39 ,
INFO  06:12:02,969 - #52 3
INFO  06:12:02,969 - #39 ,
INFO  06:12:02,969 - #52 4
INFO  06:12:02,969 - #39 ,
INFO  06:12:02,969 - #52 5
INFO  06:12:02,969 - #41 )
INFO  06:12:02,969 - #41 )
INFO  06:12:02,970 - #38 ;
INFO  06:12:02,970 - #12 print
INFO  06:12:02,970 - #40 (
INFO  06:12:02,970 - #49 eol
INFO  06:12:02,970 - #41 )
INFO  06:12:02,970 - #38 ;
INFO  06:12:02,970 - #12 print
INFO  06:12:02,970 - #40 (
INFO  06:12:02,970 - #49 sum
INFO  06:12:02,970 - #40 (
INFO  06:12:02,970 - #52 1
INFO  06:12:02,970 - #39 ,
INFO  06:12:02,970 - #52 2
INFO  06:12:02,970 - #41 )
INFO  06:12:02,970 - #41 )
INFO  06:12:02,970 - #38 ;
INFO  06:12:02,970 - #12 print
INFO  06:12:02,970 - #40 (
INFO  06:12:02,970 - #49 eol
INFO  06:12:02,970 - #41 )
INFO  06:12:02,970 - #38 ;
INFO  06:12:02,970 - #12 print
INFO  06:12:02,970 - #40 (
INFO  06:12:02,970 - #49 sum
INFO  06:12:02,970 - #40 (
INFO  06:12:02,970 - #52 10
INFO  06:12:02,970 - #39 ,
INFO  06:12:02,970 - #52 10
INFO  06:12:02,970 - #39 ,
INFO  06:12:02,970 - #52 10
INFO  06:12:02,970 - #39 ,
INFO  06:12:02,971 - #52 10
INFO  06:12:02,971 - #39 ,
INFO  06:12:02,971 - #52 10
INFO  06:12:02,971 - #39 ,
INFO  06:12:02,971 - #52 10
INFO  06:12:02,971 - #41 )
INFO  06:12:02,971 - #38 ;
ERROR 06:12:02,971 - 
Sintaksna greska na liniji 18
INFO  06:12:02,971 - #45 }
INFO  06:12:02,971 - #45 }
ERROR 06:12:02,971 - Izvrsen oporovak prilikom greske naredbi dodele do ; u liniji 13
INFO  06:12:02,975 - Line 4: Using local variable name: i
INFO  06:12:02,975 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:02,975 - Line 4: Method Call detected. Method name: len
INFO  06:12:02,975 - Line 5: Using local variable name: s
INFO  06:12:02,975 - Line 7: Using local variable name: s
INFO  06:12:02,975 - Line 7: Using local variable name: s
INFO  06:12:02,975 - Line 7: Using local variable name: i
INFO  06:12:02,975 - Line 7: Access to array element detected. Array name: var
INFO  06:12:02,975 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:02,976 - Line 8: Using local variable name: i
INFO  06:12:02,976 - Line 9: Using local variable name: i
INFO  06:12:02,976 - Line 10: Using local variable name: s
INFO  06:12:02,976 - Line 14: Method Call detected. Method name: sum
INFO  06:12:02,976 - Method sum has varArgs with 5 args
INFO  06:12:02,976 - Line 16: Method Call detected. Method name: sum
INFO  06:12:02,976 - Method sum has varArgs with 2 args
INFO  06:12:02,977 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:12:23,421 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:12:23,438 - #2 program
INFO  06:12:23,438 - #49 MJProgram
INFO  06:12:23,438 - #44 {
INFO  06:12:23,439 - #49 int
INFO  06:12:23,439 - #49 sum
INFO  06:12:23,439 - #40 (
INFO  06:12:23,440 - #49 int
INFO  06:12:23,440 - #47 .
INFO  06:12:23,440 - #47 .
INFO  06:12:23,440 - #47 .
INFO  06:12:23,440 - #49 var
INFO  06:12:23,440 - #41 )
INFO  06:12:23,440 - #49 int
INFO  06:12:23,440 - #49 i
INFO  06:12:23,440 - #39 ,
INFO  06:12:23,441 - #49 s
INFO  06:12:23,441 - #38 ;
INFO  06:12:23,441 - #44 {
INFO  06:12:23,441 - #49 i
INFO  06:12:23,441 - #27 =
INFO  06:12:23,441 - #49 len
INFO  06:12:23,442 - #40 (
INFO  06:12:23,442 - #49 var
INFO  06:12:23,442 - #41 )
INFO  06:12:23,442 - #23 -
INFO  06:12:23,442 - #52 1
INFO  06:12:23,443 - #38 ;
INFO  06:12:23,443 - #49 s
INFO  06:12:23,443 - #27 =
INFO  06:12:23,443 - #52 0
INFO  06:12:23,443 - #38 ;
INFO  06:12:23,443 - #9 do
INFO  06:12:23,443 - #44 {
INFO  06:12:23,443 - #49 s
INFO  06:12:23,443 - #27 =
INFO  06:12:23,443 - #49 s
INFO  06:12:23,443 - #22 +
INFO  06:12:23,443 - #49 var
INFO  06:12:23,444 - #42 [
INFO  06:12:23,444 - #49 i
INFO  06:12:23,444 - #43 ]
INFO  06:12:23,444 - #38 ;
INFO  06:12:23,444 - #49 i
INFO  06:12:23,444 - #37 --
INFO  06:12:23,444 - #38 ;
INFO  06:12:23,444 - #45 }
INFO  06:12:23,444 - #10 while
INFO  06:12:23,444 - #40 (
INFO  06:12:23,444 - #49 i
INFO  06:12:23,444 - #31 >=
INFO  06:12:23,445 - #52 0
INFO  06:12:23,445 - #41 )
INFO  06:12:23,445 - #38 ;
INFO  06:12:23,445 - #15 return
INFO  06:12:23,445 - #49 s
INFO  06:12:23,445 - #38 ;
INFO  06:12:23,445 - #45 }
INFO  06:12:23,445 - #14 void
INFO  06:12:23,446 - #49 main
INFO  06:12:23,446 - #40 (
INFO  06:12:23,446 - #41 )
INFO  06:12:23,446 - #44 {
INFO  06:12:23,446 - #12 print
INFO  06:12:23,446 - #40 (
INFO  06:12:23,446 - #49 sum
INFO  06:12:23,446 - #40 (
INFO  06:12:23,446 - #52 1
INFO  06:12:23,446 - #39 ,
INFO  06:12:23,446 - #52 2
INFO  06:12:23,446 - #39 ,
INFO  06:12:23,446 - #52 3
INFO  06:12:23,446 - #39 ,
INFO  06:12:23,446 - #52 4
INFO  06:12:23,446 - #39 ,
INFO  06:12:23,446 - #52 5
INFO  06:12:23,446 - #41 )
INFO  06:12:23,446 - #41 )
INFO  06:12:23,447 - #38 ;
INFO  06:12:23,447 - #12 print
INFO  06:12:23,447 - #40 (
INFO  06:12:23,447 - #49 eol
INFO  06:12:23,447 - #41 )
INFO  06:12:23,447 - #38 ;
INFO  06:12:23,447 - #12 print
INFO  06:12:23,447 - #40 (
INFO  06:12:23,447 - #49 sum
INFO  06:12:23,447 - #40 (
INFO  06:12:23,447 - #52 1
INFO  06:12:23,447 - #39 ,
INFO  06:12:23,447 - #52 2
INFO  06:12:23,447 - #41 )
INFO  06:12:23,447 - #41 )
INFO  06:12:23,447 - #38 ;
INFO  06:12:23,447 - #12 print
INFO  06:12:23,447 - #40 (
INFO  06:12:23,447 - #49 eol
INFO  06:12:23,447 - #41 )
INFO  06:12:23,447 - #38 ;
INFO  06:12:23,447 - #12 print
INFO  06:12:23,447 - #40 (
INFO  06:12:23,447 - #49 sum
INFO  06:12:23,447 - #40 (
INFO  06:12:23,447 - #52 10
INFO  06:12:23,447 - #39 ,
INFO  06:12:23,447 - #52 10
INFO  06:12:23,448 - #39 ,
INFO  06:12:23,448 - #52 10
INFO  06:12:23,448 - #39 ,
INFO  06:12:23,448 - #52 10
INFO  06:12:23,448 - #39 ,
INFO  06:12:23,448 - #52 10
INFO  06:12:23,448 - #39 ,
INFO  06:12:23,448 - #52 10
INFO  06:12:23,448 - #41 )
INFO  06:12:23,448 - #38 ;
ERROR 06:12:23,448 - 
Sintaksna greska na liniji 18
INFO  06:12:23,448 - #45 }
INFO  06:12:23,448 - #45 }
ERROR 06:12:23,448 - Izvrsen oporovak prilikom greske naredbi dodele do ; u liniji 13
INFO  06:12:23,452 - Line 4: Using local variable name: i
INFO  06:12:23,452 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:23,452 - Line 4: Method Call detected. Method name: len
INFO  06:12:23,452 - Line 5: Using local variable name: s
INFO  06:12:23,452 - Line 7: Using local variable name: s
INFO  06:12:23,452 - Line 7: Using local variable name: s
INFO  06:12:23,452 - Line 7: Using local variable name: i
INFO  06:12:23,452 - Line 7: Access to array element detected. Array name: var
INFO  06:12:23,453 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:23,453 - Line 8: Using local variable name: i
INFO  06:12:23,453 - Line 9: Using local variable name: i
INFO  06:12:23,453 - Line 10: Using local variable name: s
INFO  06:12:23,453 - Line 14: Method Call detected. Method name: sum
INFO  06:12:23,453 - Method sum has varArgs with 5 args
INFO  06:12:23,453 - Line 16: Method Call detected. Method name: sum
INFO  06:12:23,453 - Method sum has varArgs with 2 args
INFO  06:12:23,454 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:12:39,859 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:12:39,877 - #2 program
INFO  06:12:39,877 - #49 MJProgram
INFO  06:12:39,877 - #44 {
INFO  06:12:39,877 - #49 int
INFO  06:12:39,877 - #49 sum
INFO  06:12:39,878 - #40 (
INFO  06:12:39,878 - #49 int
INFO  06:12:39,878 - #47 .
INFO  06:12:39,878 - #47 .
INFO  06:12:39,878 - #47 .
INFO  06:12:39,878 - #49 var
INFO  06:12:39,878 - #41 )
INFO  06:12:39,878 - #49 int
INFO  06:12:39,878 - #49 i
INFO  06:12:39,879 - #39 ,
INFO  06:12:39,879 - #49 s
INFO  06:12:39,879 - #38 ;
INFO  06:12:39,879 - #44 {
INFO  06:12:39,880 - #49 i
INFO  06:12:39,880 - #27 =
INFO  06:12:39,880 - #49 len
INFO  06:12:39,880 - #40 (
INFO  06:12:39,880 - #49 var
INFO  06:12:39,880 - #41 )
INFO  06:12:39,880 - #23 -
INFO  06:12:39,881 - #52 1
INFO  06:12:39,881 - #38 ;
INFO  06:12:39,881 - #49 s
INFO  06:12:39,881 - #27 =
INFO  06:12:39,881 - #52 0
INFO  06:12:39,882 - #38 ;
INFO  06:12:39,882 - #9 do
INFO  06:12:39,882 - #44 {
INFO  06:12:39,882 - #49 s
INFO  06:12:39,882 - #27 =
INFO  06:12:39,882 - #49 s
INFO  06:12:39,882 - #22 +
INFO  06:12:39,882 - #49 var
INFO  06:12:39,882 - #42 [
INFO  06:12:39,882 - #49 i
INFO  06:12:39,882 - #43 ]
INFO  06:12:39,882 - #38 ;
INFO  06:12:39,883 - #49 i
INFO  06:12:39,883 - #37 --
INFO  06:12:39,883 - #38 ;
INFO  06:12:39,883 - #45 }
INFO  06:12:39,883 - #10 while
INFO  06:12:39,883 - #40 (
INFO  06:12:39,883 - #49 i
INFO  06:12:39,883 - #31 >=
INFO  06:12:39,883 - #52 0
INFO  06:12:39,884 - #41 )
INFO  06:12:39,884 - #38 ;
INFO  06:12:39,884 - #15 return
INFO  06:12:39,884 - #49 s
INFO  06:12:39,884 - #38 ;
INFO  06:12:39,884 - #45 }
INFO  06:12:39,885 - #14 void
INFO  06:12:39,885 - #49 main
INFO  06:12:39,885 - #40 (
INFO  06:12:39,885 - #41 )
INFO  06:12:39,885 - #44 {
INFO  06:12:39,885 - #12 print
INFO  06:12:39,885 - #40 (
INFO  06:12:39,885 - #49 sum
INFO  06:12:39,885 - #40 (
INFO  06:12:39,885 - #52 1
INFO  06:12:39,885 - #39 ,
INFO  06:12:39,885 - #52 2
INFO  06:12:39,885 - #39 ,
INFO  06:12:39,885 - #52 3
INFO  06:12:39,885 - #39 ,
INFO  06:12:39,885 - #52 4
INFO  06:12:39,885 - #39 ,
INFO  06:12:39,886 - #52 5
INFO  06:12:39,886 - #41 )
INFO  06:12:39,886 - #41 )
INFO  06:12:39,886 - #38 ;
INFO  06:12:39,886 - #12 print
INFO  06:12:39,886 - #40 (
INFO  06:12:39,886 - #49 eol
INFO  06:12:39,886 - #41 )
INFO  06:12:39,886 - #38 ;
INFO  06:12:39,886 - #12 print
INFO  06:12:39,886 - #40 (
INFO  06:12:39,886 - #49 sum
INFO  06:12:39,886 - #40 (
INFO  06:12:39,886 - #52 1
INFO  06:12:39,886 - #39 ,
INFO  06:12:39,886 - #52 2
INFO  06:12:39,886 - #41 )
INFO  06:12:39,886 - #41 )
INFO  06:12:39,886 - #38 ;
INFO  06:12:39,887 - #12 print
INFO  06:12:39,887 - #40 (
INFO  06:12:39,887 - #49 eol
INFO  06:12:39,887 - #41 )
INFO  06:12:39,887 - #38 ;
INFO  06:12:39,887 - #12 print
INFO  06:12:39,887 - #40 (
INFO  06:12:39,887 - #49 sum
INFO  06:12:39,887 - #40 (
INFO  06:12:39,887 - #52 10
INFO  06:12:39,887 - #39 ,
INFO  06:12:39,887 - #52 10
INFO  06:12:39,887 - #39 ,
INFO  06:12:39,887 - #52 10
INFO  06:12:39,887 - #39 ,
INFO  06:12:39,887 - #52 10
INFO  06:12:39,887 - #39 ,
INFO  06:12:39,887 - #52 10
INFO  06:12:39,887 - #39 ,
INFO  06:12:39,887 - #52 10
INFO  06:12:39,887 - #41 )
INFO  06:12:39,887 - #41 )
INFO  06:12:39,887 - #38 ;
INFO  06:12:39,887 - #45 }
INFO  06:12:39,887 - #45 }
INFO  06:12:39,891 - Line 4: Using local variable name: i
INFO  06:12:39,891 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:39,892 - Line 4: Method Call detected. Method name: len
INFO  06:12:39,892 - Line 5: Using local variable name: s
INFO  06:12:39,892 - Line 7: Using local variable name: s
INFO  06:12:39,892 - Line 7: Using local variable name: s
INFO  06:12:39,892 - Line 7: Using local variable name: i
INFO  06:12:39,892 - Line 7: Access to array element detected. Array name: var
INFO  06:12:39,892 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:39,892 - Line 8: Using local variable name: i
INFO  06:12:39,892 - Line 9: Using local variable name: i
INFO  06:12:39,892 - Line 10: Using local variable name: s
INFO  06:12:39,892 - Line 14: Method Call detected. Method name: sum
INFO  06:12:39,892 - Method sum has varArgs with 5 args
INFO  06:12:39,892 - Line 16: Method Call detected. Method name: sum
INFO  06:12:39,892 - Method sum has varArgs with 2 args
INFO  06:12:39,892 - Line 18: Method Call detected. Method name: sum
INFO  06:12:39,892 - Method sum has varArgs with 6 args
INFO  06:12:39,893 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:12:53,411 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:12:53,429 - #2 program
INFO  06:12:53,429 - #49 MJProgram
INFO  06:12:53,429 - #44 {
INFO  06:12:53,430 - #49 int
INFO  06:12:53,430 - #49 sum
INFO  06:12:53,430 - #40 (
INFO  06:12:53,430 - #49 int
INFO  06:12:53,430 - #47 .
INFO  06:12:53,430 - #47 .
INFO  06:12:53,430 - #47 .
INFO  06:12:53,430 - #49 var
INFO  06:12:53,430 - #41 )
INFO  06:12:53,430 - #49 int
INFO  06:12:53,431 - #49 i
INFO  06:12:53,431 - #39 ,
INFO  06:12:53,431 - #49 s
INFO  06:12:53,431 - #38 ;
INFO  06:12:53,431 - #44 {
INFO  06:12:53,432 - #49 i
INFO  06:12:53,432 - #27 =
INFO  06:12:53,432 - #49 len
INFO  06:12:53,432 - #40 (
INFO  06:12:53,432 - #49 var
INFO  06:12:53,432 - #41 )
INFO  06:12:53,432 - #23 -
INFO  06:12:53,433 - #52 1
INFO  06:12:53,433 - #38 ;
INFO  06:12:53,433 - #49 s
INFO  06:12:53,433 - #27 =
INFO  06:12:53,433 - #52 0
INFO  06:12:53,433 - #38 ;
INFO  06:12:53,433 - #9 do
INFO  06:12:53,433 - #44 {
INFO  06:12:53,434 - #49 s
INFO  06:12:53,434 - #27 =
INFO  06:12:53,434 - #49 s
INFO  06:12:53,434 - #22 +
INFO  06:12:53,434 - #49 var
INFO  06:12:53,434 - #42 [
INFO  06:12:53,434 - #49 i
INFO  06:12:53,434 - #43 ]
INFO  06:12:53,434 - #38 ;
INFO  06:12:53,434 - #49 i
INFO  06:12:53,434 - #37 --
INFO  06:12:53,434 - #38 ;
INFO  06:12:53,434 - #45 }
INFO  06:12:53,434 - #10 while
INFO  06:12:53,435 - #40 (
INFO  06:12:53,435 - #49 i
INFO  06:12:53,435 - #31 >=
INFO  06:12:53,435 - #52 0
INFO  06:12:53,435 - #41 )
INFO  06:12:53,435 - #38 ;
INFO  06:12:53,436 - #15 return
INFO  06:12:53,436 - #49 s
INFO  06:12:53,436 - #38 ;
INFO  06:12:53,436 - #45 }
INFO  06:12:53,436 - #14 void
INFO  06:12:53,436 - #49 main
INFO  06:12:53,436 - #40 (
INFO  06:12:53,436 - #41 )
INFO  06:12:53,436 - #44 {
INFO  06:12:53,436 - #12 print
INFO  06:12:53,436 - #40 (
INFO  06:12:53,436 - #49 sum
INFO  06:12:53,436 - #40 (
INFO  06:12:53,436 - #52 1
INFO  06:12:53,437 - #39 ,
INFO  06:12:53,437 - #52 2
INFO  06:12:53,437 - #39 ,
INFO  06:12:53,437 - #52 3
INFO  06:12:53,437 - #39 ,
INFO  06:12:53,437 - #52 4
INFO  06:12:53,437 - #39 ,
INFO  06:12:53,437 - #52 5
INFO  06:12:53,437 - #41 )
INFO  06:12:53,437 - #41 )
INFO  06:12:53,437 - #38 ;
INFO  06:12:53,437 - #12 print
INFO  06:12:53,437 - #40 (
INFO  06:12:53,437 - #49 eol
INFO  06:12:53,437 - #41 )
INFO  06:12:53,438 - #38 ;
INFO  06:12:53,438 - #12 print
INFO  06:12:53,438 - #40 (
INFO  06:12:53,438 - #49 sum
INFO  06:12:53,438 - #40 (
INFO  06:12:53,438 - #52 1
INFO  06:12:53,438 - #39 ,
INFO  06:12:53,438 - #52 2
INFO  06:12:53,438 - #41 )
INFO  06:12:53,438 - #41 )
INFO  06:12:53,438 - #38 ;
INFO  06:12:53,438 - #12 print
INFO  06:12:53,438 - #40 (
INFO  06:12:53,438 - #49 eol
INFO  06:12:53,438 - #41 )
INFO  06:12:53,438 - #38 ;
INFO  06:12:53,438 - #12 print
INFO  06:12:53,438 - #40 (
INFO  06:12:53,438 - #49 sum
INFO  06:12:53,438 - #40 (
INFO  06:12:53,438 - #52 10
INFO  06:12:53,438 - #39 ,
INFO  06:12:53,438 - #52 10
INFO  06:12:53,438 - #39 ,
INFO  06:12:53,438 - #52 10
INFO  06:12:53,438 - #39 ,
INFO  06:12:53,438 - #52 10
INFO  06:12:53,438 - #39 ,
INFO  06:12:53,438 - #52 10
INFO  06:12:53,438 - #39 ,
INFO  06:12:53,439 - #52 10
INFO  06:12:53,439 - #39 ,
INFO  06:12:53,439 - #52 10
INFO  06:12:53,439 - #39 ,
INFO  06:12:53,439 - #52 10
INFO  06:12:53,439 - #39 ,
INFO  06:12:53,439 - #52 10
INFO  06:12:53,439 - #39 ,
INFO  06:12:53,439 - #52 10
INFO  06:12:53,439 - #41 )
INFO  06:12:53,439 - #41 )
INFO  06:12:53,439 - #38 ;
INFO  06:12:53,439 - #45 }
INFO  06:12:53,439 - #45 }
INFO  06:12:53,443 - Line 4: Using local variable name: i
INFO  06:12:53,443 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:53,443 - Line 4: Method Call detected. Method name: len
INFO  06:12:53,443 - Line 5: Using local variable name: s
INFO  06:12:53,443 - Line 7: Using local variable name: s
INFO  06:12:53,443 - Line 7: Using local variable name: s
INFO  06:12:53,443 - Line 7: Using local variable name: i
INFO  06:12:53,443 - Line 7: Access to array element detected. Array name: var
INFO  06:12:53,443 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:12:53,443 - Line 8: Using local variable name: i
INFO  06:12:53,443 - Line 9: Using local variable name: i
INFO  06:12:53,443 - Line 10: Using local variable name: s
INFO  06:12:53,443 - Line 14: Method Call detected. Method name: sum
INFO  06:12:53,443 - Method sum has varArgs with 5 args
INFO  06:12:53,443 - Line 16: Method Call detected. Method name: sum
INFO  06:12:53,444 - Method sum has varArgs with 2 args
INFO  06:12:53,444 - Line 18: Method Call detected. Method name: sum
INFO  06:12:53,444 - Method sum has varArgs with 10 args
INFO  06:12:53,445 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:54:35,910 - Compiling source file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.mj
INFO  06:54:35,929 - #2 program
INFO  06:54:35,929 - #49 MJProgram
INFO  06:54:35,929 - #44 {
INFO  06:54:35,930 - #49 int
INFO  06:54:35,930 - #49 sum
INFO  06:54:35,930 - #40 (
INFO  06:54:35,930 - #49 int
INFO  06:54:35,930 - #47 .
INFO  06:54:35,930 - #47 .
INFO  06:54:35,931 - #47 .
INFO  06:54:35,931 - #49 var
INFO  06:54:35,931 - #41 )
INFO  06:54:35,931 - #49 int
INFO  06:54:35,931 - #49 i
INFO  06:54:35,931 - #39 ,
INFO  06:54:35,932 - #49 s
INFO  06:54:35,932 - #38 ;
INFO  06:54:35,932 - #44 {
INFO  06:54:35,932 - #49 i
INFO  06:54:35,932 - #27 =
INFO  06:54:35,932 - #49 len
INFO  06:54:35,932 - #40 (
INFO  06:54:35,932 - #49 var
INFO  06:54:35,932 - #41 )
INFO  06:54:35,932 - #23 -
INFO  06:54:35,933 - #52 1
INFO  06:54:35,933 - #38 ;
INFO  06:54:35,933 - #49 s
INFO  06:54:35,933 - #27 =
INFO  06:54:35,933 - #52 0
INFO  06:54:35,933 - #38 ;
INFO  06:54:35,933 - #9 do
INFO  06:54:35,934 - #44 {
INFO  06:54:35,934 - #49 s
INFO  06:54:35,934 - #27 =
INFO  06:54:35,934 - #49 s
INFO  06:54:35,934 - #22 +
INFO  06:54:35,934 - #49 var
INFO  06:54:35,934 - #42 [
INFO  06:54:35,934 - #49 i
INFO  06:54:35,934 - #43 ]
INFO  06:54:35,934 - #38 ;
INFO  06:54:35,935 - #49 i
INFO  06:54:35,935 - #37 --
INFO  06:54:35,935 - #38 ;
INFO  06:54:35,935 - #45 }
INFO  06:54:35,935 - #10 while
INFO  06:54:35,935 - #40 (
INFO  06:54:35,935 - #49 i
INFO  06:54:35,935 - #31 >=
INFO  06:54:35,935 - #52 0
INFO  06:54:35,936 - #41 )
INFO  06:54:35,936 - #38 ;
INFO  06:54:35,936 - #15 return
INFO  06:54:35,936 - #49 s
INFO  06:54:35,936 - #38 ;
INFO  06:54:35,936 - #45 }
INFO  06:54:35,936 - #14 void
INFO  06:54:35,936 - #49 main
INFO  06:54:35,937 - #40 (
INFO  06:54:35,937 - #41 )
INFO  06:54:35,937 - #44 {
INFO  06:54:35,937 - #12 print
INFO  06:54:35,937 - #40 (
INFO  06:54:35,937 - #49 sum
INFO  06:54:35,937 - #40 (
INFO  06:54:35,937 - #52 1
INFO  06:54:35,937 - #39 ,
INFO  06:54:35,937 - #52 2
INFO  06:54:35,937 - #39 ,
INFO  06:54:35,937 - #52 3
INFO  06:54:35,937 - #39 ,
INFO  06:54:35,937 - #52 4
INFO  06:54:35,937 - #39 ,
INFO  06:54:35,937 - #52 5
INFO  06:54:35,937 - #41 )
INFO  06:54:35,937 - #41 )
INFO  06:54:35,937 - #38 ;
INFO  06:54:35,938 - #12 print
INFO  06:54:35,938 - #40 (
INFO  06:54:35,938 - #49 eol
INFO  06:54:35,938 - #41 )
INFO  06:54:35,938 - #38 ;
INFO  06:54:35,938 - #12 print
INFO  06:54:35,938 - #40 (
INFO  06:54:35,938 - #49 sum
INFO  06:54:35,938 - #40 (
INFO  06:54:35,938 - #52 1
INFO  06:54:35,938 - #39 ,
INFO  06:54:35,938 - #52 2
INFO  06:54:35,938 - #41 )
INFO  06:54:35,938 - #41 )
INFO  06:54:35,938 - #38 ;
INFO  06:54:35,938 - #12 print
INFO  06:54:35,938 - #40 (
INFO  06:54:35,938 - #49 eol
INFO  06:54:35,938 - #41 )
INFO  06:54:35,938 - #38 ;
INFO  06:54:35,938 - #12 print
INFO  06:54:35,938 - #40 (
INFO  06:54:35,938 - #49 sum
INFO  06:54:35,938 - #40 (
INFO  06:54:35,938 - #52 10
INFO  06:54:35,938 - #39 ,
INFO  06:54:35,938 - #52 10
INFO  06:54:35,938 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #39 ,
INFO  06:54:35,939 - #52 10
INFO  06:54:35,939 - #41 )
INFO  06:54:35,939 - #41 )
INFO  06:54:35,939 - #38 ;
INFO  06:54:35,939 - #45 }
INFO  06:54:35,939 - #45 }
INFO  06:54:35,943 - Line 4: Using local variable name: i
INFO  06:54:35,943 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:54:35,943 - Line 4: Method Call detected. Method name: len
INFO  06:54:35,943 - Line 5: Using local variable name: s
INFO  06:54:35,943 - Line 7: Using local variable name: s
INFO  06:54:35,943 - Line 7: Using local variable name: s
INFO  06:54:35,943 - Line 7: Using local variable name: i
INFO  06:54:35,943 - Line 7: Access to array element detected. Array name: var
INFO  06:54:35,943 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:54:35,943 - Line 8: Using local variable name: i
INFO  06:54:35,944 - Line 9: Using local variable name: i
INFO  06:54:35,944 - Line 10: Using local variable name: s
INFO  06:54:35,944 - Line 14: Method Call detected. Method name: sum
INFO  06:54:35,944 - Method sum has varArgs with 5 args
INFO  06:54:35,944 - Line 16: Method Call detected. Method name: sum
INFO  06:54:35,944 - Method sum has varArgs with 2 args
INFO  06:54:35,944 - Line 18: Method Call detected. Method name: sum
INFO  06:54:35,944 - Method sum has varArgs with 10 args
INFO  06:54:35,946 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:56:42,883 - #2 program
INFO  06:56:42,883 - #49 MJProgram
INFO  06:56:42,883 - #44 {
INFO  06:56:42,883 - #49 int
INFO  06:56:42,883 - #49 sum
INFO  06:56:42,884 - #40 (
INFO  06:56:42,884 - #49 int
INFO  06:56:42,884 - #47 .
INFO  06:56:42,884 - #47 .
INFO  06:56:42,884 - #47 .
INFO  06:56:42,884 - #49 var
INFO  06:56:42,884 - #41 )
INFO  06:56:42,884 - #49 int
INFO  06:56:42,885 - #49 i
INFO  06:56:42,885 - #39 ,
INFO  06:56:42,885 - #49 s
INFO  06:56:42,885 - #38 ;
INFO  06:56:42,885 - #44 {
INFO  06:56:42,885 - #49 i
INFO  06:56:42,886 - #27 =
INFO  06:56:42,886 - #49 len
INFO  06:56:42,886 - #40 (
INFO  06:56:42,886 - #49 var
INFO  06:56:42,886 - #41 )
INFO  06:56:42,886 - #23 -
INFO  06:56:42,886 - #52 1
INFO  06:56:42,887 - #38 ;
INFO  06:56:42,887 - #49 s
INFO  06:56:42,887 - #27 =
INFO  06:56:42,887 - #52 0
INFO  06:56:42,887 - #38 ;
INFO  06:56:42,887 - #9 do
INFO  06:56:42,887 - #44 {
INFO  06:56:42,887 - #49 s
INFO  06:56:42,887 - #27 =
INFO  06:56:42,887 - #49 s
INFO  06:56:42,887 - #22 +
INFO  06:56:42,887 - #49 var
INFO  06:56:42,888 - #42 [
INFO  06:56:42,888 - #49 i
INFO  06:56:42,888 - #43 ]
INFO  06:56:42,888 - #38 ;
INFO  06:56:42,888 - #49 i
INFO  06:56:42,888 - #37 --
INFO  06:56:42,888 - #38 ;
INFO  06:56:42,888 - #45 }
INFO  06:56:42,888 - #10 while
INFO  06:56:42,889 - #40 (
INFO  06:56:42,889 - #49 i
INFO  06:56:42,889 - #31 >=
INFO  06:56:42,889 - #52 0
INFO  06:56:42,889 - #41 )
INFO  06:56:42,890 - #38 ;
INFO  06:56:42,890 - #15 return
INFO  06:56:42,890 - #49 s
INFO  06:56:42,890 - #38 ;
INFO  06:56:42,890 - #45 }
INFO  06:56:42,890 - #14 void
INFO  06:56:42,890 - #49 main
INFO  06:56:42,890 - #40 (
INFO  06:56:42,890 - #41 )
INFO  06:56:42,890 - #44 {
INFO  06:56:42,891 - #12 print
INFO  06:56:42,891 - #40 (
INFO  06:56:42,891 - #49 sum
INFO  06:56:42,891 - #40 (
INFO  06:56:42,891 - #52 1
INFO  06:56:42,891 - #39 ,
INFO  06:56:42,891 - #52 2
INFO  06:56:42,891 - #39 ,
INFO  06:56:42,891 - #52 3
INFO  06:56:42,891 - #39 ,
INFO  06:56:42,891 - #52 4
INFO  06:56:42,891 - #39 ,
INFO  06:56:42,891 - #52 5
INFO  06:56:42,891 - #41 )
INFO  06:56:42,891 - #41 )
INFO  06:56:42,891 - #38 ;
INFO  06:56:42,891 - #12 print
INFO  06:56:42,891 - #40 (
INFO  06:56:42,891 - #49 eol
INFO  06:56:42,891 - #41 )
INFO  06:56:42,891 - #38 ;
INFO  06:56:42,892 - #12 print
INFO  06:56:42,892 - #40 (
INFO  06:56:42,892 - #49 sum
INFO  06:56:42,892 - #40 (
INFO  06:56:42,892 - #52 1
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 2
INFO  06:56:42,892 - #41 )
INFO  06:56:42,892 - #41 )
INFO  06:56:42,892 - #38 ;
INFO  06:56:42,892 - #12 print
INFO  06:56:42,892 - #40 (
INFO  06:56:42,892 - #49 eol
INFO  06:56:42,892 - #41 )
INFO  06:56:42,892 - #38 ;
INFO  06:56:42,892 - #12 print
INFO  06:56:42,892 - #40 (
INFO  06:56:42,892 - #49 sum
INFO  06:56:42,892 - #40 (
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,892 - #52 10
INFO  06:56:42,892 - #39 ,
INFO  06:56:42,893 - #52 10
INFO  06:56:42,893 - #39 ,
INFO  06:56:42,893 - #52 10
INFO  06:56:42,893 - #39 ,
INFO  06:56:42,893 - #52 10
INFO  06:56:42,893 - #41 )
INFO  06:56:42,893 - #41 )
INFO  06:56:42,893 - #38 ;
INFO  06:56:42,893 - #45 }
INFO  06:56:42,893 - #45 }
INFO  06:56:42,897 - Line 4: Using local variable name: i
INFO  06:56:42,897 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:56:42,897 - Line 4: Method Call detected. Method name: len
INFO  06:56:42,897 - Line 5: Using local variable name: s
INFO  06:56:42,897 - Line 7: Using local variable name: s
INFO  06:56:42,897 - Line 7: Using local variable name: s
INFO  06:56:42,897 - Line 7: Using local variable name: i
INFO  06:56:42,897 - Line 7: Access to array element detected. Array name: var
INFO  06:56:42,897 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:56:42,897 - Line 8: Using local variable name: i
INFO  06:56:42,897 - Line 9: Using local variable name: i
INFO  06:56:42,897 - Line 10: Using local variable name: s
INFO  06:56:42,898 - Line 14: Method Call detected. Method name: sum
INFO  06:56:42,898 - Method sum has varArgs with 5 args
INFO  06:56:42,898 - Line 16: Method Call detected. Method name: sum
INFO  06:56:42,898 - Method sum has varArgs with 2 args
INFO  06:56:42,898 - Line 18: Method Call detected. Method name: sum
INFO  06:56:42,898 - Method sum has varArgs with 10 args
INFO  06:56:42,899 - Successful compilation. Resulting file: D:\source\repos\PP_Projekat\MicroJavaCompiler\test\testVarArgs.obj
INFO  06:57:25,325 - #2 program
INFO  06:57:25,325 - #49 MJProgram
INFO  06:57:25,325 - #44 {
INFO  06:57:25,325 - #49 int
INFO  06:57:25,326 - #49 sum
INFO  06:57:25,326 - #40 (
INFO  06:57:25,326 - #49 int
INFO  06:57:25,326 - #47 .
INFO  06:57:25,326 - #47 .
INFO  06:57:25,326 - #47 .
INFO  06:57:25,326 - #49 var
INFO  06:57:25,326 - #41 )
INFO  06:57:25,326 - #49 int
INFO  06:57:25,327 - #49 i
INFO  06:57:25,327 - #39 ,
INFO  06:57:25,327 - #49 s
INFO  06:57:25,327 - #38 ;
INFO  06:57:25,327 - #44 {
INFO  06:57:25,328 - #49 i
INFO  06:57:25,328 - #27 =
INFO  06:57:25,328 - #49 len
INFO  06:57:25,328 - #40 (
INFO  06:57:25,328 - #49 var
INFO  06:57:25,328 - #41 )
INFO  06:57:25,328 - #23 -
INFO  06:57:25,329 - #52 1
INFO  06:57:25,329 - #38 ;
INFO  06:57:25,329 - #49 s
INFO  06:57:25,329 - #27 =
INFO  06:57:25,329 - #52 0
INFO  06:57:25,329 - #38 ;
INFO  06:57:25,329 - #9 do
INFO  06:57:25,329 - #44 {
INFO  06:57:25,330 - #49 s
INFO  06:57:25,330 - #27 =
INFO  06:57:25,330 - #49 s
INFO  06:57:25,330 - #22 +
INFO  06:57:25,330 - #49 var
INFO  06:57:25,330 - #42 [
INFO  06:57:25,330 - #49 i
INFO  06:57:25,330 - #43 ]
INFO  06:57:25,330 - #38 ;
INFO  06:57:25,330 - #49 i
INFO  06:57:25,330 - #37 --
INFO  06:57:25,331 - #38 ;
INFO  06:57:25,331 - #45 }
INFO  06:57:25,331 - #10 while
INFO  06:57:25,331 - #40 (
INFO  06:57:25,331 - #49 i
INFO  06:57:25,331 - #31 >=
INFO  06:57:25,331 - #52 0
INFO  06:57:25,331 - #41 )
INFO  06:57:25,332 - #38 ;
INFO  06:57:25,332 - #15 return
INFO  06:57:25,332 - #49 s
INFO  06:57:25,332 - #38 ;
INFO  06:57:25,332 - #45 }
INFO  06:57:25,332 - #14 void
INFO  06:57:25,332 - #49 main
INFO  06:57:25,332 - #40 (
INFO  06:57:25,332 - #41 )
INFO  06:57:25,332 - #44 {
INFO  06:57:25,332 - #12 print
INFO  06:57:25,332 - #40 (
INFO  06:57:25,333 - #49 sum
INFO  06:57:25,333 - #40 (
INFO  06:57:25,333 - #52 1
INFO  06:57:25,333 - #39 ,
INFO  06:57:25,333 - #52 2
INFO  06:57:25,333 - #39 ,
INFO  06:57:25,333 - #52 3
INFO  06:57:25,333 - #39 ,
INFO  06:57:25,333 - #52 4
INFO  06:57:25,333 - #39 ,
INFO  06:57:25,333 - #52 5
INFO  06:57:25,333 - #41 )
INFO  06:57:25,333 - #41 )
INFO  06:57:25,333 - #38 ;
INFO  06:57:25,333 - #12 print
INFO  06:57:25,333 - #40 (
INFO  06:57:25,333 - #49 eol
INFO  06:57:25,333 - #41 )
INFO  06:57:25,333 - #38 ;
INFO  06:57:25,333 - #12 print
INFO  06:57:25,333 - #40 (
INFO  06:57:25,333 - #49 sum
INFO  06:57:25,333 - #40 (
INFO  06:57:25,333 - #52 1
INFO  06:57:25,333 - #39 ,
INFO  06:57:25,334 - #52 2
INFO  06:57:25,334 - #41 )
INFO  06:57:25,334 - #41 )
INFO  06:57:25,334 - #38 ;
INFO  06:57:25,334 - #12 print
INFO  06:57:25,334 - #40 (
INFO  06:57:25,334 - #49 eol
INFO  06:57:25,334 - #41 )
INFO  06:57:25,334 - #38 ;
INFO  06:57:25,334 - #12 print
INFO  06:57:25,334 - #40 (
INFO  06:57:25,334 - #49 sum
INFO  06:57:25,334 - #40 (
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,334 - #52 10
INFO  06:57:25,334 - #39 ,
INFO  06:57:25,335 - #52 10
INFO  06:57:25,335 - #39 ,
INFO  06:57:25,335 - #52 10
INFO  06:57:25,335 - #41 )
INFO  06:57:25,335 - #41 )
INFO  06:57:25,335 - #38 ;
INFO  06:57:25,335 - #45 }
INFO  06:57:25,335 - #45 }
INFO  06:57:25,339 - Line 4: Using local variable name: i
INFO  06:57:25,339 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:57:25,339 - Line 4: Method Call detected. Method name: len
INFO  06:57:25,339 - Line 5: Using local variable name: s
INFO  06:57:25,340 - Line 7: Using local variable name: s
INFO  06:57:25,340 - Line 7: Using local variable name: s
INFO  06:57:25,340 - Line 7: Using local variable name: i
INFO  06:57:25,340 - Line 7: Access to array element detected. Array name: var
INFO  06:57:25,340 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:57:25,340 - Line 8: Using local variable name: i
INFO  06:57:25,340 - Line 9: Using local variable name: i
INFO  06:57:25,340 - Line 10: Using local variable name: s
INFO  06:57:25,340 - Line 14: Method Call detected. Method name: sum
INFO  06:57:25,340 - Method sum has varArgs with 5 args
INFO  06:57:25,340 - Line 16: Method Call detected. Method name: sum
INFO  06:57:25,340 - Method sum has varArgs with 2 args
INFO  06:57:25,340 - Line 18: Method Call detected. Method name: sum
INFO  06:57:25,340 - Method sum has varArgs with 10 args
INFO  06:58:23,257 - #2 program
INFO  06:58:23,257 - #49 MJProgram
INFO  06:58:23,257 - #44 {
INFO  06:58:23,257 - #49 int
INFO  06:58:23,257 - #49 sum
INFO  06:58:23,258 - #40 (
INFO  06:58:23,258 - #49 int
INFO  06:58:23,258 - #47 .
INFO  06:58:23,258 - #47 .
INFO  06:58:23,258 - #47 .
INFO  06:58:23,258 - #49 var
INFO  06:58:23,258 - #41 )
INFO  06:58:23,258 - #49 int
INFO  06:58:23,259 - #49 i
INFO  06:58:23,259 - #39 ,
INFO  06:58:23,259 - #49 s
INFO  06:58:23,259 - #38 ;
INFO  06:58:23,259 - #44 {
INFO  06:58:23,259 - #49 i
INFO  06:58:23,260 - #27 =
INFO  06:58:23,260 - #49 len
INFO  06:58:23,260 - #40 (
INFO  06:58:23,260 - #49 var
INFO  06:58:23,260 - #41 )
INFO  06:58:23,260 - #23 -
INFO  06:58:23,261 - #52 1
INFO  06:58:23,261 - #38 ;
INFO  06:58:23,261 - #49 s
INFO  06:58:23,261 - #27 =
INFO  06:58:23,261 - #52 0
INFO  06:58:23,261 - #38 ;
INFO  06:58:23,262 - #9 do
INFO  06:58:23,262 - #44 {
INFO  06:58:23,262 - #49 s
INFO  06:58:23,262 - #27 =
INFO  06:58:23,262 - #49 s
INFO  06:58:23,262 - #22 +
INFO  06:58:23,262 - #49 var
INFO  06:58:23,262 - #42 [
INFO  06:58:23,262 - #49 i
INFO  06:58:23,262 - #43 ]
INFO  06:58:23,263 - #38 ;
INFO  06:58:23,263 - #49 i
INFO  06:58:23,263 - #37 --
INFO  06:58:23,263 - #38 ;
INFO  06:58:23,263 - #45 }
INFO  06:58:23,263 - #10 while
INFO  06:58:23,263 - #40 (
INFO  06:58:23,263 - #49 i
INFO  06:58:23,263 - #31 >=
INFO  06:58:23,263 - #52 0
INFO  06:58:23,264 - #41 )
INFO  06:58:23,264 - #38 ;
INFO  06:58:23,264 - #15 return
INFO  06:58:23,264 - #49 s
INFO  06:58:23,264 - #38 ;
INFO  06:58:23,264 - #45 }
INFO  06:58:23,264 - #14 void
INFO  06:58:23,264 - #49 main
INFO  06:58:23,265 - #40 (
INFO  06:58:23,265 - #41 )
INFO  06:58:23,265 - #44 {
INFO  06:58:23,265 - #12 print
INFO  06:58:23,265 - #40 (
INFO  06:58:23,265 - #49 sum
INFO  06:58:23,265 - #40 (
INFO  06:58:23,265 - #52 1
INFO  06:58:23,265 - #39 ,
INFO  06:58:23,265 - #52 2
INFO  06:58:23,265 - #39 ,
INFO  06:58:23,265 - #52 3
INFO  06:58:23,265 - #39 ,
INFO  06:58:23,265 - #52 4
INFO  06:58:23,265 - #39 ,
INFO  06:58:23,265 - #52 5
INFO  06:58:23,265 - #41 )
INFO  06:58:23,265 - #41 )
INFO  06:58:23,266 - #38 ;
INFO  06:58:23,266 - #12 print
INFO  06:58:23,266 - #40 (
INFO  06:58:23,266 - #49 eol
INFO  06:58:23,266 - #41 )
INFO  06:58:23,266 - #38 ;
INFO  06:58:23,266 - #12 print
INFO  06:58:23,266 - #40 (
INFO  06:58:23,266 - #49 sum
INFO  06:58:23,266 - #40 (
INFO  06:58:23,266 - #52 1
INFO  06:58:23,266 - #39 ,
INFO  06:58:23,266 - #52 2
INFO  06:58:23,266 - #41 )
INFO  06:58:23,266 - #41 )
INFO  06:58:23,266 - #38 ;
INFO  06:58:23,266 - #12 print
INFO  06:58:23,266 - #40 (
INFO  06:58:23,266 - #49 eol
INFO  06:58:23,266 - #41 )
INFO  06:58:23,266 - #38 ;
INFO  06:58:23,266 - #12 print
INFO  06:58:23,266 - #40 (
INFO  06:58:23,266 - #49 sum
INFO  06:58:23,266 - #40 (
INFO  06:58:23,266 - #52 10
INFO  06:58:23,266 - #39 ,
INFO  06:58:23,266 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #39 ,
INFO  06:58:23,267 - #52 10
INFO  06:58:23,267 - #41 )
INFO  06:58:23,267 - #41 )
INFO  06:58:23,267 - #38 ;
INFO  06:58:23,267 - #45 }
INFO  06:58:23,267 - #45 }
INFO  06:58:23,271 - Line 4: Using local variable name: i
INFO  06:58:23,271 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:58:23,271 - Line 4: Method Call detected. Method name: len
INFO  06:58:23,271 - Line 5: Using local variable name: s
INFO  06:58:23,272 - Line 7: Using local variable name: s
INFO  06:58:23,272 - Line 7: Using local variable name: s
INFO  06:58:23,272 - Line 7: Using local variable name: i
INFO  06:58:23,272 - Line 7: Access to array element detected. Array name: var
INFO  06:58:23,272 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:58:23,272 - Line 8: Using local variable name: i
INFO  06:58:23,272 - Line 9: Using local variable name: i
INFO  06:58:23,272 - Line 10: Using local variable name: s
INFO  06:58:23,272 - Line 14: Method Call detected. Method name: sum
INFO  06:58:23,272 - Method sum has varArgs with 5 args
INFO  06:58:23,272 - Line 16: Method Call detected. Method name: sum
INFO  06:58:23,272 - Method sum has varArgs with 2 args
INFO  06:58:23,272 - Line 18: Method Call detected. Method name: sum
INFO  06:58:23,272 - Method sum has varArgs with 10 args
INFO  06:58:36,921 - #2 program
INFO  06:58:36,921 - #49 MJProgram
INFO  06:58:36,922 - #44 {
INFO  06:58:36,922 - #49 int
INFO  06:58:36,922 - #49 sum
INFO  06:58:36,922 - #40 (
INFO  06:58:36,922 - #49 int
INFO  06:58:36,923 - #47 .
INFO  06:58:36,923 - #47 .
INFO  06:58:36,923 - #47 .
INFO  06:58:36,923 - #49 var
INFO  06:58:36,923 - #41 )
INFO  06:58:36,923 - #49 int
INFO  06:58:36,923 - #49 i
INFO  06:58:36,923 - #39 ,
INFO  06:58:36,924 - #49 s
INFO  06:58:36,924 - #38 ;
INFO  06:58:36,924 - #44 {
INFO  06:58:36,924 - #49 i
INFO  06:58:36,924 - #27 =
INFO  06:58:36,924 - #49 len
INFO  06:58:36,924 - #40 (
INFO  06:58:36,924 - #49 var
INFO  06:58:36,924 - #41 )
INFO  06:58:36,925 - #23 -
INFO  06:58:36,925 - #52 1
INFO  06:58:36,925 - #38 ;
INFO  06:58:36,925 - #49 s
INFO  06:58:36,926 - #27 =
INFO  06:58:36,926 - #52 0
INFO  06:58:36,926 - #38 ;
INFO  06:58:36,926 - #9 do
INFO  06:58:36,926 - #44 {
INFO  06:58:36,926 - #49 s
INFO  06:58:36,926 - #27 =
INFO  06:58:36,926 - #49 s
INFO  06:58:36,926 - #22 +
INFO  06:58:36,926 - #49 var
INFO  06:58:36,926 - #42 [
INFO  06:58:36,927 - #49 i
INFO  06:58:36,927 - #43 ]
INFO  06:58:36,927 - #38 ;
INFO  06:58:36,927 - #49 i
INFO  06:58:36,927 - #37 --
INFO  06:58:36,927 - #38 ;
INFO  06:58:36,927 - #45 }
INFO  06:58:36,927 - #10 while
INFO  06:58:36,927 - #40 (
INFO  06:58:36,927 - #49 i
INFO  06:58:36,927 - #31 >=
INFO  06:58:36,928 - #52 0
INFO  06:58:36,928 - #41 )
INFO  06:58:36,928 - #38 ;
INFO  06:58:36,928 - #15 return
INFO  06:58:36,928 - #49 s
INFO  06:58:36,928 - #38 ;
INFO  06:58:36,928 - #45 }
INFO  06:58:36,928 - #14 void
INFO  06:58:36,929 - #49 main
INFO  06:58:36,929 - #40 (
INFO  06:58:36,929 - #41 )
INFO  06:58:36,929 - #44 {
INFO  06:58:36,929 - #12 print
INFO  06:58:36,929 - #40 (
INFO  06:58:36,929 - #49 sum
INFO  06:58:36,929 - #40 (
INFO  06:58:36,929 - #52 1
INFO  06:58:36,929 - #39 ,
INFO  06:58:36,929 - #52 2
INFO  06:58:36,929 - #39 ,
INFO  06:58:36,929 - #52 3
INFO  06:58:36,929 - #39 ,
INFO  06:58:36,929 - #52 4
INFO  06:58:36,929 - #39 ,
INFO  06:58:36,929 - #52 5
INFO  06:58:36,929 - #41 )
INFO  06:58:36,929 - #41 )
INFO  06:58:36,930 - #38 ;
INFO  06:58:36,930 - #12 print
INFO  06:58:36,930 - #40 (
INFO  06:58:36,930 - #49 eol
INFO  06:58:36,930 - #41 )
INFO  06:58:36,930 - #38 ;
INFO  06:58:36,930 - #12 print
INFO  06:58:36,930 - #40 (
INFO  06:58:36,930 - #49 sum
INFO  06:58:36,930 - #40 (
INFO  06:58:36,930 - #52 1
INFO  06:58:36,930 - #39 ,
INFO  06:58:36,930 - #52 2
INFO  06:58:36,930 - #41 )
INFO  06:58:36,930 - #41 )
INFO  06:58:36,930 - #38 ;
INFO  06:58:36,930 - #12 print
INFO  06:58:36,930 - #40 (
INFO  06:58:36,930 - #49 eol
INFO  06:58:36,930 - #41 )
INFO  06:58:36,930 - #38 ;
INFO  06:58:36,930 - #12 print
INFO  06:58:36,930 - #40 (
INFO  06:58:36,930 - #49 sum
INFO  06:58:36,930 - #40 (
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #39 ,
INFO  06:58:36,931 - #52 10
INFO  06:58:36,931 - #41 )
INFO  06:58:36,931 - #41 )
INFO  06:58:36,931 - #38 ;
INFO  06:58:36,931 - #45 }
INFO  06:58:36,931 - #45 }
INFO  06:58:36,935 - Line 4: Using local variable name: i
INFO  06:58:36,935 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:58:36,935 - Line 4: Method Call detected. Method name: len
INFO  06:58:36,935 - Line 5: Using local variable name: s
INFO  06:58:36,935 - Line 7: Using local variable name: s
INFO  06:58:36,935 - Line 7: Using local variable name: s
INFO  06:58:36,935 - Line 7: Using local variable name: i
INFO  06:58:36,935 - Line 7: Access to array element detected. Array name: var
INFO  06:58:36,935 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  06:58:36,935 - Line 8: Using local variable name: i
INFO  06:58:36,936 - Line 9: Using local variable name: i
INFO  06:58:36,936 - Line 10: Using local variable name: s
INFO  06:58:36,936 - Line 14: Method Call detected. Method name: sum
INFO  06:58:36,936 - Method sum has varArgs with 5 args
INFO  06:58:36,936 - Line 16: Method Call detected. Method name: sum
INFO  06:58:36,936 - Method sum has varArgs with 2 args
INFO  06:58:36,936 - Line 18: Method Call detected. Method name: sum
INFO  06:58:36,936 - Method sum has varArgs with 10 args
INFO  07:00:45,214 - #2 program
INFO  07:00:45,214 - #49 MJProgram
INFO  07:00:45,214 - #44 {
INFO  07:00:45,215 - #49 int
INFO  07:00:45,215 - #49 sum
INFO  07:00:45,215 - #40 (
INFO  07:00:45,215 - #49 int
INFO  07:00:45,215 - #47 .
INFO  07:00:45,215 - #47 .
INFO  07:00:45,216 - #47 .
INFO  07:00:45,216 - #49 var
INFO  07:00:45,216 - #41 )
INFO  07:00:45,216 - #49 int
INFO  07:00:45,216 - #49 i
INFO  07:00:45,216 - #39 ,
INFO  07:00:45,217 - #49 s
INFO  07:00:45,217 - #38 ;
INFO  07:00:45,217 - #44 {
INFO  07:00:45,217 - #49 i
INFO  07:00:45,217 - #27 =
INFO  07:00:45,217 - #49 len
INFO  07:00:45,218 - #40 (
INFO  07:00:45,218 - #49 var
INFO  07:00:45,218 - #41 )
INFO  07:00:45,218 - #23 -
INFO  07:00:45,218 - #52 1
INFO  07:00:45,219 - #38 ;
INFO  07:00:45,219 - #49 s
INFO  07:00:45,219 - #27 =
INFO  07:00:45,219 - #52 0
INFO  07:00:45,219 - #38 ;
INFO  07:00:45,219 - #9 do
INFO  07:00:45,219 - #44 {
INFO  07:00:45,219 - #49 s
INFO  07:00:45,219 - #27 =
INFO  07:00:45,219 - #49 s
INFO  07:00:45,219 - #22 +
INFO  07:00:45,219 - #49 var
INFO  07:00:45,220 - #42 [
INFO  07:00:45,220 - #49 i
INFO  07:00:45,220 - #43 ]
INFO  07:00:45,220 - #38 ;
INFO  07:00:45,220 - #49 i
INFO  07:00:45,220 - #37 --
INFO  07:00:45,220 - #38 ;
INFO  07:00:45,220 - #45 }
INFO  07:00:45,220 - #10 while
INFO  07:00:45,221 - #40 (
INFO  07:00:45,221 - #49 i
INFO  07:00:45,221 - #31 >=
INFO  07:00:45,221 - #52 0
INFO  07:00:45,222 - #41 )
INFO  07:00:45,222 - #38 ;
INFO  07:00:45,222 - #15 return
INFO  07:00:45,222 - #49 s
INFO  07:00:45,222 - #38 ;
INFO  07:00:45,223 - #45 }
INFO  07:00:45,223 - #14 void
INFO  07:00:45,223 - #49 main
INFO  07:00:45,223 - #40 (
INFO  07:00:45,223 - #41 )
INFO  07:00:45,223 - #44 {
INFO  07:00:45,223 - #12 print
INFO  07:00:45,223 - #40 (
INFO  07:00:45,223 - #49 sum
INFO  07:00:45,223 - #40 (
INFO  07:00:45,223 - #52 1
INFO  07:00:45,223 - #39 ,
INFO  07:00:45,223 - #52 2
INFO  07:00:45,223 - #39 ,
INFO  07:00:45,224 - #52 3
INFO  07:00:45,224 - #39 ,
INFO  07:00:45,224 - #52 4
INFO  07:00:45,224 - #39 ,
INFO  07:00:45,224 - #52 5
INFO  07:00:45,224 - #41 )
INFO  07:00:45,224 - #41 )
INFO  07:00:45,224 - #38 ;
INFO  07:00:45,224 - #12 print
INFO  07:00:45,224 - #40 (
INFO  07:00:45,224 - #49 eol
INFO  07:00:45,224 - #41 )
INFO  07:00:45,224 - #38 ;
INFO  07:00:45,224 - #12 print
INFO  07:00:45,224 - #40 (
INFO  07:00:45,224 - #49 sum
INFO  07:00:45,224 - #40 (
INFO  07:00:45,224 - #52 1
INFO  07:00:45,224 - #39 ,
INFO  07:00:45,224 - #52 2
INFO  07:00:45,224 - #41 )
INFO  07:00:45,224 - #41 )
INFO  07:00:45,225 - #38 ;
INFO  07:00:45,225 - #12 print
INFO  07:00:45,225 - #40 (
INFO  07:00:45,225 - #49 eol
INFO  07:00:45,225 - #41 )
INFO  07:00:45,225 - #38 ;
INFO  07:00:45,225 - #12 print
INFO  07:00:45,225 - #40 (
INFO  07:00:45,225 - #49 sum
INFO  07:00:45,225 - #40 (
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #39 ,
INFO  07:00:45,225 - #52 10
INFO  07:00:45,225 - #41 )
INFO  07:00:45,225 - #41 )
INFO  07:00:45,225 - #38 ;
INFO  07:00:45,225 - #45 }
INFO  07:00:45,226 - #45 }
INFO  07:00:45,230 - Line 4: Using local variable name: i
INFO  07:00:45,230 - Line 4: Access to formal argument detected. Method name: sum, argument name: var
INFO  07:00:45,230 - Line 4: Method Call detected. Method name: len
INFO  07:00:45,230 - Line 5: Using local variable name: s
INFO  07:00:45,230 - Line 7: Using local variable name: s
INFO  07:00:45,230 - Line 7: Using local variable name: s
INFO  07:00:45,230 - Line 7: Using local variable name: i
INFO  07:00:45,230 - Line 7: Access to array element detected. Array name: var
INFO  07:00:45,230 - Line 7: Access to formal argument detected. Method name: sum, argument name: var
INFO  07:00:45,230 - Line 8: Using local variable name: i
INFO  07:00:45,230 - Line 9: Using local variable name: i
INFO  07:00:45,230 - Line 10: Using local variable name: s
INFO  07:00:45,230 - Line 14: Method Call detected. Method name: sum
INFO  07:00:45,230 - Method sum has varArgs with 5 args
INFO  07:00:45,230 - Line 16: Method Call detected. Method name: sum
INFO  07:00:45,230 - Method sum has varArgs with 2 args
INFO  07:00:45,231 - Line 18: Method Call detected. Method name: sum
INFO  07:00:45,231 - Method sum has varArgs with 10 args
INFO  07:02:03,450 - #2 program
INFO  07:02:03,450 - #49 test301
INFO  07:02:03,450 - #7 const
INFO  07:02:03,450 - #49 int
INFO  07:02:03,450 - #49 nula
INFO  07:02:03,451 - #27 =
INFO  07:02:03,451 - #52 0
INFO  07:02:03,451 - #38 ;
INFO  07:02:03,451 - #7 const
INFO  07:02:03,451 - #49 int
INFO  07:02:03,451 - #49 jedan
INFO  07:02:03,451 - #27 =
INFO  07:02:03,451 - #52 1
INFO  07:02:03,451 - #38 ;
INFO  07:02:03,451 - #7 const
INFO  07:02:03,451 - #49 int
INFO  07:02:03,451 - #49 pet
INFO  07:02:03,451 - #27 =
INFO  07:02:03,452 - #52 5
INFO  07:02:03,452 - #38 ;
INFO  07:02:03,452 - #49 int
INFO  07:02:03,452 - #49 niz
INFO  07:02:03,452 - #42 [
INFO  07:02:03,452 - #43 ]
INFO  07:02:03,452 - #38 ;
INFO  07:02:03,452 - #49 char
INFO  07:02:03,452 - #49 nizch
INFO  07:02:03,452 - #42 [
INFO  07:02:03,452 - #43 ]
INFO  07:02:03,453 - #38 ;
INFO  07:02:03,453 - #44 {
INFO  07:02:03,453 - #14 void
INFO  07:02:03,453 - #49 main
INFO  07:02:03,453 - #40 (
INFO  07:02:03,453 - #41 )
INFO  07:02:03,453 - #49 int
INFO  07:02:03,453 - #49 bodovi
INFO  07:02:03,453 - #38 ;
INFO  07:02:03,454 - #49 bool
INFO  07:02:03,454 - #49 bt
INFO  07:02:03,454 - #38 ;
INFO  07:02:03,454 - #44 {
INFO  07:02:03,454 - #49 bodovi
INFO  07:02:03,454 - #27 =
INFO  07:02:03,454 - #52 0
INFO  07:02:03,454 - #38 ;
INFO  07:02:03,455 - #49 bodovi
INFO  07:02:03,455 - #36 ++
INFO  07:02:03,455 - #38 ;
INFO  07:02:03,455 - #49 bodovi
INFO  07:02:03,455 - #27 =
INFO  07:02:03,455 - #49 bodovi
INFO  07:02:03,455 - #22 +
INFO  07:02:03,455 - #49 jedan
INFO  07:02:03,456 - #38 ;
INFO  07:02:03,456 - #49 bodovi
INFO  07:02:03,456 - #27 =
INFO  07:02:03,456 - #49 bodovi
INFO  07:02:03,456 - #24 *
INFO  07:02:03,456 - #49 pet
INFO  07:02:03,456 - #38 ;
INFO  07:02:03,456 - #49 bodovi
INFO  07:02:03,456 - #37 --
INFO  07:02:03,456 - #38 ;
INFO  07:02:03,456 - #12 print
INFO  07:02:03,456 - #40 (
INFO  07:02:03,456 - #49 bodovi
INFO  07:02:03,456 - #41 )
INFO  07:02:03,457 - #38 ;
INFO  07:02:03,457 - #49 niz
INFO  07:02:03,457 - #27 =
INFO  07:02:03,457 - #11 new
INFO  07:02:03,457 - #49 int
INFO  07:02:03,457 - #42 [
INFO  07:02:03,457 - #52 3
INFO  07:02:03,457 - #43 ]
INFO  07:02:03,457 - #38 ;
INFO  07:02:03,457 - #49 niz
INFO  07:02:03,457 - #42 [
INFO  07:02:03,457 - #49 nula
INFO  07:02:03,457 - #43 ]
INFO  07:02:03,457 - #27 =
INFO  07:02:03,457 - #49 jedan
INFO  07:02:03,457 - #38 ;
INFO  07:02:03,457 - #49 niz
INFO  07:02:03,457 - #42 [
INFO  07:02:03,457 - #52 1
INFO  07:02:03,457 - #43 ]
INFO  07:02:03,457 - #27 =
INFO  07:02:03,457 - #52 2
INFO  07:02:03,457 - #38 ;
INFO  07:02:03,457 - #49 niz
INFO  07:02:03,458 - #42 [
INFO  07:02:03,458 - #49 niz
INFO  07:02:03,458 - #42 [
INFO  07:02:03,458 - #49 jedan
INFO  07:02:03,458 - #43 ]
INFO  07:02:03,458 - #43 ]
INFO  07:02:03,458 - #27 =
INFO  07:02:03,458 - #49 niz
INFO  07:02:03,458 - #42 [
INFO  07:02:03,458 - #49 niz
INFO  07:02:03,458 - #42 [
INFO  07:02:03,458 - #52 0
INFO  07:02:03,458 - #43 ]
INFO  07:02:03,458 - #43 ]
INFO  07:02:03,458 - #24 *
INFO  07:02:03,458 - #52 3
INFO  07:02:03,458 - #38 ;
INFO  07:02:03,458 - #49 bodovi
INFO  07:02:03,458 - #27 =
INFO  07:02:03,458 - #49 niz
INFO  07:02:03,458 - #42 [
INFO  07:02:03,458 - #52 2
INFO  07:02:03,458 - #43 ]
INFO  07:02:03,458 - #25 /
INFO  07:02:03,458 - #49 niz
INFO  07:02:03,459 - #42 [
INFO  07:02:03,459 - #52 0
INFO  07:02:03,459 - #43 ]
INFO  07:02:03,459 - #38 ;
INFO  07:02:03,459 - #12 print
INFO  07:02:03,459 - #40 (
INFO  07:02:03,459 - #49 bodovi
INFO  07:02:03,459 - #41 )
INFO  07:02:03,459 - #38 ;
INFO  07:02:03,459 - #12 print
INFO  07:02:03,459 - #40 (
INFO  07:02:03,459 - #49 niz
INFO  07:02:03,459 - #42 [
INFO  07:02:03,459 - #52 2
INFO  07:02:03,459 - #43 ]
INFO  07:02:03,459 - #41 )
INFO  07:02:03,459 - #38 ;
INFO  07:02:03,459 - #49 nizch
INFO  07:02:03,459 - #27 =
INFO  07:02:03,459 - #11 new
INFO  07:02:03,459 - #49 char
INFO  07:02:03,459 - #42 [
INFO  07:02:03,459 - #52 3
INFO  07:02:03,459 - #43 ]
INFO  07:02:03,459 - #38 ;
INFO  07:02:03,459 - #49 nizch
INFO  07:02:03,460 - #42 [
INFO  07:02:03,460 - #52 0
INFO  07:02:03,460 - #43 ]
INFO  07:02:03,460 - #27 =
INFO  07:02:03,460 - #51 a
INFO  07:02:03,460 - #38 ;
INFO  07:02:03,460 - #49 nizch
INFO  07:02:03,460 - #42 [
INFO  07:02:03,460 - #49 jedan
INFO  07:02:03,460 - #43 ]
INFO  07:02:03,460 - #27 =
INFO  07:02:03,460 - #51 b
INFO  07:02:03,460 - #38 ;
INFO  07:02:03,460 - #49 nizch
INFO  07:02:03,460 - #42 [
INFO  07:02:03,460 - #49 pet
INFO  07:02:03,460 - #23 -
INFO  07:02:03,460 - #52 3
INFO  07:02:03,460 - #43 ]
INFO  07:02:03,460 - #27 =
INFO  07:02:03,460 - #51 c
INFO  07:02:03,460 - #38 ;
INFO  07:02:03,460 - #12 print
INFO  07:02:03,460 - #40 (
INFO  07:02:03,460 - #49 nizch
INFO  07:02:03,460 - #42 [
INFO  07:02:03,460 - #52 1
INFO  07:02:03,460 - #43 ]
INFO  07:02:03,461 - #41 )
INFO  07:02:03,461 - #38 ;
INFO  07:02:03,461 - #12 print
INFO  07:02:03,461 - #40 (
INFO  07:02:03,461 - #49 nizch
INFO  07:02:03,461 - #42 [
INFO  07:02:03,461 - #49 jedan
INFO  07:02:03,461 - #24 *
INFO  07:02:03,461 - #52 2
INFO  07:02:03,461 - #43 ]
INFO  07:02:03,461 - #41 )
INFO  07:02:03,461 - #38 ;
INFO  07:02:03,461 - #49 bodovi
INFO  07:02:03,461 - #27 =
INFO  07:02:03,461 - #49 bodovi
INFO  07:02:03,461 - #22 +
INFO  07:02:03,461 - #40 (
INFO  07:02:03,461 - #49 pet
INFO  07:02:03,461 - #24 *
INFO  07:02:03,461 - #49 jedan
INFO  07:02:03,461 - #23 -
INFO  07:02:03,461 - #52 1
INFO  07:02:03,461 - #41 )
INFO  07:02:03,461 - #24 *
INFO  07:02:03,461 - #49 bodovi
INFO  07:02:03,461 - #23 -
INFO  07:02:03,461 - #40 (
INFO  07:02:03,461 - #52 3
INFO  07:02:03,461 - #26 %
INFO  07:02:03,461 - #52 2
INFO  07:02:03,462 - #22 +
INFO  07:02:03,462 - #52 3
INFO  07:02:03,462 - #24 *
INFO  07:02:03,462 - #52 2
INFO  07:02:03,462 - #23 -
INFO  07:02:03,462 - #52 3
INFO  07:02:03,462 - #41 )
INFO  07:02:03,462 - #38 ;
INFO  07:02:03,462 - #12 print
INFO  07:02:03,462 - #40 (
INFO  07:02:03,462 - #49 bodovi
INFO  07:02:03,462 - #41 )
INFO  07:02:03,462 - #38 ;
INFO  07:02:03,462 - #13 read
INFO  07:02:03,462 - #40 (
INFO  07:02:03,462 - #49 bodovi
INFO  07:02:03,462 - #41 )
INFO  07:02:03,462 - #38 ;
INFO  07:02:03,462 - #12 print
INFO  07:02:03,462 - #40 (
INFO  07:02:03,462 - #49 bodovi
INFO  07:02:03,462 - #41 )
INFO  07:02:03,462 - #38 ;
INFO  07:02:03,462 - #45 }
INFO  07:02:03,462 - #45 }
INFO  07:02:03,466 - Line 17: Using local variable name: bodovi
INFO  07:02:03,466 - Line 18: Using local variable name: bodovi
INFO  07:02:03,466 - Line 19: Using local variable name: bodovi
INFO  07:02:03,466 - Line 19: Using local variable name: bodovi
INFO  07:02:03,466 - Line 20: Using local variable name: bodovi
INFO  07:02:03,466 - Line 20: Using local variable name: bodovi
INFO  07:02:03,466 - Line 21: Using local variable name: bodovi
INFO  07:02:03,466 - Line 22: Using local variable name: bodovi
INFO  07:02:03,466 - Line 25: Using global variable name: niz
INFO  07:02:03,466 - Line 26: Using global variable name: niz
INFO  07:02:03,466 - Line 26: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 27: Using global variable name: niz
INFO  07:02:03,466 - Line 27: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 28: Using global variable name: niz
INFO  07:02:03,466 - Line 28: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 28: Using global variable name: niz
INFO  07:02:03,466 - Line 28: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 28: Using global variable name: niz
INFO  07:02:03,466 - Line 28: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 28: Using global variable name: niz
INFO  07:02:03,466 - Line 28: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 29: Using local variable name: bodovi
INFO  07:02:03,466 - Line 29: Using global variable name: niz
INFO  07:02:03,466 - Line 29: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 29: Using global variable name: niz
INFO  07:02:03,466 - Line 29: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 30: Using local variable name: bodovi
INFO  07:02:03,466 - Line 31: Using global variable name: niz
INFO  07:02:03,466 - Line 31: Access to array element detected. Array name: niz
INFO  07:02:03,466 - Line 34: Using global variable name: nizch
INFO  07:02:03,466 - Line 35: Using global variable name: nizch
INFO  07:02:03,466 - Line 35: Access to array element detected. Array name: nizch
INFO  07:02:03,467 - Line 36: Using global variable name: nizch
INFO  07:02:03,467 - Line 36: Access to array element detected. Array name: nizch
INFO  07:02:03,467 - Line 37: Using global variable name: nizch
INFO  07:02:03,467 - Line 37: Access to array element detected. Array name: nizch
INFO  07:02:03,467 - Line 38: Using global variable name: nizch
INFO  07:02:03,467 - Line 38: Access to array element detected. Array name: nizch
INFO  07:02:03,467 - Line 39: Using global variable name: nizch
INFO  07:02:03,467 - Line 39: Access to array element detected. Array name: nizch
INFO  07:02:03,467 - Line 42: Using local variable name: bodovi
INFO  07:02:03,467 - Line 42: Using local variable name: bodovi
INFO  07:02:03,467 - Line 42: Using local variable name: bodovi
INFO  07:02:03,467 - Line 43: Using local variable name: bodovi
INFO  07:02:03,467 - Line 45: Using local variable name: bodovi
INFO  07:02:03,467 - Line 46: Using local variable name: bodovi
INFO  07:02:17,762 - #2 program
INFO  07:02:17,763 - #49 test302
INFO  07:02:17,763 - #7 const
INFO  07:02:17,763 - #49 int
INFO  07:02:17,763 - #49 jedan
INFO  07:02:17,763 - #27 =
INFO  07:02:17,763 - #52 1
INFO  07:02:17,763 - #38 ;
INFO  07:02:17,764 - #49 int
INFO  07:02:17,764 - #49 i
INFO  07:02:17,764 - #38 ;
INFO  07:02:17,764 - #49 bool
INFO  07:02:17,764 - #49 ibool
INFO  07:02:17,764 - #38 ;
INFO  07:02:17,764 - #49 int
INFO  07:02:17,765 - #49 niz2
INFO  07:02:17,765 - #38 ;
INFO  07:02:17,765 - #49 int
INFO  07:02:17,765 - #49 niz
INFO  07:02:17,765 - #42 [
INFO  07:02:17,765 - #43 ]
INFO  07:02:17,765 - #38 ;
INFO  07:02:17,765 - #49 int
INFO  07:02:17,765 - #49 a
INFO  07:02:17,765 - #38 ;
INFO  07:02:17,765 - #44 {
INFO  07:02:17,765 - #49 int
INFO  07:02:17,765 - #49 sum
INFO  07:02:17,765 - #40 (
INFO  07:02:17,766 - #49 int
INFO  07:02:17,766 - #49 z
INFO  07:02:17,766 - #39 ,
INFO  07:02:17,766 - #49 int
INFO  07:02:17,766 - #49 d
INFO  07:02:17,766 - #41 )
INFO  07:02:17,766 - #44 {
INFO  07:02:17,766 - #15 return
INFO  07:02:17,766 - #49 z
INFO  07:02:17,767 - #22 +
INFO  07:02:17,767 - #49 d
INFO  07:02:17,767 - #38 ;
INFO  07:02:17,767 - #45 }
INFO  07:02:17,767 - #49 int
INFO  07:02:17,767 - #49 inkrement
INFO  07:02:17,767 - #40 (
INFO  07:02:17,768 - #49 int
INFO  07:02:17,768 - #49 a
INFO  07:02:17,768 - #39 ,
INFO  07:02:17,768 - #49 int
INFO  07:02:17,768 - #49 inc
INFO  07:02:17,768 - #41 )
INFO  07:02:17,768 - #49 int
INFO  07:02:17,768 - #49 pom
INFO  07:02:17,768 - #38 ;
INFO  07:02:17,768 - #44 {
INFO  07:02:17,768 - #5 if
INFO  07:02:17,768 - #40 (
INFO  07:02:17,768 - #49 inc
INFO  07:02:17,769 - #28 ==
INFO  07:02:17,769 - #49 jedan
INFO  07:02:17,769 - #41 )
INFO  07:02:17,769 - #49 pom
INFO  07:02:17,769 - #27 =
INFO  07:02:17,769 - #52 1
INFO  07:02:17,769 - #38 ;
INFO  07:02:17,770 - #6 else
INFO  07:02:17,770 - #5 if
INFO  07:02:17,770 - #40 (
INFO  07:02:17,770 - #49 inc
INFO  07:02:17,770 - #28 ==
INFO  07:02:17,770 - #52 2
INFO  07:02:17,770 - #41 )
INFO  07:02:17,770 - #49 pom
INFO  07:02:17,770 - #27 =
INFO  07:02:17,770 - #49 a
INFO  07:02:17,770 - #38 ;
INFO  07:02:17,770 - #15 return
INFO  07:02:17,770 - #49 sum
INFO  07:02:17,770 - #40 (
INFO  07:02:17,770 - #49 a
INFO  07:02:17,770 - #39 ,
INFO  07:02:17,770 - #49 pom
INFO  07:02:17,770 - #41 )
INFO  07:02:17,771 - #38 ;
INFO  07:02:17,771 - #45 }
INFO  07:02:17,771 - #49 bool
INFO  07:02:17,771 - #49 verify
INFO  07:02:17,771 - #40 (
INFO  07:02:17,771 - #41 )
INFO  07:02:17,771 - #44 {
INFO  07:02:17,771 - #12 print
INFO  07:02:17,771 - #40 (
INFO  07:02:17,771 - #51 v
INFO  07:02:17,771 - #41 )
INFO  07:02:17,771 - #38 ;
INFO  07:02:17,771 - #15 return
INFO  07:02:17,772 - #50 false
INFO  07:02:17,772 - #38 ;
INFO  07:02:17,772 - #45 }
INFO  07:02:17,772 - #14 void
INFO  07:02:17,772 - #49 main
INFO  07:02:17,772 - #40 (
INFO  07:02:17,772 - #41 )
INFO  07:02:17,772 - #44 {
INFO  07:02:17,772 - #5 if
INFO  07:02:17,772 - #40 (
INFO  07:02:17,772 - #52 1
INFO  07:02:17,772 - #29 !=
INFO  07:02:17,772 - #52 1
INFO  07:02:17,772 - #41 )
INFO  07:02:17,772 - #12 print
INFO  07:02:17,772 - #40 (
INFO  07:02:17,772 - #23 -
INFO  07:02:17,772 - #52 6
INFO  07:02:17,772 - #41 )
INFO  07:02:17,773 - #38 ;
INFO  07:02:17,773 - #6 else
INFO  07:02:17,773 - #12 print
INFO  07:02:17,773 - #40 (
INFO  07:02:17,773 - #52 0
INFO  07:02:17,773 - #41 )
INFO  07:02:17,773 - #38 ;
INFO  07:02:17,773 - #49 ibool
INFO  07:02:17,773 - #27 =
INFO  07:02:17,773 - #50 false
INFO  07:02:17,773 - #38 ;
INFO  07:02:17,773 - #49 i
INFO  07:02:17,773 - #27 =
INFO  07:02:17,773 - #52 0
INFO  07:02:17,773 - #38 ;
INFO  07:02:17,773 - #9 do
INFO  07:02:17,773 - #44 {
INFO  07:02:17,773 - #5 if
INFO  07:02:17,773 - #40 (
INFO  07:02:17,773 - #49 i
INFO  07:02:17,773 - #28 ==
INFO  07:02:17,774 - #52 2
INFO  07:02:17,774 - #41 )
INFO  07:02:17,774 - #49 ibool
INFO  07:02:17,774 - #27 =
INFO  07:02:17,774 - #50 true
INFO  07:02:17,774 - #38 ;
INFO  07:02:17,774 - #49 i
INFO  07:02:17,774 - #36 ++
INFO  07:02:17,774 - #38 ;
INFO  07:02:17,774 - #45 }
INFO  07:02:17,774 - #10 while
INFO  07:02:17,774 - #40 (
INFO  07:02:17,774 - #49 i
INFO  07:02:17,774 - #32 <
INFO  07:02:17,774 - #52 5
INFO  07:02:17,774 - #41 )
INFO  07:02:17,774 - #38 ;
INFO  07:02:17,775 - #5 if
INFO  07:02:17,775 - #40 (
INFO  07:02:17,775 - #49 ibool
INFO  07:02:17,775 - #41 )
INFO  07:02:17,775 - #5 if
INFO  07:02:17,775 - #40 (
INFO  07:02:17,775 - #49 i
INFO  07:02:17,775 - #28 ==
INFO  07:02:17,775 - #52 5
INFO  07:02:17,775 - #41 )
INFO  07:02:17,775 - #12 print
INFO  07:02:17,775 - #40 (
INFO  07:02:17,775 - #52 1
INFO  07:02:17,775 - #41 )
INFO  07:02:17,775 - #38 ;
INFO  07:02:17,775 - #6 else
INFO  07:02:17,775 - #12 print
INFO  07:02:17,775 - #40 (
INFO  07:02:17,775 - #23 -
INFO  07:02:17,775 - #52 1
INFO  07:02:17,775 - #41 )
INFO  07:02:17,775 - #38 ;
INFO  07:02:17,775 - #49 a
INFO  07:02:17,775 - #27 =
INFO  07:02:17,775 - #52 2
INFO  07:02:17,775 - #38 ;
INFO  07:02:17,775 - #49 niz
INFO  07:02:17,775 - #27 =
INFO  07:02:17,775 - #11 new
INFO  07:02:17,775 - #49 int
INFO  07:02:17,775 - #42 [
INFO  07:02:17,775 - #52 3
INFO  07:02:17,775 - #43 ]
INFO  07:02:17,775 - #38 ;
INFO  07:02:17,775 - #49 niz
INFO  07:02:17,775 - #42 [
INFO  07:02:17,776 - #52 0
INFO  07:02:17,776 - #43 ]
INFO  07:02:17,776 - #27 =
INFO  07:02:17,776 - #52 1
INFO  07:02:17,776 - #24 *
INFO  07:02:17,776 - #49 a
INFO  07:02:17,776 - #38 ;
INFO  07:02:17,776 - #49 niz
INFO  07:02:17,777 - #42 [
INFO  07:02:17,777 - #52 1
INFO  07:02:17,777 - #43 ]
INFO  07:02:17,777 - #27 =
INFO  07:02:17,777 - #52 2
INFO  07:02:17,777 - #24 *
INFO  07:02:17,777 - #49 a
INFO  07:02:17,777 - #38 ;
INFO  07:02:17,777 - #49 niz
INFO  07:02:17,777 - #42 [
INFO  07:02:17,777 - #52 2
INFO  07:02:17,777 - #43 ]
INFO  07:02:17,777 - #27 =
INFO  07:02:17,777 - #49 sum
INFO  07:02:17,777 - #40 (
INFO  07:02:17,777 - #49 niz
INFO  07:02:17,777 - #42 [
INFO  07:02:17,777 - #52 1
INFO  07:02:17,777 - #43 ]
INFO  07:02:17,777 - #39 ,
INFO  07:02:17,777 - #49 niz
INFO  07:02:17,777 - #42 [
INFO  07:02:17,777 - #52 0
INFO  07:02:17,777 - #43 ]
INFO  07:02:17,777 - #41 )
INFO  07:02:17,777 - #24 *
INFO  07:02:17,777 - #49 a
INFO  07:02:17,777 - #22 +
INFO  07:02:17,777 - #52 1
INFO  07:02:17,777 - #38 ;
INFO  07:02:17,777 - #5 if
INFO  07:02:17,777 - #40 (
INFO  07:02:17,777 - #49 verify
INFO  07:02:17,777 - #40 (
INFO  07:02:17,777 - #41 )
INFO  07:02:17,777 - #35 ||
INFO  07:02:17,777 - #49 niz
INFO  07:02:17,777 - #42 [
INFO  07:02:17,777 - #52 2
INFO  07:02:17,777 - #43 ]
INFO  07:02:17,777 - #28 ==
INFO  07:02:17,777 - #52 4
INFO  07:02:17,777 - #41 )
INFO  07:02:17,777 - #12 print
INFO  07:02:17,777 - #40 (
INFO  07:02:17,777 - #49 ord
INFO  07:02:17,777 - #40 (
INFO  07:02:17,777 - #51 A
INFO  07:02:17,777 - #41 )
INFO  07:02:17,778 - #41 )
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #6 else
INFO  07:02:17,778 - #12 print
INFO  07:02:17,778 - #40 (
INFO  07:02:17,778 - #49 ord
INFO  07:02:17,778 - #40 (
INFO  07:02:17,778 - #51 a
INFO  07:02:17,778 - #41 )
INFO  07:02:17,778 - #41 )
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #12 print
INFO  07:02:17,778 - #40 (
INFO  07:02:17,778 - #49 eol
INFO  07:02:17,778 - #41 )
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #49 i
INFO  07:02:17,778 - #27 =
INFO  07:02:17,778 - #52 0
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #9 do
INFO  07:02:17,778 - #44 {
INFO  07:02:17,778 - #5 if
INFO  07:02:17,778 - #40 (
INFO  07:02:17,778 - #49 i
INFO  07:02:17,778 - #28 ==
INFO  07:02:17,778 - #52 3
INFO  07:02:17,778 - #41 )
INFO  07:02:17,778 - #44 {
INFO  07:02:17,778 - #49 i
INFO  07:02:17,778 - #36 ++
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #4 continue
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #45 }
INFO  07:02:17,778 - #5 if
INFO  07:02:17,778 - #40 (
INFO  07:02:17,778 - #49 i
INFO  07:02:17,778 - #28 ==
INFO  07:02:17,778 - #52 4
INFO  07:02:17,778 - #41 )
INFO  07:02:17,778 - #3 break
INFO  07:02:17,778 - #38 ;
INFO  07:02:17,778 - #49 i
INFO  07:02:17,778 - #27 =
INFO  07:02:17,778 - #49 inkrement
INFO  07:02:17,778 - #40 (
INFO  07:02:17,778 - #49 i
INFO  07:02:17,778 - #39 ,
INFO  07:02:17,779 - #52 1
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #45 }
INFO  07:02:17,779 - #10 while
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 i
INFO  07:02:17,779 - #32 <
INFO  07:02:17,779 - #52 10
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #5 if
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 i
INFO  07:02:17,779 - #28 ==
INFO  07:02:17,779 - #52 3
INFO  07:02:17,779 - #34 &&
INFO  07:02:17,779 - #49 verify
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #12 print
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #23 -
INFO  07:02:17,779 - #52 4
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #6 else
INFO  07:02:17,779 - #12 print
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #52 4
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #13 read
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,779 - #52 0
INFO  07:02:17,779 - #43 ]
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #13 read
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,779 - #52 1
INFO  07:02:17,779 - #43 ]
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #13 read
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,779 - #52 2
INFO  07:02:17,779 - #43 ]
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #12 print
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 eol
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #12 print
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 sum
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 sum
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,779 - #52 0
INFO  07:02:17,779 - #43 ]
INFO  07:02:17,779 - #39 ,
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,779 - #52 1
INFO  07:02:17,779 - #43 ]
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #39 ,
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,779 - #52 2
INFO  07:02:17,779 - #43 ]
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #12 print
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 eol
INFO  07:02:17,779 - #41 )
INFO  07:02:17,779 - #38 ;
INFO  07:02:17,779 - #12 print
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 inkrement
INFO  07:02:17,779 - #40 (
INFO  07:02:17,779 - #49 niz
INFO  07:02:17,779 - #42 [
INFO  07:02:17,780 - #52 2
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #39 ,
INFO  07:02:17,780 - #52 2
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #49 a
INFO  07:02:17,780 - #27 =
INFO  07:02:17,780 - #52 3
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #27 =
INFO  07:02:17,780 - #52 0
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #9 do
INFO  07:02:17,780 - #44 {
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #27 =
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #24 *
INFO  07:02:17,780 - #52 2
INFO  07:02:17,780 - #24 *
INFO  07:02:17,780 - #49 a
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #36 ++
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #45 }
INFO  07:02:17,780 - #10 while
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #32 <
INFO  07:02:17,780 - #52 3
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #12 print
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #52 0
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #12 print
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #52 1
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #12 print
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #52 2
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #12 print
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 eol
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #27 =
INFO  07:02:17,780 - #52 0
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #49 niz2
INFO  07:02:17,780 - #27 =
INFO  07:02:17,780 - #52 0
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #9 do
INFO  07:02:17,780 - #44 {
INFO  07:02:17,780 - #49 niz2
INFO  07:02:17,780 - #27 =
INFO  07:02:17,780 - #49 niz2
INFO  07:02:17,780 - #22 +
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #24 *
INFO  07:02:17,780 - #49 niz
INFO  07:02:17,780 - #42 [
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #43 ]
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #36 ++
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #45 }
INFO  07:02:17,780 - #10 while
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 i
INFO  07:02:17,780 - #32 <
INFO  07:02:17,780 - #52 3
INFO  07:02:17,780 - #41 )
INFO  07:02:17,780 - #38 ;
INFO  07:02:17,780 - #12 print
INFO  07:02:17,780 - #40 (
INFO  07:02:17,780 - #49 niz2
INFO  07:02:17,780 - #41 )
INFO  07:02:17,781 - #38 ;
INFO  07:02:17,781 - #12 print
INFO  07:02:17,781 - #40 (
INFO  07:02:17,781 - #49 eol
INFO  07:02:17,781 - #41 )
INFO  07:02:17,781 - #38 ;
INFO  07:02:17,781 - #45 }
INFO  07:02:17,781 - #45 }
INFO  07:02:17,785 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:02:17,785 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:02:17,785 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:02:17,785 - Line 25: Using local variable name: pom
INFO  07:02:17,785 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:02:17,785 - Line 26: Using local variable name: pom
INFO  07:02:17,785 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:02:17,785 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:02:17,785 - Line 28: Using local variable name: pom
INFO  07:02:17,785 - Line 28: Method Call detected. Method name: sum
INFO  07:02:17,785 - Line 41: Using global variable name: ibool
INFO  07:02:17,785 - Line 42: Using global variable name: i
INFO  07:02:17,785 - Line 44: Using global variable name: i
INFO  07:02:17,785 - Line 44: Using global variable name: ibool
INFO  07:02:17,785 - Line 45: Using global variable name: i
INFO  07:02:17,785 - Line 46: Using global variable name: i
INFO  07:02:17,785 - Line 48: Using global variable name: ibool
INFO  07:02:17,785 - Line 49: Using global variable name: i
INFO  07:02:17,785 - Line 51: Using global variable name: a
INFO  07:02:17,785 - Line 52: Using global variable name: niz
INFO  07:02:17,785 - Line 53: Using global variable name: niz
INFO  07:02:17,785 - Line 53: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 53: Using global variable name: a
INFO  07:02:17,785 - Line 54: Using global variable name: niz
INFO  07:02:17,785 - Line 54: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 54: Using global variable name: a
INFO  07:02:17,785 - Line 55: Using global variable name: niz
INFO  07:02:17,785 - Line 55: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 55: Using global variable name: niz
INFO  07:02:17,785 - Line 55: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 55: Using global variable name: niz
INFO  07:02:17,785 - Line 55: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 55: Method Call detected. Method name: sum
INFO  07:02:17,785 - Line 55: Using global variable name: a
INFO  07:02:17,785 - Line 56: Method Call detected. Method name: verify
INFO  07:02:17,785 - Line 56: Using global variable name: niz
INFO  07:02:17,785 - Line 56: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 56: Method Call detected. Method name: ord
INFO  07:02:17,785 - Line 57: Method Call detected. Method name: ord
INFO  07:02:17,785 - Line 60: Using global variable name: i
INFO  07:02:17,785 - Line 62: Using global variable name: i
INFO  07:02:17,785 - Line 64: Using global variable name: i
INFO  07:02:17,785 - Line 67: Using global variable name: i
INFO  07:02:17,785 - Line 68: Using global variable name: i
INFO  07:02:17,785 - Line 68: Using global variable name: i
INFO  07:02:17,785 - Line 68: Method Call detected. Method name: inkrement
INFO  07:02:17,785 - Line 69: Using global variable name: i
INFO  07:02:17,785 - Line 71: Using global variable name: i
INFO  07:02:17,785 - Line 71: Method Call detected. Method name: verify
INFO  07:02:17,785 - Line 74: Using global variable name: niz
INFO  07:02:17,785 - Line 74: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 75: Using global variable name: niz
INFO  07:02:17,785 - Line 75: Access to array element detected. Array name: niz
INFO  07:02:17,785 - Line 76: Using global variable name: niz
INFO  07:02:17,785 - Line 76: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 79: Using global variable name: niz
INFO  07:02:17,786 - Line 79: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 79: Using global variable name: niz
INFO  07:02:17,786 - Line 79: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 79: Method Call detected. Method name: sum
INFO  07:02:17,786 - Line 79: Using global variable name: niz
INFO  07:02:17,786 - Line 79: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 79: Method Call detected. Method name: sum
INFO  07:02:17,786 - Line 82: Using global variable name: niz
INFO  07:02:17,786 - Line 82: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 82: Method Call detected. Method name: inkrement
INFO  07:02:17,786 - Line 84: Using global variable name: a
INFO  07:02:17,786 - Line 85: Using global variable name: i
INFO  07:02:17,786 - Line 87: Using global variable name: i
INFO  07:02:17,786 - Line 87: Using global variable name: niz
INFO  07:02:17,786 - Line 87: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 87: Using global variable name: i
INFO  07:02:17,786 - Line 87: Using global variable name: niz
INFO  07:02:17,786 - Line 87: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 87: Using global variable name: a
INFO  07:02:17,786 - Line 88: Using global variable name: i
INFO  07:02:17,786 - Line 89: Using global variable name: i
INFO  07:02:17,786 - Line 90: Using global variable name: niz
INFO  07:02:17,786 - Line 90: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 91: Using global variable name: niz
INFO  07:02:17,786 - Line 91: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 92: Using global variable name: niz
INFO  07:02:17,786 - Line 92: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 95: Using global variable name: i
INFO  07:02:17,786 - Line 96: Using global variable name: niz2
INFO  07:02:17,786 - Line 98: Using global variable name: niz2
INFO  07:02:17,786 - Line 98: Using global variable name: niz2
INFO  07:02:17,786 - Line 98: Using global variable name: i
INFO  07:02:17,786 - Line 98: Using global variable name: niz
INFO  07:02:17,786 - Line 98: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 98: Using global variable name: i
INFO  07:02:17,786 - Line 98: Using global variable name: niz
INFO  07:02:17,786 - Line 98: Access to array element detected. Array name: niz
INFO  07:02:17,786 - Line 99: Using global variable name: i
INFO  07:02:17,786 - Line 100: Using global variable name: i
INFO  07:02:17,786 - Line 101: Using global variable name: niz2
INFO  07:02:38,745 - #2 program
INFO  07:02:38,745 - #49 test302
INFO  07:02:38,746 - #7 const
INFO  07:02:38,746 - #49 int
INFO  07:02:38,746 - #49 jedan
INFO  07:02:38,746 - #27 =
INFO  07:02:38,746 - #52 1
INFO  07:02:38,746 - #38 ;
INFO  07:02:38,746 - #49 int
INFO  07:02:38,747 - #49 i
INFO  07:02:38,747 - #38 ;
INFO  07:02:38,747 - #49 bool
INFO  07:02:38,747 - #49 ibool
INFO  07:02:38,747 - #38 ;
INFO  07:02:38,747 - #49 int
INFO  07:02:38,747 - #49 niz2
INFO  07:02:38,747 - #38 ;
INFO  07:02:38,747 - #49 int
INFO  07:02:38,747 - #49 niz
INFO  07:02:38,747 - #42 [
INFO  07:02:38,747 - #43 ]
INFO  07:02:38,748 - #38 ;
INFO  07:02:38,748 - #49 int
INFO  07:02:38,748 - #49 a
INFO  07:02:38,748 - #38 ;
INFO  07:02:38,748 - #44 {
INFO  07:02:38,748 - #49 int
INFO  07:02:38,748 - #49 sum
INFO  07:02:38,748 - #40 (
INFO  07:02:38,748 - #49 int
INFO  07:02:38,748 - #47 .
INFO  07:02:38,748 - #47 .
INFO  07:02:38,748 - #47 .
INFO  07:02:38,748 - #49 args
INFO  07:02:38,748 - #41 )
INFO  07:02:38,749 - #49 int
INFO  07:02:38,749 - #49 z
INFO  07:02:38,749 - #39 ,
INFO  07:02:38,749 - #49 d
INFO  07:02:38,749 - #38 ;
INFO  07:02:38,749 - #44 {
INFO  07:02:38,749 - #49 z
INFO  07:02:38,750 - #27 =
INFO  07:02:38,750 - #49 args
INFO  07:02:38,750 - #42 [
INFO  07:02:38,750 - #52 0
INFO  07:02:38,750 - #43 ]
INFO  07:02:38,750 - #38 ;
INFO  07:02:38,750 - #49 d
INFO  07:02:38,751 - #27 =
INFO  07:02:38,751 - #49 args
INFO  07:02:38,751 - #42 [
INFO  07:02:38,751 - #52 1
INFO  07:02:38,751 - #43 ]
INFO  07:02:38,751 - #38 ;
INFO  07:02:38,751 - #15 return
INFO  07:02:38,751 - #49 z
INFO  07:02:38,751 - #22 +
INFO  07:02:38,751 - #49 d
INFO  07:02:38,751 - #38 ;
INFO  07:02:38,751 - #45 }
INFO  07:02:38,751 - #14 void
INFO  07:02:38,751 - #49 printArgs
INFO  07:02:38,752 - #40 (
INFO  07:02:38,752 - #49 int
INFO  07:02:38,752 - #49 num
INFO  07:02:38,752 - #39 ,
INFO  07:02:38,752 - #49 char
INFO  07:02:38,752 - #47 .
INFO  07:02:38,752 - #47 .
INFO  07:02:38,752 - #47 .
INFO  07:02:38,752 - #49 args
INFO  07:02:38,752 - #41 )
INFO  07:02:38,752 - #49 int
INFO  07:02:38,752 - #49 i
INFO  07:02:38,752 - #38 ;
INFO  07:02:38,752 - #44 {
INFO  07:02:38,752 - #49 i
INFO  07:02:38,752 - #27 =
INFO  07:02:38,752 - #52 0
INFO  07:02:38,752 - #38 ;
INFO  07:02:38,752 - #9 do
INFO  07:02:38,752 - #44 {
INFO  07:02:38,753 - #12 print
INFO  07:02:38,753 - #40 (
INFO  07:02:38,753 - #49 args
INFO  07:02:38,753 - #42 [
INFO  07:02:38,753 - #49 i
INFO  07:02:38,753 - #43 ]
INFO  07:02:38,753 - #41 )
INFO  07:02:38,753 - #38 ;
INFO  07:02:38,753 - #49 i
INFO  07:02:38,753 - #36 ++
INFO  07:02:38,753 - #38 ;
INFO  07:02:38,753 - #45 }
INFO  07:02:38,753 - #10 while
INFO  07:02:38,753 - #40 (
INFO  07:02:38,753 - #49 i
INFO  07:02:38,754 - #32 <
INFO  07:02:38,754 - #49 num
INFO  07:02:38,754 - #41 )
INFO  07:02:38,754 - #38 ;
INFO  07:02:38,754 - #45 }
INFO  07:02:38,754 - #49 int
INFO  07:02:38,754 - #49 inkrement
INFO  07:02:38,754 - #40 (
INFO  07:02:38,754 - #49 int
INFO  07:02:38,754 - #49 a
INFO  07:02:38,754 - #39 ,
INFO  07:02:38,755 - #49 int
INFO  07:02:38,755 - #49 inc
INFO  07:02:38,755 - #41 )
INFO  07:02:38,755 - #49 int
INFO  07:02:38,755 - #49 pom
INFO  07:02:38,755 - #38 ;
INFO  07:02:38,755 - #44 {
INFO  07:02:38,755 - #5 if
INFO  07:02:38,755 - #40 (
INFO  07:02:38,755 - #49 inc
INFO  07:02:38,755 - #28 ==
INFO  07:02:38,755 - #49 jedan
INFO  07:02:38,755 - #41 )
INFO  07:02:38,755 - #49 pom
INFO  07:02:38,755 - #27 =
INFO  07:02:38,755 - #52 1
INFO  07:02:38,756 - #38 ;
INFO  07:02:38,756 - #6 else
INFO  07:02:38,756 - #5 if
INFO  07:02:38,756 - #40 (
INFO  07:02:38,756 - #49 inc
INFO  07:02:38,756 - #28 ==
INFO  07:02:38,756 - #52 2
INFO  07:02:38,756 - #41 )
INFO  07:02:38,756 - #49 pom
INFO  07:02:38,756 - #27 =
INFO  07:02:38,756 - #49 a
INFO  07:02:38,756 - #38 ;
INFO  07:02:38,756 - #15 return
INFO  07:02:38,756 - #49 sum
INFO  07:02:38,756 - #40 (
INFO  07:02:38,756 - #49 a
INFO  07:02:38,756 - #39 ,
INFO  07:02:38,756 - #49 pom
INFO  07:02:38,756 - #41 )
INFO  07:02:38,757 - #38 ;
INFO  07:02:38,757 - #45 }
INFO  07:02:38,757 - #49 bool
INFO  07:02:38,757 - #49 verify
INFO  07:02:38,757 - #40 (
INFO  07:02:38,757 - #41 )
INFO  07:02:38,757 - #44 {
INFO  07:02:38,757 - #12 print
INFO  07:02:38,757 - #40 (
INFO  07:02:38,757 - #51 v
INFO  07:02:38,757 - #41 )
INFO  07:02:38,757 - #38 ;
INFO  07:02:38,757 - #15 return
INFO  07:02:38,757 - #50 false
INFO  07:02:38,757 - #38 ;
INFO  07:02:38,757 - #45 }
INFO  07:02:38,757 - #14 void
INFO  07:02:38,757 - #49 main
INFO  07:02:38,757 - #40 (
INFO  07:02:38,757 - #41 )
INFO  07:02:38,757 - #44 {
INFO  07:02:38,757 - #5 if
INFO  07:02:38,757 - #40 (
INFO  07:02:38,757 - #52 1
INFO  07:02:38,757 - #29 !=
INFO  07:02:38,758 - #52 1
INFO  07:02:38,758 - #41 )
INFO  07:02:38,758 - #12 print
INFO  07:02:38,758 - #40 (
INFO  07:02:38,758 - #23 -
INFO  07:02:38,758 - #52 6
INFO  07:02:38,758 - #41 )
INFO  07:02:38,758 - #38 ;
INFO  07:02:38,758 - #6 else
INFO  07:02:38,758 - #12 print
INFO  07:02:38,758 - #40 (
INFO  07:02:38,758 - #52 0
INFO  07:02:38,758 - #41 )
INFO  07:02:38,758 - #38 ;
INFO  07:02:38,758 - #49 ibool
INFO  07:02:38,758 - #27 =
INFO  07:02:38,758 - #50 false
INFO  07:02:38,758 - #38 ;
INFO  07:02:38,758 - #49 i
INFO  07:02:38,758 - #27 =
INFO  07:02:38,758 - #52 0
INFO  07:02:38,758 - #38 ;
INFO  07:02:38,758 - #9 do
INFO  07:02:38,758 - #44 {
INFO  07:02:38,758 - #5 if
INFO  07:02:38,758 - #40 (
INFO  07:02:38,758 - #49 i
INFO  07:02:38,758 - #28 ==
INFO  07:02:38,758 - #52 2
INFO  07:02:38,758 - #41 )
INFO  07:02:38,758 - #49 ibool
INFO  07:02:38,758 - #27 =
INFO  07:02:38,758 - #50 true
INFO  07:02:38,758 - #38 ;
INFO  07:02:38,758 - #49 i
INFO  07:02:38,759 - #36 ++
INFO  07:02:38,759 - #38 ;
INFO  07:02:38,759 - #45 }
INFO  07:02:38,759 - #10 while
INFO  07:02:38,759 - #40 (
INFO  07:02:38,759 - #49 i
INFO  07:02:38,759 - #32 <
INFO  07:02:38,759 - #52 5
INFO  07:02:38,759 - #41 )
INFO  07:02:38,759 - #38 ;
INFO  07:02:38,759 - #5 if
INFO  07:02:38,759 - #40 (
INFO  07:02:38,759 - #49 ibool
INFO  07:02:38,759 - #41 )
INFO  07:02:38,759 - #5 if
INFO  07:02:38,759 - #40 (
INFO  07:02:38,759 - #49 i
INFO  07:02:38,759 - #28 ==
INFO  07:02:38,759 - #52 5
INFO  07:02:38,759 - #41 )
INFO  07:02:38,759 - #12 print
INFO  07:02:38,759 - #40 (
INFO  07:02:38,759 - #52 1
INFO  07:02:38,759 - #41 )
INFO  07:02:38,759 - #38 ;
INFO  07:02:38,759 - #6 else
INFO  07:02:38,759 - #12 print
INFO  07:02:38,759 - #40 (
INFO  07:02:38,759 - #23 -
INFO  07:02:38,759 - #52 1
INFO  07:02:38,759 - #41 )
INFO  07:02:38,759 - #38 ;
INFO  07:02:38,759 - #49 a
INFO  07:02:38,759 - #27 =
INFO  07:02:38,759 - #52 2
INFO  07:02:38,759 - #38 ;
INFO  07:02:38,759 - #49 niz
INFO  07:02:38,759 - #27 =
INFO  07:02:38,759 - #11 new
INFO  07:02:38,759 - #49 int
INFO  07:02:38,759 - #42 [
INFO  07:02:38,759 - #52 3
INFO  07:02:38,759 - #43 ]
INFO  07:02:38,759 - #38 ;
INFO  07:02:38,759 - #49 niz
INFO  07:02:38,759 - #42 [
INFO  07:02:38,759 - #52 0
INFO  07:02:38,759 - #43 ]
INFO  07:02:38,759 - #27 =
INFO  07:02:38,759 - #52 1
INFO  07:02:38,759 - #24 *
INFO  07:02:38,759 - #49 a
INFO  07:02:38,760 - #38 ;
INFO  07:02:38,760 - #49 niz
INFO  07:02:38,760 - #42 [
INFO  07:02:38,760 - #52 1
INFO  07:02:38,760 - #43 ]
INFO  07:02:38,760 - #27 =
INFO  07:02:38,760 - #52 2
INFO  07:02:38,760 - #24 *
INFO  07:02:38,760 - #49 a
INFO  07:02:38,760 - #38 ;
INFO  07:02:38,760 - #49 niz
INFO  07:02:38,760 - #42 [
INFO  07:02:38,760 - #52 2
INFO  07:02:38,760 - #43 ]
INFO  07:02:38,760 - #27 =
INFO  07:02:38,760 - #49 sum
INFO  07:02:38,760 - #40 (
INFO  07:02:38,760 - #49 niz
INFO  07:02:38,760 - #42 [
INFO  07:02:38,760 - #52 1
INFO  07:02:38,760 - #43 ]
INFO  07:02:38,760 - #39 ,
INFO  07:02:38,760 - #49 niz
INFO  07:02:38,760 - #42 [
INFO  07:02:38,760 - #52 0
INFO  07:02:38,760 - #43 ]
INFO  07:02:38,760 - #41 )
INFO  07:02:38,760 - #24 *
INFO  07:02:38,760 - #49 a
INFO  07:02:38,760 - #22 +
INFO  07:02:38,761 - #52 1
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #5 if
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #49 verify
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #35 ||
INFO  07:02:38,761 - #49 niz
INFO  07:02:38,761 - #42 [
INFO  07:02:38,761 - #52 2
INFO  07:02:38,761 - #43 ]
INFO  07:02:38,761 - #28 ==
INFO  07:02:38,761 - #52 4
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #12 print
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #49 ord
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #51 A
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #6 else
INFO  07:02:38,761 - #12 print
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #49 ord
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #51 a
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #12 print
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #49 eol
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #49 i
INFO  07:02:38,761 - #27 =
INFO  07:02:38,761 - #52 0
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #9 do
INFO  07:02:38,761 - #44 {
INFO  07:02:38,761 - #5 if
INFO  07:02:38,761 - #40 (
INFO  07:02:38,761 - #49 i
INFO  07:02:38,761 - #28 ==
INFO  07:02:38,761 - #52 3
INFO  07:02:38,761 - #41 )
INFO  07:02:38,761 - #44 {
INFO  07:02:38,761 - #49 i
INFO  07:02:38,761 - #36 ++
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #4 continue
INFO  07:02:38,761 - #38 ;
INFO  07:02:38,761 - #45 }
INFO  07:02:38,762 - #5 if
INFO  07:02:38,762 - #40 (
INFO  07:02:38,762 - #49 i
INFO  07:02:38,762 - #28 ==
INFO  07:02:38,762 - #52 4
INFO  07:02:38,762 - #41 )
INFO  07:02:38,762 - #3 break
INFO  07:02:38,762 - #38 ;
INFO  07:02:38,762 - #49 i
INFO  07:02:38,762 - #27 =
INFO  07:02:38,762 - #49 inkrement
INFO  07:02:38,762 - #40 (
INFO  07:02:38,762 - #49 i
INFO  07:02:38,762 - #39 ,
INFO  07:02:38,762 - #52 1
INFO  07:02:38,762 - #41 )
INFO  07:02:38,762 - #38 ;
INFO  07:02:38,762 - #45 }
INFO  07:02:38,762 - #10 while
INFO  07:02:38,762 - #40 (
INFO  07:02:38,762 - #49 i
INFO  07:02:38,762 - #32 <
INFO  07:02:38,762 - #52 10
INFO  07:02:38,762 - #41 )
INFO  07:02:38,762 - #38 ;
INFO  07:02:38,762 - #5 if
INFO  07:02:38,762 - #40 (
INFO  07:02:38,762 - #49 i
INFO  07:02:38,762 - #28 ==
INFO  07:02:38,762 - #52 3
INFO  07:02:38,762 - #34 &&
INFO  07:02:38,762 - #49 verify
INFO  07:02:38,762 - #40 (
INFO  07:02:38,762 - #41 )
INFO  07:02:38,762 - #41 )
INFO  07:02:38,763 - #12 print
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #23 -
INFO  07:02:38,763 - #52 4
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #6 else
INFO  07:02:38,763 - #12 print
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #52 4
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #13 read
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 0
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #13 read
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 1
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #13 read
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 2
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #12 print
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 eol
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #12 print
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 sum
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 sum
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 0
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #39 ,
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 1
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #39 ,
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 2
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #12 print
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 eol
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #12 print
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 inkrement
INFO  07:02:38,763 - #40 (
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #52 2
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #39 ,
INFO  07:02:38,763 - #52 2
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #41 )
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #49 a
INFO  07:02:38,763 - #27 =
INFO  07:02:38,763 - #52 3
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #49 i
INFO  07:02:38,763 - #27 =
INFO  07:02:38,763 - #52 0
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #9 do
INFO  07:02:38,763 - #44 {
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #49 i
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #27 =
INFO  07:02:38,763 - #49 niz
INFO  07:02:38,763 - #42 [
INFO  07:02:38,763 - #49 i
INFO  07:02:38,763 - #43 ]
INFO  07:02:38,763 - #24 *
INFO  07:02:38,763 - #52 2
INFO  07:02:38,763 - #24 *
INFO  07:02:38,763 - #49 a
INFO  07:02:38,763 - #38 ;
INFO  07:02:38,763 - #49 i
INFO  07:02:38,764 - #36 ++
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #45 }
INFO  07:02:38,764 - #10 while
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 i
INFO  07:02:38,764 - #32 <
INFO  07:02:38,764 - #52 3
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #12 print
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 niz
INFO  07:02:38,764 - #42 [
INFO  07:02:38,764 - #52 0
INFO  07:02:38,764 - #43 ]
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #12 print
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 niz
INFO  07:02:38,764 - #42 [
INFO  07:02:38,764 - #52 1
INFO  07:02:38,764 - #43 ]
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #12 print
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 niz
INFO  07:02:38,764 - #42 [
INFO  07:02:38,764 - #52 2
INFO  07:02:38,764 - #43 ]
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #12 print
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 eol
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #49 i
INFO  07:02:38,764 - #27 =
INFO  07:02:38,764 - #52 0
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #49 niz2
INFO  07:02:38,764 - #27 =
INFO  07:02:38,764 - #52 0
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #9 do
INFO  07:02:38,764 - #44 {
INFO  07:02:38,764 - #49 niz2
INFO  07:02:38,764 - #27 =
INFO  07:02:38,764 - #49 niz2
INFO  07:02:38,764 - #22 +
INFO  07:02:38,764 - #49 niz
INFO  07:02:38,764 - #42 [
INFO  07:02:38,764 - #49 i
INFO  07:02:38,764 - #43 ]
INFO  07:02:38,764 - #24 *
INFO  07:02:38,764 - #49 niz
INFO  07:02:38,764 - #42 [
INFO  07:02:38,764 - #49 i
INFO  07:02:38,764 - #43 ]
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #49 i
INFO  07:02:38,764 - #36 ++
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #45 }
INFO  07:02:38,764 - #10 while
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 i
INFO  07:02:38,764 - #32 <
INFO  07:02:38,764 - #52 3
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #12 print
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 niz2
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #12 print
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #49 eol
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #49 printArgs
INFO  07:02:38,764 - #40 (
INFO  07:02:38,764 - #52 5
INFO  07:02:38,764 - #39 ,
INFO  07:02:38,764 - #51 t
INFO  07:02:38,764 - #39 ,
INFO  07:02:38,764 - #51 e
INFO  07:02:38,764 - #39 ,
INFO  07:02:38,764 - #51 s
INFO  07:02:38,764 - #39 ,
INFO  07:02:38,764 - #51 t
INFO  07:02:38,764 - #39 ,
INFO  07:02:38,764 - #51 B
INFO  07:02:38,764 - #41 )
INFO  07:02:38,764 - #38 ;
INFO  07:02:38,764 - #45 }
INFO  07:02:38,764 - #45 }
INFO  07:02:38,768 - Line 20: Using local variable name: z
INFO  07:02:38,769 - Line 20: Access to array element detected. Array name: args
INFO  07:02:38,769 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:02:38,769 - Line 21: Using local variable name: d
INFO  07:02:38,769 - Line 21: Access to array element detected. Array name: args
INFO  07:02:38,769 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:02:38,769 - Line 22: Using local variable name: z
INFO  07:02:38,769 - Line 22: Using local variable name: d
INFO  07:02:38,769 - Line 28: Using local variable name: i
INFO  07:02:38,769 - Line 30: Using local variable name: i
INFO  07:02:38,769 - Line 30: Access to array element detected. Array name: args
INFO  07:02:38,769 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:02:38,769 - Line 31: Using local variable name: i
INFO  07:02:38,769 - Line 32: Using local variable name: i
INFO  07:02:38,769 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:02:38,769 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:02:38,769 - Line 37: Using local variable name: pom
INFO  07:02:38,769 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:02:38,769 - Line 38: Using local variable name: pom
INFO  07:02:38,769 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:02:38,769 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:02:38,769 - Line 40: Using local variable name: pom
INFO  07:02:38,769 - Line 40: Method Call detected. Method name: sum
INFO  07:02:38,769 - Method sum has varArgs with 2 args
INFO  07:02:38,769 - Line 53: Using global variable name: ibool
INFO  07:02:38,769 - Line 54: Using global variable name: i
INFO  07:02:38,769 - Line 56: Using global variable name: i
INFO  07:02:38,769 - Line 56: Using global variable name: ibool
INFO  07:02:38,769 - Line 57: Using global variable name: i
INFO  07:02:38,769 - Line 58: Using global variable name: i
INFO  07:02:38,769 - Line 60: Using global variable name: ibool
INFO  07:02:38,769 - Line 61: Using global variable name: i
INFO  07:02:38,769 - Line 63: Using global variable name: a
INFO  07:02:38,769 - Line 64: Using global variable name: niz
INFO  07:02:38,769 - Line 65: Using global variable name: niz
INFO  07:02:38,769 - Line 65: Access to array element detected. Array name: niz
INFO  07:02:38,769 - Line 65: Using global variable name: a
INFO  07:02:38,769 - Line 66: Using global variable name: niz
INFO  07:02:38,769 - Line 66: Access to array element detected. Array name: niz
INFO  07:02:38,769 - Line 66: Using global variable name: a
INFO  07:02:38,769 - Line 67: Using global variable name: niz
INFO  07:02:38,769 - Line 67: Access to array element detected. Array name: niz
INFO  07:02:38,769 - Line 67: Using global variable name: niz
INFO  07:02:38,769 - Line 67: Access to array element detected. Array name: niz
INFO  07:02:38,769 - Line 67: Using global variable name: niz
INFO  07:02:38,769 - Line 67: Access to array element detected. Array name: niz
INFO  07:02:38,769 - Line 67: Method Call detected. Method name: sum
INFO  07:02:38,769 - Method sum has varArgs with 2 args
INFO  07:02:38,769 - Line 67: Using global variable name: a
INFO  07:02:38,769 - Line 68: Method Call detected. Method name: verify
INFO  07:02:38,769 - Line 68: Using global variable name: niz
INFO  07:02:38,769 - Line 68: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 68: Method Call detected. Method name: ord
INFO  07:02:38,770 - Line 69: Method Call detected. Method name: ord
INFO  07:02:38,770 - Line 72: Using global variable name: i
INFO  07:02:38,770 - Line 74: Using global variable name: i
INFO  07:02:38,770 - Line 76: Using global variable name: i
INFO  07:02:38,770 - Line 79: Using global variable name: i
INFO  07:02:38,770 - Line 80: Using global variable name: i
INFO  07:02:38,770 - Line 80: Using global variable name: i
INFO  07:02:38,770 - Line 80: Method Call detected. Method name: inkrement
INFO  07:02:38,770 - Line 81: Using global variable name: i
INFO  07:02:38,770 - Line 83: Using global variable name: i
INFO  07:02:38,770 - Line 83: Method Call detected. Method name: verify
INFO  07:02:38,770 - Line 86: Using global variable name: niz
INFO  07:02:38,770 - Line 86: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 87: Using global variable name: niz
INFO  07:02:38,770 - Line 87: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 88: Using global variable name: niz
INFO  07:02:38,770 - Line 88: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 91: Using global variable name: niz
INFO  07:02:38,770 - Line 91: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 91: Using global variable name: niz
INFO  07:02:38,770 - Line 91: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 91: Method Call detected. Method name: sum
INFO  07:02:38,770 - Method sum has varArgs with 2 args
INFO  07:02:38,770 - Line 91: Using global variable name: niz
INFO  07:02:38,770 - Line 91: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 91: Method Call detected. Method name: sum
INFO  07:02:38,770 - Method sum has varArgs with 2 args
INFO  07:02:38,770 - Line 94: Using global variable name: niz
INFO  07:02:38,770 - Line 94: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 94: Method Call detected. Method name: inkrement
INFO  07:02:38,770 - Line 96: Using global variable name: a
INFO  07:02:38,770 - Line 97: Using global variable name: i
INFO  07:02:38,770 - Line 99: Using global variable name: i
INFO  07:02:38,770 - Line 99: Using global variable name: niz
INFO  07:02:38,770 - Line 99: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 99: Using global variable name: i
INFO  07:02:38,770 - Line 99: Using global variable name: niz
INFO  07:02:38,770 - Line 99: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 99: Using global variable name: a
INFO  07:02:38,770 - Line 100: Using global variable name: i
INFO  07:02:38,770 - Line 101: Using global variable name: i
INFO  07:02:38,770 - Line 102: Using global variable name: niz
INFO  07:02:38,770 - Line 102: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 103: Using global variable name: niz
INFO  07:02:38,770 - Line 103: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 104: Using global variable name: niz
INFO  07:02:38,770 - Line 104: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 107: Using global variable name: i
INFO  07:02:38,770 - Line 108: Using global variable name: niz2
INFO  07:02:38,770 - Line 110: Using global variable name: niz2
INFO  07:02:38,770 - Line 110: Using global variable name: niz2
INFO  07:02:38,770 - Line 110: Using global variable name: i
INFO  07:02:38,770 - Line 110: Using global variable name: niz
INFO  07:02:38,770 - Line 110: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 110: Using global variable name: i
INFO  07:02:38,770 - Line 110: Using global variable name: niz
INFO  07:02:38,770 - Line 110: Access to array element detected. Array name: niz
INFO  07:02:38,770 - Line 111: Using global variable name: i
INFO  07:02:38,770 - Line 112: Using global variable name: i
INFO  07:02:38,770 - Line 113: Using global variable name: niz2
INFO  07:02:38,770 - Line 115: Method Call detected. Method name: printArgs
INFO  07:02:38,770 - Method printArgs has varArgs with 5 args
INFO  07:07:23,070 - #2 program
INFO  07:07:23,070 - #49 test302
INFO  07:07:23,070 - #7 const
INFO  07:07:23,070 - #49 int
INFO  07:07:23,071 - #49 jedan
INFO  07:07:23,071 - #27 =
INFO  07:07:23,071 - #52 1
INFO  07:07:23,071 - #38 ;
INFO  07:07:23,071 - #49 int
INFO  07:07:23,071 - #49 i
INFO  07:07:23,071 - #38 ;
INFO  07:07:23,072 - #49 bool
INFO  07:07:23,072 - #49 ibool
INFO  07:07:23,072 - #38 ;
INFO  07:07:23,072 - #49 int
INFO  07:07:23,072 - #49 niz2
INFO  07:07:23,072 - #38 ;
INFO  07:07:23,072 - #49 int
INFO  07:07:23,072 - #49 niz
INFO  07:07:23,072 - #42 [
INFO  07:07:23,072 - #43 ]
INFO  07:07:23,072 - #38 ;
INFO  07:07:23,073 - #49 int
INFO  07:07:23,073 - #49 a
INFO  07:07:23,073 - #38 ;
INFO  07:07:23,073 - #44 {
INFO  07:07:23,073 - #49 int
INFO  07:07:23,073 - #49 sum
INFO  07:07:23,073 - #40 (
INFO  07:07:23,073 - #49 int
INFO  07:07:23,073 - #47 .
INFO  07:07:23,073 - #47 .
INFO  07:07:23,073 - #47 .
INFO  07:07:23,073 - #49 args
INFO  07:07:23,073 - #41 )
INFO  07:07:23,074 - #49 int
INFO  07:07:23,074 - #49 z
INFO  07:07:23,074 - #39 ,
INFO  07:07:23,074 - #49 d
INFO  07:07:23,074 - #38 ;
INFO  07:07:23,074 - #44 {
INFO  07:07:23,074 - #49 z
INFO  07:07:23,075 - #27 =
INFO  07:07:23,075 - #49 args
INFO  07:07:23,075 - #42 [
INFO  07:07:23,075 - #52 0
INFO  07:07:23,075 - #43 ]
INFO  07:07:23,075 - #38 ;
INFO  07:07:23,075 - #49 d
INFO  07:07:23,075 - #27 =
INFO  07:07:23,076 - #49 args
INFO  07:07:23,076 - #42 [
INFO  07:07:23,076 - #52 1
INFO  07:07:23,076 - #43 ]
INFO  07:07:23,076 - #38 ;
INFO  07:07:23,076 - #15 return
INFO  07:07:23,076 - #49 z
INFO  07:07:23,076 - #22 +
INFO  07:07:23,076 - #49 d
INFO  07:07:23,076 - #38 ;
INFO  07:07:23,076 - #45 }
INFO  07:07:23,076 - #14 void
INFO  07:07:23,076 - #49 printArgs
INFO  07:07:23,077 - #40 (
INFO  07:07:23,077 - #49 int
INFO  07:07:23,077 - #49 num
INFO  07:07:23,077 - #39 ,
INFO  07:07:23,077 - #49 char
INFO  07:07:23,077 - #47 .
INFO  07:07:23,077 - #47 .
INFO  07:07:23,077 - #47 .
INFO  07:07:23,077 - #49 args
INFO  07:07:23,077 - #41 )
INFO  07:07:23,077 - #49 int
INFO  07:07:23,077 - #49 i
INFO  07:07:23,077 - #38 ;
INFO  07:07:23,077 - #44 {
INFO  07:07:23,077 - #49 i
INFO  07:07:23,077 - #27 =
INFO  07:07:23,077 - #52 0
INFO  07:07:23,077 - #38 ;
INFO  07:07:23,077 - #9 do
INFO  07:07:23,077 - #44 {
INFO  07:07:23,078 - #12 print
INFO  07:07:23,078 - #40 (
INFO  07:07:23,078 - #49 args
INFO  07:07:23,078 - #42 [
INFO  07:07:23,078 - #49 i
INFO  07:07:23,078 - #43 ]
INFO  07:07:23,078 - #41 )
INFO  07:07:23,078 - #38 ;
INFO  07:07:23,078 - #49 i
INFO  07:07:23,078 - #36 ++
INFO  07:07:23,078 - #38 ;
INFO  07:07:23,078 - #45 }
INFO  07:07:23,078 - #10 while
INFO  07:07:23,078 - #40 (
INFO  07:07:23,079 - #49 i
INFO  07:07:23,079 - #32 <
INFO  07:07:23,079 - #49 num
INFO  07:07:23,079 - #41 )
INFO  07:07:23,079 - #38 ;
INFO  07:07:23,079 - #45 }
INFO  07:07:23,080 - #49 int
INFO  07:07:23,080 - #49 inkrement
INFO  07:07:23,080 - #40 (
INFO  07:07:23,080 - #49 int
INFO  07:07:23,080 - #49 a
INFO  07:07:23,080 - #39 ,
INFO  07:07:23,080 - #49 int
INFO  07:07:23,080 - #49 inc
INFO  07:07:23,080 - #41 )
INFO  07:07:23,080 - #49 int
INFO  07:07:23,080 - #49 pom
INFO  07:07:23,080 - #38 ;
INFO  07:07:23,080 - #44 {
INFO  07:07:23,080 - #5 if
INFO  07:07:23,080 - #40 (
INFO  07:07:23,080 - #49 inc
INFO  07:07:23,080 - #28 ==
INFO  07:07:23,080 - #49 jedan
INFO  07:07:23,080 - #41 )
INFO  07:07:23,080 - #49 pom
INFO  07:07:23,081 - #27 =
INFO  07:07:23,081 - #52 1
INFO  07:07:23,081 - #38 ;
INFO  07:07:23,081 - #6 else
INFO  07:07:23,081 - #5 if
INFO  07:07:23,081 - #40 (
INFO  07:07:23,081 - #49 inc
INFO  07:07:23,081 - #28 ==
INFO  07:07:23,081 - #52 2
INFO  07:07:23,081 - #41 )
INFO  07:07:23,081 - #49 pom
INFO  07:07:23,081 - #27 =
INFO  07:07:23,081 - #49 a
INFO  07:07:23,081 - #38 ;
INFO  07:07:23,081 - #15 return
INFO  07:07:23,081 - #49 sum
INFO  07:07:23,081 - #40 (
INFO  07:07:23,081 - #49 a
INFO  07:07:23,082 - #39 ,
INFO  07:07:23,082 - #49 pom
INFO  07:07:23,082 - #41 )
INFO  07:07:23,082 - #38 ;
INFO  07:07:23,082 - #45 }
INFO  07:07:23,082 - #49 bool
INFO  07:07:23,082 - #49 verify
INFO  07:07:23,082 - #40 (
INFO  07:07:23,082 - #41 )
INFO  07:07:23,082 - #44 {
INFO  07:07:23,082 - #12 print
INFO  07:07:23,082 - #40 (
INFO  07:07:23,082 - #51 v
INFO  07:07:23,082 - #41 )
INFO  07:07:23,082 - #38 ;
INFO  07:07:23,082 - #15 return
INFO  07:07:23,082 - #50 false
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #45 }
INFO  07:07:23,083 - #14 void
INFO  07:07:23,083 - #49 main
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #44 {
INFO  07:07:23,083 - #5 if
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #52 1
INFO  07:07:23,083 - #29 !=
INFO  07:07:23,083 - #52 1
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #12 print
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #23 -
INFO  07:07:23,083 - #52 6
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #6 else
INFO  07:07:23,083 - #12 print
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #52 0
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #49 ibool
INFO  07:07:23,083 - #27 =
INFO  07:07:23,083 - #50 false
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #49 i
INFO  07:07:23,083 - #27 =
INFO  07:07:23,083 - #52 0
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #9 do
INFO  07:07:23,083 - #44 {
INFO  07:07:23,083 - #5 if
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #49 i
INFO  07:07:23,083 - #28 ==
INFO  07:07:23,083 - #52 2
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #49 ibool
INFO  07:07:23,083 - #27 =
INFO  07:07:23,083 - #50 true
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #49 i
INFO  07:07:23,083 - #36 ++
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #45 }
INFO  07:07:23,083 - #10 while
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #49 i
INFO  07:07:23,083 - #32 <
INFO  07:07:23,083 - #52 5
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #5 if
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #49 ibool
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #5 if
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #49 i
INFO  07:07:23,083 - #28 ==
INFO  07:07:23,083 - #52 5
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #12 print
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #52 1
INFO  07:07:23,083 - #41 )
INFO  07:07:23,083 - #38 ;
INFO  07:07:23,083 - #6 else
INFO  07:07:23,083 - #12 print
INFO  07:07:23,083 - #40 (
INFO  07:07:23,083 - #23 -
INFO  07:07:23,084 - #52 1
INFO  07:07:23,084 - #41 )
INFO  07:07:23,084 - #38 ;
INFO  07:07:23,084 - #49 a
INFO  07:07:23,084 - #27 =
INFO  07:07:23,084 - #52 2
INFO  07:07:23,084 - #38 ;
INFO  07:07:23,084 - #49 niz
INFO  07:07:23,084 - #27 =
INFO  07:07:23,084 - #11 new
INFO  07:07:23,084 - #49 int
INFO  07:07:23,084 - #42 [
INFO  07:07:23,084 - #52 3
INFO  07:07:23,084 - #43 ]
INFO  07:07:23,084 - #38 ;
INFO  07:07:23,084 - #49 niz
INFO  07:07:23,084 - #42 [
INFO  07:07:23,084 - #52 0
INFO  07:07:23,084 - #43 ]
INFO  07:07:23,084 - #27 =
INFO  07:07:23,084 - #52 1
INFO  07:07:23,084 - #24 *
INFO  07:07:23,084 - #49 a
INFO  07:07:23,084 - #38 ;
INFO  07:07:23,084 - #49 niz
INFO  07:07:23,085 - #42 [
INFO  07:07:23,085 - #52 1
INFO  07:07:23,085 - #43 ]
INFO  07:07:23,085 - #27 =
INFO  07:07:23,085 - #52 2
INFO  07:07:23,085 - #24 *
INFO  07:07:23,085 - #49 a
INFO  07:07:23,085 - #38 ;
INFO  07:07:23,085 - #49 niz
INFO  07:07:23,085 - #42 [
INFO  07:07:23,085 - #52 2
INFO  07:07:23,085 - #43 ]
INFO  07:07:23,085 - #27 =
INFO  07:07:23,085 - #49 sum
INFO  07:07:23,085 - #40 (
INFO  07:07:23,085 - #49 niz
INFO  07:07:23,085 - #42 [
INFO  07:07:23,085 - #52 1
INFO  07:07:23,085 - #43 ]
INFO  07:07:23,085 - #39 ,
INFO  07:07:23,085 - #49 niz
INFO  07:07:23,085 - #42 [
INFO  07:07:23,085 - #52 0
INFO  07:07:23,085 - #43 ]
INFO  07:07:23,085 - #41 )
INFO  07:07:23,085 - #24 *
INFO  07:07:23,085 - #49 a
INFO  07:07:23,085 - #22 +
INFO  07:07:23,085 - #52 1
INFO  07:07:23,085 - #38 ;
INFO  07:07:23,085 - #5 if
INFO  07:07:23,085 - #40 (
INFO  07:07:23,085 - #49 verify
INFO  07:07:23,085 - #40 (
INFO  07:07:23,085 - #41 )
INFO  07:07:23,085 - #35 ||
INFO  07:07:23,085 - #49 niz
INFO  07:07:23,085 - #42 [
INFO  07:07:23,085 - #52 2
INFO  07:07:23,085 - #43 ]
INFO  07:07:23,085 - #28 ==
INFO  07:07:23,085 - #52 4
INFO  07:07:23,085 - #41 )
INFO  07:07:23,085 - #12 print
INFO  07:07:23,085 - #40 (
INFO  07:07:23,085 - #49 ord
INFO  07:07:23,085 - #40 (
INFO  07:07:23,086 - #51 A
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #6 else
INFO  07:07:23,086 - #12 print
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #49 ord
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #51 a
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #12 print
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #49 eol
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #27 =
INFO  07:07:23,086 - #52 0
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #9 do
INFO  07:07:23,086 - #44 {
INFO  07:07:23,086 - #5 if
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #28 ==
INFO  07:07:23,086 - #52 3
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #44 {
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #36 ++
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #4 continue
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #45 }
INFO  07:07:23,086 - #5 if
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #28 ==
INFO  07:07:23,086 - #52 4
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #3 break
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #27 =
INFO  07:07:23,086 - #49 inkrement
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #39 ,
INFO  07:07:23,086 - #52 1
INFO  07:07:23,086 - #41 )
INFO  07:07:23,086 - #38 ;
INFO  07:07:23,086 - #45 }
INFO  07:07:23,086 - #10 while
INFO  07:07:23,086 - #40 (
INFO  07:07:23,086 - #49 i
INFO  07:07:23,086 - #32 <
INFO  07:07:23,087 - #52 10
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #5 if
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 i
INFO  07:07:23,087 - #28 ==
INFO  07:07:23,087 - #52 3
INFO  07:07:23,087 - #34 &&
INFO  07:07:23,087 - #49 verify
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #12 print
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #23 -
INFO  07:07:23,087 - #52 4
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #6 else
INFO  07:07:23,087 - #12 print
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #52 4
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #13 read
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 niz
INFO  07:07:23,087 - #42 [
INFO  07:07:23,087 - #52 0
INFO  07:07:23,087 - #43 ]
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #13 read
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 niz
INFO  07:07:23,087 - #42 [
INFO  07:07:23,087 - #52 1
INFO  07:07:23,087 - #43 ]
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #13 read
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 niz
INFO  07:07:23,087 - #42 [
INFO  07:07:23,087 - #52 2
INFO  07:07:23,087 - #43 ]
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #12 print
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 eol
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,087 - #12 print
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 sum
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 sum
INFO  07:07:23,087 - #40 (
INFO  07:07:23,087 - #49 niz
INFO  07:07:23,087 - #42 [
INFO  07:07:23,087 - #52 0
INFO  07:07:23,087 - #43 ]
INFO  07:07:23,087 - #39 ,
INFO  07:07:23,087 - #49 niz
INFO  07:07:23,087 - #42 [
INFO  07:07:23,087 - #52 1
INFO  07:07:23,087 - #43 ]
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #39 ,
INFO  07:07:23,087 - #49 niz
INFO  07:07:23,087 - #42 [
INFO  07:07:23,087 - #52 2
INFO  07:07:23,087 - #43 ]
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #41 )
INFO  07:07:23,087 - #38 ;
INFO  07:07:23,088 - #12 print
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 eol
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #12 print
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 inkrement
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #52 2
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #39 ,
INFO  07:07:23,088 - #52 2
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #49 a
INFO  07:07:23,088 - #27 =
INFO  07:07:23,088 - #52 3
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #27 =
INFO  07:07:23,088 - #52 0
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #9 do
INFO  07:07:23,088 - #44 {
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #27 =
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #24 *
INFO  07:07:23,088 - #52 2
INFO  07:07:23,088 - #24 *
INFO  07:07:23,088 - #49 a
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #36 ++
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #45 }
INFO  07:07:23,088 - #10 while
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #32 <
INFO  07:07:23,088 - #52 3
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #12 print
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #52 0
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #12 print
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #52 1
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #12 print
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #52 2
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #12 print
INFO  07:07:23,088 - #40 (
INFO  07:07:23,088 - #49 eol
INFO  07:07:23,088 - #41 )
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #27 =
INFO  07:07:23,088 - #52 0
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #49 niz2
INFO  07:07:23,088 - #27 =
INFO  07:07:23,088 - #52 0
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #9 do
INFO  07:07:23,088 - #44 {
INFO  07:07:23,088 - #49 niz2
INFO  07:07:23,088 - #27 =
INFO  07:07:23,088 - #49 niz2
INFO  07:07:23,088 - #22 +
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #24 *
INFO  07:07:23,088 - #49 niz
INFO  07:07:23,088 - #42 [
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #43 ]
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #49 i
INFO  07:07:23,088 - #36 ++
INFO  07:07:23,088 - #38 ;
INFO  07:07:23,088 - #45 }
INFO  07:07:23,089 - #10 while
INFO  07:07:23,089 - #40 (
INFO  07:07:23,089 - #49 i
INFO  07:07:23,089 - #32 <
INFO  07:07:23,089 - #52 3
INFO  07:07:23,089 - #41 )
INFO  07:07:23,089 - #38 ;
INFO  07:07:23,089 - #12 print
INFO  07:07:23,089 - #40 (
INFO  07:07:23,089 - #49 niz2
INFO  07:07:23,089 - #41 )
INFO  07:07:23,089 - #38 ;
INFO  07:07:23,089 - #12 print
INFO  07:07:23,089 - #40 (
INFO  07:07:23,089 - #49 eol
INFO  07:07:23,089 - #41 )
INFO  07:07:23,089 - #38 ;
INFO  07:07:23,089 - #49 printArgs
INFO  07:07:23,089 - #40 (
INFO  07:07:23,089 - #52 5
INFO  07:07:23,089 - #39 ,
INFO  07:07:23,089 - #51 t
INFO  07:07:23,089 - #39 ,
INFO  07:07:23,089 - #51 e
INFO  07:07:23,089 - #39 ,
INFO  07:07:23,089 - #51 s
INFO  07:07:23,089 - #39 ,
INFO  07:07:23,089 - #51 t
INFO  07:07:23,089 - #39 ,
INFO  07:07:23,089 - #51 B
INFO  07:07:23,089 - #41 )
INFO  07:07:23,089 - #38 ;
INFO  07:07:23,089 - #45 }
INFO  07:07:23,089 - #45 }
INFO  07:07:23,093 - Line 20: Using local variable name: z
INFO  07:07:23,093 - Line 20: Access to array element detected. Array name: args
INFO  07:07:23,093 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:07:23,093 - Line 21: Using local variable name: d
INFO  07:07:23,093 - Line 21: Access to array element detected. Array name: args
INFO  07:07:23,093 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:07:23,093 - Line 22: Using local variable name: z
INFO  07:07:23,093 - Line 22: Using local variable name: d
INFO  07:07:23,093 - Line 28: Using local variable name: i
INFO  07:07:23,093 - Line 30: Using local variable name: i
INFO  07:07:23,093 - Line 30: Access to array element detected. Array name: args
INFO  07:07:23,093 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:07:23,093 - Line 31: Using local variable name: i
INFO  07:07:23,093 - Line 32: Using local variable name: i
INFO  07:07:23,093 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:07:23,093 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:07:23,093 - Line 37: Using local variable name: pom
INFO  07:07:23,093 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:07:23,093 - Line 38: Using local variable name: pom
INFO  07:07:23,093 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:07:23,093 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:07:23,093 - Line 40: Using local variable name: pom
INFO  07:07:23,093 - Line 40: Method Call detected. Method name: sum
INFO  07:07:23,093 - Method sum has varArgs with 2 args
INFO  07:07:23,093 - Line 53: Using global variable name: ibool
INFO  07:07:23,093 - Line 54: Using global variable name: i
INFO  07:07:23,093 - Line 56: Using global variable name: i
INFO  07:07:23,093 - Line 56: Using global variable name: ibool
INFO  07:07:23,093 - Line 57: Using global variable name: i
INFO  07:07:23,093 - Line 58: Using global variable name: i
INFO  07:07:23,094 - Line 60: Using global variable name: ibool
INFO  07:07:23,094 - Line 61: Using global variable name: i
INFO  07:07:23,094 - Line 63: Using global variable name: a
INFO  07:07:23,094 - Line 64: Using global variable name: niz
INFO  07:07:23,094 - Line 65: Using global variable name: niz
INFO  07:07:23,094 - Line 65: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 65: Using global variable name: a
INFO  07:07:23,094 - Line 66: Using global variable name: niz
INFO  07:07:23,094 - Line 66: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 66: Using global variable name: a
INFO  07:07:23,094 - Line 67: Using global variable name: niz
INFO  07:07:23,094 - Line 67: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 67: Using global variable name: niz
INFO  07:07:23,094 - Line 67: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 67: Using global variable name: niz
INFO  07:07:23,094 - Line 67: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 67: Method Call detected. Method name: sum
INFO  07:07:23,094 - Method sum has varArgs with 2 args
INFO  07:07:23,094 - Line 67: Using global variable name: a
INFO  07:07:23,094 - Line 68: Method Call detected. Method name: verify
INFO  07:07:23,094 - Line 68: Using global variable name: niz
INFO  07:07:23,094 - Line 68: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 68: Method Call detected. Method name: ord
INFO  07:07:23,094 - Line 69: Method Call detected. Method name: ord
INFO  07:07:23,094 - Line 72: Using global variable name: i
INFO  07:07:23,094 - Line 74: Using global variable name: i
INFO  07:07:23,094 - Line 76: Using global variable name: i
INFO  07:07:23,094 - Line 79: Using global variable name: i
INFO  07:07:23,094 - Line 80: Using global variable name: i
INFO  07:07:23,094 - Line 80: Using global variable name: i
INFO  07:07:23,094 - Line 80: Method Call detected. Method name: inkrement
INFO  07:07:23,094 - Line 81: Using global variable name: i
INFO  07:07:23,094 - Line 83: Using global variable name: i
INFO  07:07:23,094 - Line 83: Method Call detected. Method name: verify
INFO  07:07:23,094 - Line 86: Using global variable name: niz
INFO  07:07:23,094 - Line 86: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 87: Using global variable name: niz
INFO  07:07:23,094 - Line 87: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 88: Using global variable name: niz
INFO  07:07:23,094 - Line 88: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 91: Using global variable name: niz
INFO  07:07:23,094 - Line 91: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 91: Using global variable name: niz
INFO  07:07:23,094 - Line 91: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 91: Method Call detected. Method name: sum
INFO  07:07:23,094 - Method sum has varArgs with 2 args
INFO  07:07:23,094 - Line 91: Using global variable name: niz
INFO  07:07:23,094 - Line 91: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 91: Method Call detected. Method name: sum
INFO  07:07:23,094 - Method sum has varArgs with 2 args
INFO  07:07:23,094 - Line 94: Using global variable name: niz
INFO  07:07:23,094 - Line 94: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 94: Method Call detected. Method name: inkrement
INFO  07:07:23,094 - Line 96: Using global variable name: a
INFO  07:07:23,094 - Line 97: Using global variable name: i
INFO  07:07:23,094 - Line 99: Using global variable name: i
INFO  07:07:23,094 - Line 99: Using global variable name: niz
INFO  07:07:23,094 - Line 99: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 99: Using global variable name: i
INFO  07:07:23,094 - Line 99: Using global variable name: niz
INFO  07:07:23,094 - Line 99: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 99: Using global variable name: a
INFO  07:07:23,094 - Line 100: Using global variable name: i
INFO  07:07:23,094 - Line 101: Using global variable name: i
INFO  07:07:23,094 - Line 102: Using global variable name: niz
INFO  07:07:23,094 - Line 102: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 103: Using global variable name: niz
INFO  07:07:23,094 - Line 103: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 104: Using global variable name: niz
INFO  07:07:23,094 - Line 104: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 107: Using global variable name: i
INFO  07:07:23,094 - Line 108: Using global variable name: niz2
INFO  07:07:23,094 - Line 110: Using global variable name: niz2
INFO  07:07:23,094 - Line 110: Using global variable name: niz2
INFO  07:07:23,094 - Line 110: Using global variable name: i
INFO  07:07:23,094 - Line 110: Using global variable name: niz
INFO  07:07:23,094 - Line 110: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 110: Using global variable name: i
INFO  07:07:23,094 - Line 110: Using global variable name: niz
INFO  07:07:23,094 - Line 110: Access to array element detected. Array name: niz
INFO  07:07:23,094 - Line 111: Using global variable name: i
INFO  07:07:23,094 - Line 112: Using global variable name: i
INFO  07:07:23,094 - Line 113: Using global variable name: niz2
INFO  07:07:23,094 - Line 115: Method Call detected. Method name: printArgs
INFO  07:07:23,094 - Method printArgs has varArgs with 5 args
INFO  07:07:52,634 - #2 program
INFO  07:07:52,634 - #49 test302
INFO  07:07:52,634 - #7 const
INFO  07:07:52,634 - #49 int
INFO  07:07:52,634 - #49 jedan
INFO  07:07:52,634 - #27 =
INFO  07:07:52,634 - #52 1
INFO  07:07:52,634 - #38 ;
INFO  07:07:52,635 - #49 int
INFO  07:07:52,635 - #49 i
INFO  07:07:52,635 - #38 ;
INFO  07:07:52,635 - #49 bool
INFO  07:07:52,635 - #49 ibool
INFO  07:07:52,635 - #38 ;
INFO  07:07:52,635 - #49 int
INFO  07:07:52,636 - #49 niz2
INFO  07:07:52,636 - #38 ;
INFO  07:07:52,636 - #49 int
INFO  07:07:52,636 - #49 niz
INFO  07:07:52,636 - #42 [
INFO  07:07:52,636 - #43 ]
INFO  07:07:52,636 - #38 ;
INFO  07:07:52,636 - #49 int
INFO  07:07:52,636 - #49 a
INFO  07:07:52,636 - #38 ;
INFO  07:07:52,636 - #44 {
INFO  07:07:52,636 - #49 int
INFO  07:07:52,636 - #49 sum
INFO  07:07:52,636 - #40 (
INFO  07:07:52,637 - #49 int
INFO  07:07:52,637 - #47 .
INFO  07:07:52,637 - #47 .
INFO  07:07:52,637 - #47 .
INFO  07:07:52,637 - #49 args
INFO  07:07:52,637 - #41 )
INFO  07:07:52,637 - #49 int
INFO  07:07:52,637 - #49 z
INFO  07:07:52,637 - #39 ,
INFO  07:07:52,637 - #49 d
INFO  07:07:52,638 - #38 ;
INFO  07:07:52,638 - #44 {
INFO  07:07:52,638 - #49 z
INFO  07:07:52,638 - #27 =
INFO  07:07:52,638 - #49 args
INFO  07:07:52,638 - #42 [
INFO  07:07:52,638 - #52 0
INFO  07:07:52,638 - #43 ]
INFO  07:07:52,638 - #38 ;
INFO  07:07:52,639 - #49 d
INFO  07:07:52,639 - #27 =
INFO  07:07:52,639 - #49 args
INFO  07:07:52,639 - #42 [
INFO  07:07:52,639 - #52 1
INFO  07:07:52,639 - #43 ]
INFO  07:07:52,639 - #38 ;
INFO  07:07:52,639 - #15 return
INFO  07:07:52,639 - #49 z
INFO  07:07:52,639 - #22 +
INFO  07:07:52,639 - #49 d
INFO  07:07:52,639 - #38 ;
INFO  07:07:52,639 - #45 }
INFO  07:07:52,639 - #14 void
INFO  07:07:52,640 - #49 printArgs
INFO  07:07:52,640 - #40 (
INFO  07:07:52,640 - #49 int
INFO  07:07:52,640 - #49 num
INFO  07:07:52,640 - #39 ,
INFO  07:07:52,640 - #49 char
INFO  07:07:52,640 - #47 .
INFO  07:07:52,640 - #47 .
INFO  07:07:52,640 - #47 .
INFO  07:07:52,640 - #49 args
INFO  07:07:52,640 - #41 )
INFO  07:07:52,640 - #49 int
INFO  07:07:52,640 - #49 i
INFO  07:07:52,640 - #38 ;
INFO  07:07:52,640 - #44 {
INFO  07:07:52,640 - #49 i
INFO  07:07:52,640 - #27 =
INFO  07:07:52,640 - #52 0
INFO  07:07:52,640 - #38 ;
INFO  07:07:52,641 - #9 do
INFO  07:07:52,641 - #44 {
INFO  07:07:52,641 - #12 print
INFO  07:07:52,641 - #40 (
INFO  07:07:52,641 - #49 args
INFO  07:07:52,641 - #42 [
INFO  07:07:52,641 - #49 i
INFO  07:07:52,641 - #43 ]
INFO  07:07:52,641 - #41 )
INFO  07:07:52,641 - #38 ;
INFO  07:07:52,641 - #49 i
INFO  07:07:52,641 - #36 ++
INFO  07:07:52,641 - #38 ;
INFO  07:07:52,641 - #45 }
INFO  07:07:52,641 - #10 while
INFO  07:07:52,641 - #40 (
INFO  07:07:52,642 - #49 i
INFO  07:07:52,642 - #32 <
INFO  07:07:52,642 - #49 num
INFO  07:07:52,642 - #41 )
INFO  07:07:52,642 - #38 ;
INFO  07:07:52,642 - #45 }
INFO  07:07:52,642 - #49 int
INFO  07:07:52,642 - #49 inkrement
INFO  07:07:52,642 - #40 (
INFO  07:07:52,642 - #49 int
INFO  07:07:52,642 - #49 a
INFO  07:07:52,643 - #39 ,
INFO  07:07:52,643 - #49 int
INFO  07:07:52,643 - #49 inc
INFO  07:07:52,643 - #41 )
INFO  07:07:52,643 - #49 int
INFO  07:07:52,643 - #49 pom
INFO  07:07:52,643 - #38 ;
INFO  07:07:52,643 - #44 {
INFO  07:07:52,643 - #5 if
INFO  07:07:52,643 - #40 (
INFO  07:07:52,643 - #49 inc
INFO  07:07:52,643 - #28 ==
INFO  07:07:52,643 - #49 jedan
INFO  07:07:52,643 - #41 )
INFO  07:07:52,643 - #49 pom
INFO  07:07:52,644 - #27 =
INFO  07:07:52,644 - #52 1
INFO  07:07:52,644 - #38 ;
INFO  07:07:52,644 - #6 else
INFO  07:07:52,644 - #5 if
INFO  07:07:52,644 - #40 (
INFO  07:07:52,644 - #49 inc
INFO  07:07:52,644 - #28 ==
INFO  07:07:52,644 - #52 2
INFO  07:07:52,644 - #41 )
INFO  07:07:52,644 - #49 pom
INFO  07:07:52,644 - #27 =
INFO  07:07:52,644 - #49 a
INFO  07:07:52,644 - #38 ;
INFO  07:07:52,644 - #15 return
INFO  07:07:52,644 - #49 sum
INFO  07:07:52,644 - #40 (
INFO  07:07:52,644 - #49 a
INFO  07:07:52,644 - #39 ,
INFO  07:07:52,645 - #49 pom
INFO  07:07:52,645 - #41 )
INFO  07:07:52,645 - #38 ;
INFO  07:07:52,645 - #45 }
INFO  07:07:52,645 - #49 bool
INFO  07:07:52,645 - #49 verify
INFO  07:07:52,645 - #40 (
INFO  07:07:52,645 - #41 )
INFO  07:07:52,645 - #44 {
INFO  07:07:52,645 - #12 print
INFO  07:07:52,645 - #40 (
INFO  07:07:52,645 - #51 v
INFO  07:07:52,645 - #41 )
INFO  07:07:52,645 - #38 ;
INFO  07:07:52,645 - #15 return
INFO  07:07:52,645 - #50 false
INFO  07:07:52,645 - #38 ;
INFO  07:07:52,645 - #45 }
INFO  07:07:52,645 - #14 void
INFO  07:07:52,645 - #49 main
INFO  07:07:52,646 - #40 (
INFO  07:07:52,646 - #41 )
INFO  07:07:52,646 - #44 {
INFO  07:07:52,646 - #5 if
INFO  07:07:52,646 - #40 (
INFO  07:07:52,646 - #52 1
INFO  07:07:52,646 - #29 !=
INFO  07:07:52,646 - #52 1
INFO  07:07:52,646 - #41 )
INFO  07:07:52,646 - #12 print
INFO  07:07:52,646 - #40 (
INFO  07:07:52,646 - #23 -
INFO  07:07:52,646 - #52 6
INFO  07:07:52,646 - #41 )
INFO  07:07:52,646 - #38 ;
INFO  07:07:52,646 - #6 else
INFO  07:07:52,646 - #12 print
INFO  07:07:52,646 - #40 (
INFO  07:07:52,646 - #52 0
INFO  07:07:52,646 - #41 )
INFO  07:07:52,646 - #38 ;
INFO  07:07:52,646 - #49 ibool
INFO  07:07:52,646 - #27 =
INFO  07:07:52,646 - #50 false
INFO  07:07:52,646 - #38 ;
INFO  07:07:52,646 - #49 i
INFO  07:07:52,646 - #27 =
INFO  07:07:52,646 - #52 0
INFO  07:07:52,646 - #38 ;
INFO  07:07:52,646 - #9 do
INFO  07:07:52,646 - #44 {
INFO  07:07:52,646 - #5 if
INFO  07:07:52,646 - #40 (
INFO  07:07:52,646 - #49 i
INFO  07:07:52,646 - #28 ==
INFO  07:07:52,646 - #52 2
INFO  07:07:52,646 - #41 )
INFO  07:07:52,647 - #49 ibool
INFO  07:07:52,647 - #27 =
INFO  07:07:52,647 - #50 true
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #49 i
INFO  07:07:52,647 - #36 ++
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #45 }
INFO  07:07:52,647 - #10 while
INFO  07:07:52,647 - #40 (
INFO  07:07:52,647 - #49 i
INFO  07:07:52,647 - #32 <
INFO  07:07:52,647 - #52 5
INFO  07:07:52,647 - #41 )
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #5 if
INFO  07:07:52,647 - #40 (
INFO  07:07:52,647 - #49 ibool
INFO  07:07:52,647 - #41 )
INFO  07:07:52,647 - #5 if
INFO  07:07:52,647 - #40 (
INFO  07:07:52,647 - #49 i
INFO  07:07:52,647 - #28 ==
INFO  07:07:52,647 - #52 5
INFO  07:07:52,647 - #41 )
INFO  07:07:52,647 - #12 print
INFO  07:07:52,647 - #40 (
INFO  07:07:52,647 - #52 1
INFO  07:07:52,647 - #41 )
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #6 else
INFO  07:07:52,647 - #12 print
INFO  07:07:52,647 - #40 (
INFO  07:07:52,647 - #23 -
INFO  07:07:52,647 - #52 1
INFO  07:07:52,647 - #41 )
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #49 a
INFO  07:07:52,647 - #27 =
INFO  07:07:52,647 - #52 2
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #49 niz
INFO  07:07:52,647 - #27 =
INFO  07:07:52,647 - #11 new
INFO  07:07:52,647 - #49 int
INFO  07:07:52,647 - #42 [
INFO  07:07:52,647 - #52 3
INFO  07:07:52,647 - #43 ]
INFO  07:07:52,647 - #38 ;
INFO  07:07:52,647 - #49 niz
INFO  07:07:52,648 - #42 [
INFO  07:07:52,648 - #52 0
INFO  07:07:52,648 - #43 ]
INFO  07:07:52,648 - #27 =
INFO  07:07:52,648 - #52 1
INFO  07:07:52,648 - #24 *
INFO  07:07:52,648 - #49 a
INFO  07:07:52,648 - #38 ;
INFO  07:07:52,648 - #49 niz
INFO  07:07:52,648 - #42 [
INFO  07:07:52,648 - #52 1
INFO  07:07:52,648 - #43 ]
INFO  07:07:52,648 - #27 =
INFO  07:07:52,648 - #52 2
INFO  07:07:52,648 - #24 *
INFO  07:07:52,648 - #49 a
INFO  07:07:52,648 - #38 ;
INFO  07:07:52,648 - #49 niz
INFO  07:07:52,648 - #42 [
INFO  07:07:52,648 - #52 2
INFO  07:07:52,648 - #43 ]
INFO  07:07:52,648 - #27 =
INFO  07:07:52,648 - #49 sum
INFO  07:07:52,648 - #40 (
INFO  07:07:52,648 - #49 niz
INFO  07:07:52,648 - #42 [
INFO  07:07:52,648 - #52 1
INFO  07:07:52,648 - #43 ]
INFO  07:07:52,648 - #39 ,
INFO  07:07:52,648 - #49 niz
INFO  07:07:52,648 - #42 [
INFO  07:07:52,648 - #52 0
INFO  07:07:52,648 - #43 ]
INFO  07:07:52,648 - #41 )
INFO  07:07:52,648 - #24 *
INFO  07:07:52,648 - #49 a
INFO  07:07:52,648 - #22 +
INFO  07:07:52,648 - #52 1
INFO  07:07:52,648 - #38 ;
INFO  07:07:52,648 - #5 if
INFO  07:07:52,648 - #40 (
INFO  07:07:52,649 - #49 verify
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #35 ||
INFO  07:07:52,649 - #49 niz
INFO  07:07:52,649 - #42 [
INFO  07:07:52,649 - #52 2
INFO  07:07:52,649 - #43 ]
INFO  07:07:52,649 - #28 ==
INFO  07:07:52,649 - #52 4
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #12 print
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #49 ord
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #51 A
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #38 ;
INFO  07:07:52,649 - #6 else
INFO  07:07:52,649 - #12 print
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #49 ord
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #51 a
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #38 ;
INFO  07:07:52,649 - #12 print
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #49 eol
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #38 ;
INFO  07:07:52,649 - #49 i
INFO  07:07:52,649 - #27 =
INFO  07:07:52,649 - #52 0
INFO  07:07:52,649 - #38 ;
INFO  07:07:52,649 - #9 do
INFO  07:07:52,649 - #44 {
INFO  07:07:52,649 - #5 if
INFO  07:07:52,649 - #40 (
INFO  07:07:52,649 - #49 i
INFO  07:07:52,649 - #28 ==
INFO  07:07:52,649 - #52 3
INFO  07:07:52,649 - #41 )
INFO  07:07:52,649 - #44 {
INFO  07:07:52,649 - #49 i
INFO  07:07:52,649 - #36 ++
INFO  07:07:52,649 - #38 ;
INFO  07:07:52,649 - #4 continue
INFO  07:07:52,649 - #38 ;
INFO  07:07:52,649 - #45 }
INFO  07:07:52,650 - #5 if
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 i
INFO  07:07:52,650 - #28 ==
INFO  07:07:52,650 - #52 4
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #3 break
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #49 i
INFO  07:07:52,650 - #27 =
INFO  07:07:52,650 - #49 inkrement
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 i
INFO  07:07:52,650 - #39 ,
INFO  07:07:52,650 - #52 1
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #45 }
INFO  07:07:52,650 - #10 while
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 i
INFO  07:07:52,650 - #32 <
INFO  07:07:52,650 - #52 10
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #5 if
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 i
INFO  07:07:52,650 - #28 ==
INFO  07:07:52,650 - #52 3
INFO  07:07:52,650 - #34 &&
INFO  07:07:52,650 - #49 verify
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #12 print
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #23 -
INFO  07:07:52,650 - #52 4
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #6 else
INFO  07:07:52,650 - #12 print
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #52 4
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #13 read
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 niz
INFO  07:07:52,650 - #42 [
INFO  07:07:52,650 - #52 0
INFO  07:07:52,650 - #43 ]
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #13 read
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 niz
INFO  07:07:52,650 - #42 [
INFO  07:07:52,650 - #52 1
INFO  07:07:52,650 - #43 ]
INFO  07:07:52,650 - #41 )
INFO  07:07:52,650 - #38 ;
INFO  07:07:52,650 - #13 read
INFO  07:07:52,650 - #40 (
INFO  07:07:52,650 - #49 niz
INFO  07:07:52,650 - #42 [
INFO  07:07:52,650 - #52 2
INFO  07:07:52,650 - #43 ]
INFO  07:07:52,650 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 eol
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 sum
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 sum
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 0
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #39 ,
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 1
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #39 ,
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 2
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 eol
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 inkrement
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 2
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #39 ,
INFO  07:07:52,651 - #52 2
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #49 a
INFO  07:07:52,651 - #27 =
INFO  07:07:52,651 - #52 3
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #49 i
INFO  07:07:52,651 - #27 =
INFO  07:07:52,651 - #52 0
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #9 do
INFO  07:07:52,651 - #44 {
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #49 i
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #27 =
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #49 i
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #24 *
INFO  07:07:52,651 - #52 2
INFO  07:07:52,651 - #24 *
INFO  07:07:52,651 - #49 a
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #49 i
INFO  07:07:52,651 - #36 ++
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #45 }
INFO  07:07:52,651 - #10 while
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 i
INFO  07:07:52,651 - #32 <
INFO  07:07:52,651 - #52 3
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 0
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 1
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 niz
INFO  07:07:52,651 - #42 [
INFO  07:07:52,651 - #52 2
INFO  07:07:52,651 - #43 ]
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #12 print
INFO  07:07:52,651 - #40 (
INFO  07:07:52,651 - #49 eol
INFO  07:07:52,651 - #41 )
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #49 i
INFO  07:07:52,651 - #27 =
INFO  07:07:52,651 - #52 0
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #49 niz2
INFO  07:07:52,651 - #27 =
INFO  07:07:52,651 - #52 0
INFO  07:07:52,651 - #38 ;
INFO  07:07:52,651 - #9 do
INFO  07:07:52,651 - #44 {
INFO  07:07:52,652 - #49 niz2
INFO  07:07:52,652 - #27 =
INFO  07:07:52,652 - #49 niz2
INFO  07:07:52,652 - #22 +
INFO  07:07:52,652 - #49 niz
INFO  07:07:52,652 - #42 [
INFO  07:07:52,652 - #49 i
INFO  07:07:52,652 - #43 ]
INFO  07:07:52,652 - #24 *
INFO  07:07:52,652 - #49 niz
INFO  07:07:52,652 - #42 [
INFO  07:07:52,652 - #49 i
INFO  07:07:52,652 - #43 ]
INFO  07:07:52,652 - #38 ;
INFO  07:07:52,652 - #49 i
INFO  07:07:52,652 - #36 ++
INFO  07:07:52,652 - #38 ;
INFO  07:07:52,652 - #45 }
INFO  07:07:52,652 - #10 while
INFO  07:07:52,652 - #40 (
INFO  07:07:52,652 - #49 i
INFO  07:07:52,652 - #32 <
INFO  07:07:52,652 - #52 3
INFO  07:07:52,652 - #41 )
INFO  07:07:52,652 - #38 ;
INFO  07:07:52,652 - #12 print
INFO  07:07:52,652 - #40 (
INFO  07:07:52,652 - #49 niz2
INFO  07:07:52,652 - #41 )
INFO  07:07:52,652 - #38 ;
INFO  07:07:52,652 - #12 print
INFO  07:07:52,652 - #40 (
INFO  07:07:52,652 - #49 eol
INFO  07:07:52,652 - #41 )
INFO  07:07:52,652 - #38 ;
INFO  07:07:52,652 - #49 printArgs
INFO  07:07:52,652 - #40 (
INFO  07:07:52,652 - #52 5
INFO  07:07:52,652 - #39 ,
INFO  07:07:52,652 - #51 t
INFO  07:07:52,652 - #39 ,
INFO  07:07:52,652 - #51 e
INFO  07:07:52,652 - #39 ,
INFO  07:07:52,652 - #51 s
INFO  07:07:52,652 - #39 ,
INFO  07:07:52,652 - #51 t
INFO  07:07:52,652 - #39 ,
INFO  07:07:52,652 - #51 B
INFO  07:07:52,652 - #41 )
INFO  07:07:52,652 - #38 ;
INFO  07:07:52,652 - #45 }
INFO  07:07:52,652 - #45 }
INFO  07:07:52,656 - Line 20: Using local variable name: z
INFO  07:07:52,656 - Line 20: Access to array element detected. Array name: args
INFO  07:07:52,656 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:07:52,656 - Line 21: Using local variable name: d
INFO  07:07:52,656 - Line 21: Access to array element detected. Array name: args
INFO  07:07:52,656 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:07:52,656 - Line 22: Using local variable name: z
INFO  07:07:52,656 - Line 22: Using local variable name: d
INFO  07:07:52,656 - Line 28: Using local variable name: i
INFO  07:07:52,656 - Line 30: Using local variable name: i
INFO  07:07:52,656 - Line 30: Access to array element detected. Array name: args
INFO  07:07:52,656 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:07:52,656 - Line 31: Using local variable name: i
INFO  07:07:52,656 - Line 32: Using local variable name: i
INFO  07:07:52,656 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:07:52,656 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:07:52,656 - Line 37: Using local variable name: pom
INFO  07:07:52,656 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:07:52,656 - Line 38: Using local variable name: pom
INFO  07:07:52,656 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:07:52,656 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:07:52,656 - Line 40: Using local variable name: pom
INFO  07:07:52,656 - Line 40: Method Call detected. Method name: sum
INFO  07:07:52,656 - Method sum has varArgs with 2 args
INFO  07:07:52,656 - Line 53: Using global variable name: ibool
INFO  07:07:52,656 - Line 54: Using global variable name: i
INFO  07:07:52,656 - Line 56: Using global variable name: i
INFO  07:07:52,656 - Line 56: Using global variable name: ibool
INFO  07:07:52,656 - Line 57: Using global variable name: i
INFO  07:07:52,656 - Line 58: Using global variable name: i
INFO  07:07:52,656 - Line 60: Using global variable name: ibool
INFO  07:07:52,656 - Line 61: Using global variable name: i
INFO  07:07:52,656 - Line 63: Using global variable name: a
INFO  07:07:52,656 - Line 64: Using global variable name: niz
INFO  07:07:52,656 - Line 65: Using global variable name: niz
INFO  07:07:52,656 - Line 65: Access to array element detected. Array name: niz
INFO  07:07:52,656 - Line 65: Using global variable name: a
INFO  07:07:52,656 - Line 66: Using global variable name: niz
INFO  07:07:52,656 - Line 66: Access to array element detected. Array name: niz
INFO  07:07:52,656 - Line 66: Using global variable name: a
INFO  07:07:52,656 - Line 67: Using global variable name: niz
INFO  07:07:52,656 - Line 67: Access to array element detected. Array name: niz
INFO  07:07:52,656 - Line 67: Using global variable name: niz
INFO  07:07:52,656 - Line 67: Access to array element detected. Array name: niz
INFO  07:07:52,656 - Line 67: Using global variable name: niz
INFO  07:07:52,656 - Line 67: Access to array element detected. Array name: niz
INFO  07:07:52,656 - Line 67: Method Call detected. Method name: sum
INFO  07:07:52,656 - Method sum has varArgs with 2 args
INFO  07:07:52,656 - Line 67: Using global variable name: a
INFO  07:07:52,656 - Line 68: Method Call detected. Method name: verify
INFO  07:07:52,656 - Line 68: Using global variable name: niz
INFO  07:07:52,657 - Line 68: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 68: Method Call detected. Method name: ord
INFO  07:07:52,657 - Line 69: Method Call detected. Method name: ord
INFO  07:07:52,657 - Line 72: Using global variable name: i
INFO  07:07:52,657 - Line 74: Using global variable name: i
INFO  07:07:52,657 - Line 76: Using global variable name: i
INFO  07:07:52,657 - Line 79: Using global variable name: i
INFO  07:07:52,657 - Line 80: Using global variable name: i
INFO  07:07:52,657 - Line 80: Using global variable name: i
INFO  07:07:52,657 - Line 80: Method Call detected. Method name: inkrement
INFO  07:07:52,657 - Line 81: Using global variable name: i
INFO  07:07:52,657 - Line 83: Using global variable name: i
INFO  07:07:52,657 - Line 83: Method Call detected. Method name: verify
INFO  07:07:52,657 - Line 86: Using global variable name: niz
INFO  07:07:52,657 - Line 86: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 87: Using global variable name: niz
INFO  07:07:52,657 - Line 87: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 88: Using global variable name: niz
INFO  07:07:52,657 - Line 88: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 91: Using global variable name: niz
INFO  07:07:52,657 - Line 91: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 91: Using global variable name: niz
INFO  07:07:52,657 - Line 91: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 91: Method Call detected. Method name: sum
INFO  07:07:52,657 - Method sum has varArgs with 2 args
INFO  07:07:52,657 - Line 91: Using global variable name: niz
INFO  07:07:52,657 - Line 91: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 91: Method Call detected. Method name: sum
INFO  07:07:52,657 - Method sum has varArgs with 2 args
INFO  07:07:52,657 - Line 94: Using global variable name: niz
INFO  07:07:52,657 - Line 94: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 94: Method Call detected. Method name: inkrement
INFO  07:07:52,657 - Line 96: Using global variable name: a
INFO  07:07:52,657 - Line 97: Using global variable name: i
INFO  07:07:52,657 - Line 99: Using global variable name: i
INFO  07:07:52,657 - Line 99: Using global variable name: niz
INFO  07:07:52,657 - Line 99: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 99: Using global variable name: i
INFO  07:07:52,657 - Line 99: Using global variable name: niz
INFO  07:07:52,657 - Line 99: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 99: Using global variable name: a
INFO  07:07:52,657 - Line 100: Using global variable name: i
INFO  07:07:52,657 - Line 101: Using global variable name: i
INFO  07:07:52,657 - Line 102: Using global variable name: niz
INFO  07:07:52,657 - Line 102: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 103: Using global variable name: niz
INFO  07:07:52,657 - Line 103: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 104: Using global variable name: niz
INFO  07:07:52,657 - Line 104: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 107: Using global variable name: i
INFO  07:07:52,657 - Line 108: Using global variable name: niz2
INFO  07:07:52,657 - Line 110: Using global variable name: niz2
INFO  07:07:52,657 - Line 110: Using global variable name: niz2
INFO  07:07:52,657 - Line 110: Using global variable name: i
INFO  07:07:52,657 - Line 110: Using global variable name: niz
INFO  07:07:52,657 - Line 110: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 110: Using global variable name: i
INFO  07:07:52,657 - Line 110: Using global variable name: niz
INFO  07:07:52,657 - Line 110: Access to array element detected. Array name: niz
INFO  07:07:52,657 - Line 111: Using global variable name: i
INFO  07:07:52,657 - Line 112: Using global variable name: i
INFO  07:07:52,657 - Line 113: Using global variable name: niz2
INFO  07:07:52,657 - Line 115: Method Call detected. Method name: printArgs
INFO  07:07:52,657 - Method printArgs has varArgs with 5 args
INFO  07:20:08,394 - #2 program
INFO  07:20:08,394 - #49 test302
INFO  07:20:08,394 - #7 const
INFO  07:20:08,394 - #49 int
INFO  07:20:08,394 - #49 jedan
INFO  07:20:08,394 - #27 =
INFO  07:20:08,395 - #52 1
INFO  07:20:08,395 - #38 ;
INFO  07:20:08,395 - #49 int
INFO  07:20:08,395 - #49 i
INFO  07:20:08,395 - #38 ;
INFO  07:20:08,395 - #49 bool
INFO  07:20:08,395 - #49 ibool
INFO  07:20:08,396 - #38 ;
INFO  07:20:08,396 - #49 int
INFO  07:20:08,396 - #49 niz2
INFO  07:20:08,396 - #38 ;
INFO  07:20:08,396 - #49 int
INFO  07:20:08,396 - #49 niz
INFO  07:20:08,396 - #42 [
INFO  07:20:08,396 - #43 ]
INFO  07:20:08,396 - #38 ;
INFO  07:20:08,396 - #49 int
INFO  07:20:08,396 - #49 a
INFO  07:20:08,396 - #38 ;
INFO  07:20:08,396 - #44 {
INFO  07:20:08,396 - #14 void
INFO  07:20:08,396 - #49 main
INFO  07:20:08,397 - #40 (
INFO  07:20:08,397 - #41 )
INFO  07:20:08,397 - #44 {
INFO  07:20:08,397 - #49 ibool
INFO  07:20:08,397 - #27 =
INFO  07:20:08,397 - #50 true
INFO  07:20:08,397 - #38 ;
INFO  07:20:08,398 - #5 if
INFO  07:20:08,398 - #40 (
INFO  07:20:08,398 - #49 ibool
INFO  07:20:08,398 - #41 )
INFO  07:20:08,398 - #5 if
INFO  07:20:08,398 - #40 (
INFO  07:20:08,398 - #49 i
INFO  07:20:08,398 - #28 ==
INFO  07:20:08,398 - #52 5
INFO  07:20:08,398 - #41 )
INFO  07:20:08,399 - #12 print
INFO  07:20:08,399 - #40 (
INFO  07:20:08,399 - #52 1
INFO  07:20:08,399 - #41 )
INFO  07:20:08,399 - #38 ;
INFO  07:20:08,399 - #6 else
INFO  07:20:08,399 - #12 print
INFO  07:20:08,399 - #40 (
INFO  07:20:08,399 - #23 -
INFO  07:20:08,399 - #52 1
INFO  07:20:08,400 - #41 )
INFO  07:20:08,400 - #38 ;
INFO  07:20:08,400 - #49 a
INFO  07:20:08,400 - #27 =
INFO  07:20:08,400 - #52 2
INFO  07:20:08,400 - #38 ;
INFO  07:20:08,400 - #45 }
INFO  07:20:08,400 - #45 }
INFO  07:20:08,403 - Line 18: Using global variable name: ibool
INFO  07:20:08,403 - Line 19: Using global variable name: ibool
INFO  07:20:08,403 - Line 20: Using global variable name: i
INFO  07:20:08,404 - Line 22: Using global variable name: a
INFO  07:20:35,359 - #2 program
INFO  07:20:35,359 - #49 test302
INFO  07:20:35,359 - #7 const
INFO  07:20:35,360 - #49 int
INFO  07:20:35,360 - #49 jedan
INFO  07:20:35,360 - #27 =
INFO  07:20:35,360 - #52 1
INFO  07:20:35,360 - #38 ;
INFO  07:20:35,360 - #49 int
INFO  07:20:35,360 - #49 i
INFO  07:20:35,361 - #38 ;
INFO  07:20:35,361 - #49 bool
INFO  07:20:35,361 - #49 ibool
INFO  07:20:35,361 - #38 ;
INFO  07:20:35,361 - #49 int
INFO  07:20:35,361 - #49 niz2
INFO  07:20:35,361 - #38 ;
INFO  07:20:35,361 - #49 int
INFO  07:20:35,361 - #49 niz
INFO  07:20:35,361 - #42 [
INFO  07:20:35,361 - #43 ]
INFO  07:20:35,361 - #38 ;
INFO  07:20:35,362 - #49 int
INFO  07:20:35,362 - #49 a
INFO  07:20:35,362 - #38 ;
INFO  07:20:35,362 - #44 {
INFO  07:20:35,362 - #14 void
INFO  07:20:35,362 - #49 main
INFO  07:20:35,362 - #40 (
INFO  07:20:35,362 - #41 )
INFO  07:20:35,362 - #44 {
INFO  07:20:35,363 - #49 ibool
INFO  07:20:35,363 - #27 =
INFO  07:20:35,363 - #50 true
INFO  07:20:35,363 - #38 ;
INFO  07:20:35,363 - #49 i
INFO  07:20:35,363 - #27 =
INFO  07:20:35,363 - #52 5
INFO  07:20:35,363 - #38 ;
INFO  07:20:35,363 - #5 if
INFO  07:20:35,363 - #40 (
INFO  07:20:35,363 - #49 ibool
INFO  07:20:35,363 - #41 )
INFO  07:20:35,364 - #5 if
INFO  07:20:35,364 - #40 (
INFO  07:20:35,364 - #49 i
INFO  07:20:35,364 - #28 ==
INFO  07:20:35,364 - #52 5
INFO  07:20:35,364 - #41 )
INFO  07:20:35,364 - #12 print
INFO  07:20:35,364 - #40 (
INFO  07:20:35,364 - #52 1
INFO  07:20:35,364 - #41 )
INFO  07:20:35,365 - #38 ;
INFO  07:20:35,365 - #6 else
INFO  07:20:35,365 - #12 print
INFO  07:20:35,365 - #40 (
INFO  07:20:35,365 - #23 -
INFO  07:20:35,365 - #52 1
INFO  07:20:35,365 - #41 )
INFO  07:20:35,365 - #38 ;
INFO  07:20:35,365 - #49 a
INFO  07:20:35,365 - #27 =
INFO  07:20:35,365 - #52 2
INFO  07:20:35,365 - #38 ;
INFO  07:20:35,366 - #45 }
INFO  07:20:35,366 - #45 }
INFO  07:20:35,369 - Line 18: Using global variable name: ibool
INFO  07:20:35,369 - Line 19: Using global variable name: i
INFO  07:20:35,369 - Line 20: Using global variable name: ibool
INFO  07:20:35,369 - Line 21: Using global variable name: i
INFO  07:20:35,369 - Line 23: Using global variable name: a
INFO  07:27:03,601 - #2 program
INFO  07:27:03,601 - #49 test302
INFO  07:27:03,601 - #7 const
INFO  07:27:03,602 - #49 int
INFO  07:27:03,602 - #49 jedan
INFO  07:27:03,602 - #27 =
INFO  07:27:03,602 - #52 1
INFO  07:27:03,602 - #38 ;
INFO  07:27:03,602 - #49 int
INFO  07:27:03,602 - #49 i
INFO  07:27:03,602 - #38 ;
INFO  07:27:03,603 - #49 bool
INFO  07:27:03,603 - #49 ibool
INFO  07:27:03,603 - #38 ;
INFO  07:27:03,603 - #49 int
INFO  07:27:03,603 - #49 niz2
INFO  07:27:03,603 - #38 ;
INFO  07:27:03,603 - #49 int
INFO  07:27:03,603 - #49 niz
INFO  07:27:03,603 - #42 [
INFO  07:27:03,603 - #43 ]
INFO  07:27:03,603 - #38 ;
INFO  07:27:03,603 - #49 int
INFO  07:27:03,603 - #49 a
INFO  07:27:03,603 - #38 ;
INFO  07:27:03,603 - #44 {
INFO  07:27:03,603 - #14 void
INFO  07:27:03,604 - #49 main
INFO  07:27:03,604 - #40 (
INFO  07:27:03,604 - #41 )
INFO  07:27:03,604 - #44 {
INFO  07:27:03,604 - #49 ibool
INFO  07:27:03,604 - #27 =
INFO  07:27:03,605 - #50 true
INFO  07:27:03,605 - #38 ;
INFO  07:27:03,605 - #49 i
INFO  07:27:03,605 - #27 =
INFO  07:27:03,605 - #52 5
INFO  07:27:03,605 - #38 ;
INFO  07:27:03,605 - #5 if
INFO  07:27:03,605 - #40 (
INFO  07:27:03,605 - #49 ibool
INFO  07:27:03,605 - #41 )
INFO  07:27:03,605 - #5 if
INFO  07:27:03,606 - #40 (
INFO  07:27:03,606 - #49 i
INFO  07:27:03,606 - #28 ==
INFO  07:27:03,606 - #52 5
INFO  07:27:03,606 - #41 )
INFO  07:27:03,606 - #12 print
INFO  07:27:03,607 - #40 (
INFO  07:27:03,607 - #52 1
INFO  07:27:03,607 - #41 )
INFO  07:27:03,607 - #38 ;
INFO  07:27:03,607 - #6 else
INFO  07:27:03,607 - #12 print
INFO  07:27:03,607 - #40 (
INFO  07:27:03,607 - #23 -
INFO  07:27:03,607 - #52 1
INFO  07:27:03,607 - #41 )
INFO  07:27:03,607 - #38 ;
INFO  07:27:03,607 - #49 a
INFO  07:27:03,607 - #27 =
INFO  07:27:03,608 - #52 2
INFO  07:27:03,608 - #38 ;
INFO  07:27:03,608 - #45 }
INFO  07:27:03,608 - #45 }
INFO  07:27:03,611 - Line 18: Using global variable name: ibool
INFO  07:27:03,611 - Line 19: Using global variable name: i
INFO  07:27:03,611 - Line 20: Using global variable name: ibool
INFO  07:27:03,611 - Line 21: Using global variable name: i
INFO  07:27:03,611 - Line 23: Using global variable name: a
INFO  07:27:29,732 - #2 program
INFO  07:27:29,732 - #49 test302
INFO  07:27:29,732 - #7 const
INFO  07:27:29,732 - #49 int
INFO  07:27:29,732 - #49 jedan
INFO  07:27:29,732 - #27 =
INFO  07:27:29,732 - #52 1
INFO  07:27:29,732 - #38 ;
INFO  07:27:29,733 - #49 int
INFO  07:27:29,733 - #49 i
INFO  07:27:29,733 - #38 ;
INFO  07:27:29,733 - #49 bool
INFO  07:27:29,733 - #49 ibool
INFO  07:27:29,733 - #38 ;
INFO  07:27:29,733 - #49 int
INFO  07:27:29,733 - #49 niz2
INFO  07:27:29,734 - #38 ;
INFO  07:27:29,734 - #49 int
INFO  07:27:29,734 - #49 niz
INFO  07:27:29,734 - #42 [
INFO  07:27:29,734 - #43 ]
INFO  07:27:29,734 - #38 ;
INFO  07:27:29,734 - #49 int
INFO  07:27:29,734 - #49 a
INFO  07:27:29,734 - #38 ;
INFO  07:27:29,734 - #44 {
INFO  07:27:29,734 - #49 int
INFO  07:27:29,734 - #49 sum
INFO  07:27:29,734 - #40 (
INFO  07:27:29,735 - #49 int
INFO  07:27:29,735 - #47 .
INFO  07:27:29,735 - #47 .
INFO  07:27:29,735 - #47 .
INFO  07:27:29,735 - #49 args
INFO  07:27:29,735 - #41 )
INFO  07:27:29,735 - #49 int
INFO  07:27:29,735 - #49 z
INFO  07:27:29,735 - #39 ,
INFO  07:27:29,736 - #49 d
INFO  07:27:29,736 - #38 ;
INFO  07:27:29,736 - #44 {
INFO  07:27:29,736 - #49 z
INFO  07:27:29,736 - #27 =
INFO  07:27:29,736 - #49 args
INFO  07:27:29,736 - #42 [
INFO  07:27:29,736 - #52 0
INFO  07:27:29,736 - #43 ]
INFO  07:27:29,737 - #38 ;
INFO  07:27:29,737 - #49 d
INFO  07:27:29,737 - #27 =
INFO  07:27:29,737 - #49 args
INFO  07:27:29,737 - #42 [
INFO  07:27:29,737 - #52 1
INFO  07:27:29,737 - #43 ]
INFO  07:27:29,737 - #38 ;
INFO  07:27:29,737 - #15 return
INFO  07:27:29,737 - #49 z
INFO  07:27:29,737 - #22 +
INFO  07:27:29,737 - #49 d
INFO  07:27:29,737 - #38 ;
INFO  07:27:29,738 - #45 }
INFO  07:27:29,738 - #14 void
INFO  07:27:29,738 - #49 printArgs
INFO  07:27:29,738 - #40 (
INFO  07:27:29,738 - #49 int
INFO  07:27:29,738 - #49 num
INFO  07:27:29,738 - #39 ,
INFO  07:27:29,738 - #49 char
INFO  07:27:29,738 - #47 .
INFO  07:27:29,738 - #47 .
INFO  07:27:29,738 - #47 .
INFO  07:27:29,738 - #49 args
INFO  07:27:29,738 - #41 )
INFO  07:27:29,738 - #49 int
INFO  07:27:29,739 - #49 i
INFO  07:27:29,739 - #38 ;
INFO  07:27:29,739 - #44 {
INFO  07:27:29,739 - #49 i
INFO  07:27:29,739 - #27 =
INFO  07:27:29,739 - #52 0
INFO  07:27:29,739 - #38 ;
INFO  07:27:29,739 - #9 do
INFO  07:27:29,739 - #44 {
INFO  07:27:29,739 - #12 print
INFO  07:27:29,739 - #40 (
INFO  07:27:29,739 - #49 args
INFO  07:27:29,739 - #42 [
INFO  07:27:29,739 - #49 i
INFO  07:27:29,739 - #43 ]
INFO  07:27:29,739 - #41 )
INFO  07:27:29,739 - #38 ;
INFO  07:27:29,739 - #49 i
INFO  07:27:29,739 - #36 ++
INFO  07:27:29,739 - #38 ;
INFO  07:27:29,740 - #45 }
INFO  07:27:29,740 - #10 while
INFO  07:27:29,740 - #40 (
INFO  07:27:29,740 - #49 i
INFO  07:27:29,740 - #32 <
INFO  07:27:29,740 - #49 num
INFO  07:27:29,740 - #41 )
INFO  07:27:29,741 - #38 ;
INFO  07:27:29,741 - #45 }
INFO  07:27:29,741 - #49 int
INFO  07:27:29,741 - #49 inkrement
INFO  07:27:29,741 - #40 (
INFO  07:27:29,741 - #49 int
INFO  07:27:29,741 - #49 a
INFO  07:27:29,741 - #39 ,
INFO  07:27:29,741 - #49 int
INFO  07:27:29,741 - #49 inc
INFO  07:27:29,741 - #41 )
INFO  07:27:29,741 - #49 int
INFO  07:27:29,741 - #49 pom
INFO  07:27:29,741 - #38 ;
INFO  07:27:29,741 - #44 {
INFO  07:27:29,742 - #5 if
INFO  07:27:29,742 - #40 (
INFO  07:27:29,742 - #49 inc
INFO  07:27:29,742 - #28 ==
INFO  07:27:29,742 - #49 jedan
INFO  07:27:29,742 - #41 )
INFO  07:27:29,742 - #49 pom
INFO  07:27:29,742 - #27 =
INFO  07:27:29,742 - #52 1
INFO  07:27:29,742 - #38 ;
INFO  07:27:29,742 - #6 else
INFO  07:27:29,742 - #5 if
INFO  07:27:29,743 - #40 (
INFO  07:27:29,743 - #49 inc
INFO  07:27:29,743 - #28 ==
INFO  07:27:29,743 - #52 2
INFO  07:27:29,743 - #41 )
INFO  07:27:29,743 - #49 pom
INFO  07:27:29,743 - #27 =
INFO  07:27:29,743 - #49 a
INFO  07:27:29,743 - #38 ;
INFO  07:27:29,743 - #15 return
INFO  07:27:29,743 - #49 sum
INFO  07:27:29,743 - #40 (
INFO  07:27:29,743 - #49 a
INFO  07:27:29,743 - #39 ,
INFO  07:27:29,743 - #49 pom
INFO  07:27:29,743 - #41 )
INFO  07:27:29,744 - #38 ;
INFO  07:27:29,744 - #45 }
INFO  07:27:29,744 - #49 bool
INFO  07:27:29,744 - #49 verify
INFO  07:27:29,744 - #40 (
INFO  07:27:29,744 - #41 )
INFO  07:27:29,744 - #44 {
INFO  07:27:29,744 - #12 print
INFO  07:27:29,744 - #40 (
INFO  07:27:29,744 - #51 v
INFO  07:27:29,744 - #41 )
INFO  07:27:29,744 - #38 ;
INFO  07:27:29,744 - #15 return
INFO  07:27:29,744 - #50 false
INFO  07:27:29,744 - #38 ;
INFO  07:27:29,744 - #45 }
INFO  07:27:29,745 - #14 void
INFO  07:27:29,745 - #49 main
INFO  07:27:29,745 - #40 (
INFO  07:27:29,745 - #41 )
INFO  07:27:29,745 - #44 {
INFO  07:27:29,745 - #5 if
INFO  07:27:29,745 - #40 (
INFO  07:27:29,745 - #52 1
INFO  07:27:29,745 - #29 !=
INFO  07:27:29,745 - #52 1
INFO  07:27:29,745 - #41 )
INFO  07:27:29,745 - #12 print
INFO  07:27:29,745 - #40 (
INFO  07:27:29,745 - #23 -
INFO  07:27:29,745 - #52 6
INFO  07:27:29,745 - #41 )
INFO  07:27:29,745 - #38 ;
INFO  07:27:29,745 - #6 else
INFO  07:27:29,745 - #12 print
INFO  07:27:29,745 - #40 (
INFO  07:27:29,745 - #52 0
INFO  07:27:29,745 - #41 )
INFO  07:27:29,745 - #38 ;
INFO  07:27:29,745 - #49 ibool
INFO  07:27:29,745 - #27 =
INFO  07:27:29,745 - #50 false
INFO  07:27:29,745 - #38 ;
INFO  07:27:29,745 - #49 i
INFO  07:27:29,745 - #27 =
INFO  07:27:29,746 - #52 0
INFO  07:27:29,746 - #38 ;
INFO  07:27:29,746 - #9 do
INFO  07:27:29,746 - #44 {
INFO  07:27:29,746 - #5 if
INFO  07:27:29,746 - #40 (
INFO  07:27:29,746 - #49 i
INFO  07:27:29,746 - #28 ==
INFO  07:27:29,746 - #52 2
INFO  07:27:29,746 - #41 )
INFO  07:27:29,746 - #49 ibool
INFO  07:27:29,746 - #27 =
INFO  07:27:29,746 - #50 true
INFO  07:27:29,746 - #38 ;
INFO  07:27:29,746 - #49 i
INFO  07:27:29,746 - #36 ++
INFO  07:27:29,746 - #38 ;
INFO  07:27:29,746 - #45 }
INFO  07:27:29,746 - #10 while
INFO  07:27:29,746 - #40 (
INFO  07:27:29,746 - #49 i
INFO  07:27:29,746 - #32 <
INFO  07:27:29,746 - #52 5
INFO  07:27:29,746 - #41 )
INFO  07:27:29,746 - #38 ;
INFO  07:27:29,746 - #5 if
INFO  07:27:29,746 - #40 (
INFO  07:27:29,746 - #49 ibool
INFO  07:27:29,746 - #41 )
INFO  07:27:29,746 - #5 if
INFO  07:27:29,746 - #40 (
INFO  07:27:29,746 - #49 i
INFO  07:27:29,746 - #28 ==
INFO  07:27:29,746 - #52 5
INFO  07:27:29,746 - #41 )
INFO  07:27:29,746 - #12 print
INFO  07:27:29,747 - #40 (
INFO  07:27:29,747 - #52 1
INFO  07:27:29,747 - #41 )
INFO  07:27:29,747 - #38 ;
INFO  07:27:29,747 - #6 else
INFO  07:27:29,747 - #12 print
INFO  07:27:29,747 - #40 (
INFO  07:27:29,747 - #23 -
INFO  07:27:29,747 - #52 1
INFO  07:27:29,747 - #41 )
INFO  07:27:29,747 - #38 ;
INFO  07:27:29,747 - #49 a
INFO  07:27:29,747 - #27 =
INFO  07:27:29,747 - #52 2
INFO  07:27:29,747 - #38 ;
INFO  07:27:29,747 - #49 niz
INFO  07:27:29,747 - #27 =
INFO  07:27:29,747 - #11 new
INFO  07:27:29,747 - #49 int
INFO  07:27:29,747 - #42 [
INFO  07:27:29,747 - #52 3
INFO  07:27:29,747 - #43 ]
INFO  07:27:29,747 - #38 ;
INFO  07:27:29,747 - #49 niz
INFO  07:27:29,747 - #42 [
INFO  07:27:29,747 - #52 0
INFO  07:27:29,747 - #43 ]
INFO  07:27:29,747 - #27 =
INFO  07:27:29,747 - #52 1
INFO  07:27:29,747 - #24 *
INFO  07:27:29,747 - #49 a
INFO  07:27:29,748 - #38 ;
INFO  07:27:29,748 - #49 niz
INFO  07:27:29,748 - #42 [
INFO  07:27:29,748 - #52 1
INFO  07:27:29,748 - #43 ]
INFO  07:27:29,748 - #27 =
INFO  07:27:29,748 - #52 2
INFO  07:27:29,748 - #24 *
INFO  07:27:29,748 - #49 a
INFO  07:27:29,748 - #38 ;
INFO  07:27:29,748 - #49 niz
INFO  07:27:29,748 - #42 [
INFO  07:27:29,748 - #52 2
INFO  07:27:29,748 - #43 ]
INFO  07:27:29,748 - #27 =
INFO  07:27:29,748 - #49 sum
INFO  07:27:29,748 - #40 (
INFO  07:27:29,748 - #49 niz
INFO  07:27:29,748 - #42 [
INFO  07:27:29,748 - #52 1
INFO  07:27:29,748 - #43 ]
INFO  07:27:29,748 - #39 ,
INFO  07:27:29,748 - #49 niz
INFO  07:27:29,748 - #42 [
INFO  07:27:29,748 - #52 0
INFO  07:27:29,748 - #43 ]
INFO  07:27:29,748 - #41 )
INFO  07:27:29,748 - #24 *
INFO  07:27:29,748 - #49 a
INFO  07:27:29,748 - #22 +
INFO  07:27:29,748 - #52 1
INFO  07:27:29,748 - #38 ;
INFO  07:27:29,748 - #5 if
INFO  07:27:29,748 - #40 (
INFO  07:27:29,748 - #49 verify
INFO  07:27:29,748 - #40 (
INFO  07:27:29,748 - #41 )
INFO  07:27:29,749 - #35 ||
INFO  07:27:29,749 - #49 niz
INFO  07:27:29,749 - #42 [
INFO  07:27:29,749 - #52 2
INFO  07:27:29,749 - #43 ]
INFO  07:27:29,749 - #28 ==
INFO  07:27:29,749 - #52 4
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #12 print
INFO  07:27:29,749 - #40 (
INFO  07:27:29,749 - #49 ord
INFO  07:27:29,749 - #40 (
INFO  07:27:29,749 - #51 A
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #38 ;
INFO  07:27:29,749 - #6 else
INFO  07:27:29,749 - #12 print
INFO  07:27:29,749 - #40 (
INFO  07:27:29,749 - #49 ord
INFO  07:27:29,749 - #40 (
INFO  07:27:29,749 - #51 a
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #38 ;
INFO  07:27:29,749 - #12 print
INFO  07:27:29,749 - #40 (
INFO  07:27:29,749 - #49 eol
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #38 ;
INFO  07:27:29,749 - #49 i
INFO  07:27:29,749 - #27 =
INFO  07:27:29,749 - #52 0
INFO  07:27:29,749 - #38 ;
INFO  07:27:29,749 - #9 do
INFO  07:27:29,749 - #44 {
INFO  07:27:29,749 - #5 if
INFO  07:27:29,749 - #40 (
INFO  07:27:29,749 - #49 i
INFO  07:27:29,749 - #28 ==
INFO  07:27:29,749 - #52 3
INFO  07:27:29,749 - #41 )
INFO  07:27:29,749 - #44 {
INFO  07:27:29,749 - #49 i
INFO  07:27:29,749 - #36 ++
INFO  07:27:29,749 - #38 ;
INFO  07:27:29,749 - #4 continue
INFO  07:27:29,749 - #38 ;
INFO  07:27:29,749 - #45 }
INFO  07:27:29,750 - #5 if
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #49 i
INFO  07:27:29,750 - #28 ==
INFO  07:27:29,750 - #52 4
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #3 break
INFO  07:27:29,750 - #38 ;
INFO  07:27:29,750 - #49 i
INFO  07:27:29,750 - #27 =
INFO  07:27:29,750 - #49 inkrement
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #49 i
INFO  07:27:29,750 - #39 ,
INFO  07:27:29,750 - #52 1
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #38 ;
INFO  07:27:29,750 - #45 }
INFO  07:27:29,750 - #10 while
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #49 i
INFO  07:27:29,750 - #32 <
INFO  07:27:29,750 - #52 10
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #38 ;
INFO  07:27:29,750 - #5 if
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #49 i
INFO  07:27:29,750 - #28 ==
INFO  07:27:29,750 - #52 3
INFO  07:27:29,750 - #34 &&
INFO  07:27:29,750 - #49 verify
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #12 print
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #23 -
INFO  07:27:29,750 - #52 4
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #38 ;
INFO  07:27:29,750 - #6 else
INFO  07:27:29,750 - #12 print
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #52 4
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #38 ;
INFO  07:27:29,750 - #13 read
INFO  07:27:29,750 - #40 (
INFO  07:27:29,750 - #49 niz
INFO  07:27:29,750 - #42 [
INFO  07:27:29,750 - #52 0
INFO  07:27:29,750 - #43 ]
INFO  07:27:29,750 - #41 )
INFO  07:27:29,750 - #38 ;
INFO  07:27:29,750 - #13 read
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 1
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #13 read
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 2
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 eol
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 sum
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 sum
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 0
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #39 ,
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 1
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #39 ,
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 2
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 eol
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 inkrement
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 2
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #39 ,
INFO  07:27:29,751 - #52 2
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #49 a
INFO  07:27:29,751 - #27 =
INFO  07:27:29,751 - #52 3
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #49 i
INFO  07:27:29,751 - #27 =
INFO  07:27:29,751 - #52 0
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #9 do
INFO  07:27:29,751 - #44 {
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #49 i
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #27 =
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #49 i
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #24 *
INFO  07:27:29,751 - #52 2
INFO  07:27:29,751 - #24 *
INFO  07:27:29,751 - #49 a
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #49 i
INFO  07:27:29,751 - #36 ++
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #45 }
INFO  07:27:29,751 - #10 while
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 i
INFO  07:27:29,751 - #32 <
INFO  07:27:29,751 - #52 3
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 0
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 1
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 niz
INFO  07:27:29,751 - #42 [
INFO  07:27:29,751 - #52 2
INFO  07:27:29,751 - #43 ]
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #12 print
INFO  07:27:29,751 - #40 (
INFO  07:27:29,751 - #49 eol
INFO  07:27:29,751 - #41 )
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #49 i
INFO  07:27:29,751 - #27 =
INFO  07:27:29,751 - #52 0
INFO  07:27:29,751 - #38 ;
INFO  07:27:29,751 - #49 niz2
INFO  07:27:29,752 - #27 =
INFO  07:27:29,752 - #52 0
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #9 do
INFO  07:27:29,752 - #44 {
INFO  07:27:29,752 - #49 niz2
INFO  07:27:29,752 - #27 =
INFO  07:27:29,752 - #49 niz2
INFO  07:27:29,752 - #22 +
INFO  07:27:29,752 - #49 niz
INFO  07:27:29,752 - #42 [
INFO  07:27:29,752 - #49 i
INFO  07:27:29,752 - #43 ]
INFO  07:27:29,752 - #24 *
INFO  07:27:29,752 - #49 niz
INFO  07:27:29,752 - #42 [
INFO  07:27:29,752 - #49 i
INFO  07:27:29,752 - #43 ]
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #49 i
INFO  07:27:29,752 - #36 ++
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #45 }
INFO  07:27:29,752 - #10 while
INFO  07:27:29,752 - #40 (
INFO  07:27:29,752 - #49 i
INFO  07:27:29,752 - #32 <
INFO  07:27:29,752 - #52 3
INFO  07:27:29,752 - #41 )
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #12 print
INFO  07:27:29,752 - #40 (
INFO  07:27:29,752 - #49 niz2
INFO  07:27:29,752 - #41 )
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #12 print
INFO  07:27:29,752 - #40 (
INFO  07:27:29,752 - #49 eol
INFO  07:27:29,752 - #41 )
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #49 printArgs
INFO  07:27:29,752 - #40 (
INFO  07:27:29,752 - #52 5
INFO  07:27:29,752 - #39 ,
INFO  07:27:29,752 - #51 t
INFO  07:27:29,752 - #39 ,
INFO  07:27:29,752 - #51 e
INFO  07:27:29,752 - #39 ,
INFO  07:27:29,752 - #51 s
INFO  07:27:29,752 - #39 ,
INFO  07:27:29,752 - #51 t
INFO  07:27:29,752 - #39 ,
INFO  07:27:29,752 - #51 B
INFO  07:27:29,752 - #41 )
INFO  07:27:29,752 - #38 ;
INFO  07:27:29,752 - #45 }
INFO  07:27:29,752 - #45 }
INFO  07:27:29,756 - Line 20: Using local variable name: z
INFO  07:27:29,756 - Line 20: Access to array element detected. Array name: args
INFO  07:27:29,756 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:27:29,756 - Line 21: Using local variable name: d
INFO  07:27:29,756 - Line 21: Access to array element detected. Array name: args
INFO  07:27:29,756 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:27:29,756 - Line 22: Using local variable name: z
INFO  07:27:29,756 - Line 22: Using local variable name: d
INFO  07:27:29,756 - Line 28: Using local variable name: i
INFO  07:27:29,756 - Line 30: Using local variable name: i
INFO  07:27:29,756 - Line 30: Access to array element detected. Array name: args
INFO  07:27:29,756 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:27:29,756 - Line 31: Using local variable name: i
INFO  07:27:29,756 - Line 32: Using local variable name: i
INFO  07:27:29,756 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:27:29,756 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:27:29,756 - Line 37: Using local variable name: pom
INFO  07:27:29,756 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:27:29,756 - Line 38: Using local variable name: pom
INFO  07:27:29,756 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:27:29,756 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:27:29,756 - Line 40: Using local variable name: pom
INFO  07:27:29,756 - Line 40: Method Call detected. Method name: sum
INFO  07:27:29,756 - Method sum has varArgs with 2 args
INFO  07:27:29,756 - Line 53: Using global variable name: ibool
INFO  07:27:29,756 - Line 54: Using global variable name: i
INFO  07:27:29,756 - Line 56: Using global variable name: i
INFO  07:27:29,757 - Line 56: Using global variable name: ibool
INFO  07:27:29,757 - Line 57: Using global variable name: i
INFO  07:27:29,757 - Line 58: Using global variable name: i
INFO  07:27:29,757 - Line 60: Using global variable name: ibool
INFO  07:27:29,757 - Line 61: Using global variable name: i
INFO  07:27:29,757 - Line 63: Using global variable name: a
INFO  07:27:29,757 - Line 64: Using global variable name: niz
INFO  07:27:29,757 - Line 65: Using global variable name: niz
INFO  07:27:29,757 - Line 65: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 65: Using global variable name: a
INFO  07:27:29,757 - Line 66: Using global variable name: niz
INFO  07:27:29,757 - Line 66: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 66: Using global variable name: a
INFO  07:27:29,757 - Line 67: Using global variable name: niz
INFO  07:27:29,757 - Line 67: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 67: Using global variable name: niz
INFO  07:27:29,757 - Line 67: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 67: Using global variable name: niz
INFO  07:27:29,757 - Line 67: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 67: Method Call detected. Method name: sum
INFO  07:27:29,757 - Method sum has varArgs with 2 args
INFO  07:27:29,757 - Line 67: Using global variable name: a
INFO  07:27:29,757 - Line 68: Method Call detected. Method name: verify
INFO  07:27:29,757 - Line 68: Using global variable name: niz
INFO  07:27:29,757 - Line 68: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 68: Method Call detected. Method name: ord
INFO  07:27:29,757 - Line 69: Method Call detected. Method name: ord
INFO  07:27:29,757 - Line 72: Using global variable name: i
INFO  07:27:29,757 - Line 74: Using global variable name: i
INFO  07:27:29,757 - Line 76: Using global variable name: i
INFO  07:27:29,757 - Line 79: Using global variable name: i
INFO  07:27:29,757 - Line 80: Using global variable name: i
INFO  07:27:29,757 - Line 80: Using global variable name: i
INFO  07:27:29,757 - Line 80: Method Call detected. Method name: inkrement
INFO  07:27:29,757 - Line 81: Using global variable name: i
INFO  07:27:29,757 - Line 83: Using global variable name: i
INFO  07:27:29,757 - Line 83: Method Call detected. Method name: verify
INFO  07:27:29,757 - Line 86: Using global variable name: niz
INFO  07:27:29,757 - Line 86: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 87: Using global variable name: niz
INFO  07:27:29,757 - Line 87: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 88: Using global variable name: niz
INFO  07:27:29,757 - Line 88: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 91: Using global variable name: niz
INFO  07:27:29,757 - Line 91: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 91: Using global variable name: niz
INFO  07:27:29,757 - Line 91: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 91: Method Call detected. Method name: sum
INFO  07:27:29,757 - Method sum has varArgs with 2 args
INFO  07:27:29,757 - Line 91: Using global variable name: niz
INFO  07:27:29,757 - Line 91: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 91: Method Call detected. Method name: sum
INFO  07:27:29,757 - Method sum has varArgs with 2 args
INFO  07:27:29,757 - Line 94: Using global variable name: niz
INFO  07:27:29,757 - Line 94: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 94: Method Call detected. Method name: inkrement
INFO  07:27:29,757 - Line 96: Using global variable name: a
INFO  07:27:29,757 - Line 97: Using global variable name: i
INFO  07:27:29,757 - Line 99: Using global variable name: i
INFO  07:27:29,757 - Line 99: Using global variable name: niz
INFO  07:27:29,757 - Line 99: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 99: Using global variable name: i
INFO  07:27:29,757 - Line 99: Using global variable name: niz
INFO  07:27:29,757 - Line 99: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 99: Using global variable name: a
INFO  07:27:29,757 - Line 100: Using global variable name: i
INFO  07:27:29,757 - Line 101: Using global variable name: i
INFO  07:27:29,757 - Line 102: Using global variable name: niz
INFO  07:27:29,757 - Line 102: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 103: Using global variable name: niz
INFO  07:27:29,757 - Line 103: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 104: Using global variable name: niz
INFO  07:27:29,757 - Line 104: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 107: Using global variable name: i
INFO  07:27:29,757 - Line 108: Using global variable name: niz2
INFO  07:27:29,757 - Line 110: Using global variable name: niz2
INFO  07:27:29,757 - Line 110: Using global variable name: niz2
INFO  07:27:29,757 - Line 110: Using global variable name: i
INFO  07:27:29,757 - Line 110: Using global variable name: niz
INFO  07:27:29,757 - Line 110: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 110: Using global variable name: i
INFO  07:27:29,757 - Line 110: Using global variable name: niz
INFO  07:27:29,757 - Line 110: Access to array element detected. Array name: niz
INFO  07:27:29,757 - Line 111: Using global variable name: i
INFO  07:27:29,758 - Line 112: Using global variable name: i
INFO  07:27:29,758 - Line 113: Using global variable name: niz2
INFO  07:27:29,758 - Line 115: Method Call detected. Method name: printArgs
INFO  07:27:29,758 - Method printArgs has varArgs with 5 args
INFO  07:30:17,694 - #2 program
INFO  07:30:17,694 - #49 test302
INFO  07:30:17,694 - #7 const
INFO  07:30:17,695 - #49 int
INFO  07:30:17,695 - #49 jedan
INFO  07:30:17,695 - #27 =
INFO  07:30:17,695 - #52 1
INFO  07:30:17,695 - #38 ;
INFO  07:30:17,695 - #49 int
INFO  07:30:17,695 - #49 i
INFO  07:30:17,695 - #38 ;
INFO  07:30:17,696 - #49 bool
INFO  07:30:17,696 - #49 ibool
INFO  07:30:17,696 - #38 ;
INFO  07:30:17,696 - #49 int
INFO  07:30:17,696 - #49 niz2
INFO  07:30:17,696 - #38 ;
INFO  07:30:17,696 - #49 int
INFO  07:30:17,696 - #49 niz
INFO  07:30:17,696 - #42 [
INFO  07:30:17,696 - #43 ]
INFO  07:30:17,696 - #38 ;
INFO  07:30:17,696 - #49 int
INFO  07:30:17,697 - #49 a
INFO  07:30:17,697 - #38 ;
INFO  07:30:17,697 - #44 {
INFO  07:30:17,697 - #49 int
INFO  07:30:17,697 - #49 sum
INFO  07:30:17,697 - #40 (
INFO  07:30:17,697 - #49 int
INFO  07:30:17,697 - #49 z
INFO  07:30:17,697 - #39 ,
INFO  07:30:17,697 - #49 int
INFO  07:30:17,697 - #49 d
INFO  07:30:17,697 - #41 )
INFO  07:30:17,698 - #44 {
INFO  07:30:17,698 - #15 return
INFO  07:30:17,698 - #49 z
INFO  07:30:17,698 - #22 +
INFO  07:30:17,698 - #49 d
INFO  07:30:17,699 - #38 ;
INFO  07:30:17,699 - #45 }
INFO  07:30:17,699 - #49 int
INFO  07:30:17,699 - #49 inkrement
INFO  07:30:17,699 - #40 (
INFO  07:30:17,699 - #49 int
INFO  07:30:17,699 - #49 a
INFO  07:30:17,699 - #39 ,
INFO  07:30:17,699 - #49 int
INFO  07:30:17,699 - #49 inc
INFO  07:30:17,699 - #41 )
INFO  07:30:17,700 - #49 int
INFO  07:30:17,700 - #49 pom
INFO  07:30:17,700 - #38 ;
INFO  07:30:17,700 - #44 {
INFO  07:30:17,700 - #5 if
INFO  07:30:17,700 - #40 (
INFO  07:30:17,700 - #49 inc
INFO  07:30:17,700 - #28 ==
INFO  07:30:17,700 - #49 jedan
INFO  07:30:17,701 - #41 )
INFO  07:30:17,701 - #49 pom
INFO  07:30:17,701 - #27 =
INFO  07:30:17,701 - #52 1
INFO  07:30:17,701 - #38 ;
INFO  07:30:17,701 - #6 else
INFO  07:30:17,701 - #5 if
INFO  07:30:17,702 - #40 (
INFO  07:30:17,702 - #49 inc
INFO  07:30:17,702 - #28 ==
INFO  07:30:17,702 - #52 2
INFO  07:30:17,702 - #41 )
INFO  07:30:17,702 - #49 pom
INFO  07:30:17,702 - #27 =
INFO  07:30:17,702 - #49 a
INFO  07:30:17,702 - #38 ;
INFO  07:30:17,702 - #15 return
INFO  07:30:17,702 - #49 sum
INFO  07:30:17,702 - #40 (
INFO  07:30:17,702 - #49 a
INFO  07:30:17,702 - #39 ,
INFO  07:30:17,702 - #49 pom
INFO  07:30:17,702 - #41 )
INFO  07:30:17,702 - #38 ;
INFO  07:30:17,703 - #45 }
INFO  07:30:17,703 - #49 bool
INFO  07:30:17,703 - #49 verify
INFO  07:30:17,703 - #40 (
INFO  07:30:17,703 - #41 )
INFO  07:30:17,703 - #44 {
INFO  07:30:17,703 - #12 print
INFO  07:30:17,703 - #40 (
INFO  07:30:17,703 - #51 v
INFO  07:30:17,703 - #41 )
INFO  07:30:17,704 - #38 ;
INFO  07:30:17,704 - #15 return
INFO  07:30:17,704 - #50 false
INFO  07:30:17,704 - #38 ;
INFO  07:30:17,704 - #45 }
INFO  07:30:17,704 - #14 void
INFO  07:30:17,704 - #49 main
INFO  07:30:17,704 - #40 (
INFO  07:30:17,704 - #41 )
INFO  07:30:17,704 - #44 {
INFO  07:30:17,704 - #5 if
INFO  07:30:17,704 - #40 (
INFO  07:30:17,704 - #52 1
INFO  07:30:17,704 - #29 !=
INFO  07:30:17,704 - #52 1
INFO  07:30:17,704 - #41 )
INFO  07:30:17,705 - #12 print
INFO  07:30:17,705 - #40 (
INFO  07:30:17,705 - #23 -
INFO  07:30:17,705 - #52 6
INFO  07:30:17,705 - #41 )
INFO  07:30:17,705 - #38 ;
INFO  07:30:17,705 - #6 else
INFO  07:30:17,705 - #12 print
INFO  07:30:17,705 - #40 (
INFO  07:30:17,705 - #52 0
INFO  07:30:17,705 - #41 )
INFO  07:30:17,705 - #38 ;
INFO  07:30:17,705 - #49 ibool
INFO  07:30:17,705 - #27 =
INFO  07:30:17,705 - #50 false
INFO  07:30:17,705 - #38 ;
INFO  07:30:17,705 - #49 i
INFO  07:30:17,705 - #27 =
INFO  07:30:17,705 - #52 0
INFO  07:30:17,705 - #38 ;
INFO  07:30:17,705 - #9 do
INFO  07:30:17,705 - #44 {
INFO  07:30:17,706 - #5 if
INFO  07:30:17,706 - #40 (
INFO  07:30:17,706 - #49 i
INFO  07:30:17,706 - #28 ==
INFO  07:30:17,706 - #52 2
INFO  07:30:17,706 - #41 )
INFO  07:30:17,706 - #49 ibool
INFO  07:30:17,706 - #27 =
INFO  07:30:17,706 - #50 true
INFO  07:30:17,706 - #38 ;
INFO  07:30:17,706 - #49 i
INFO  07:30:17,706 - #36 ++
INFO  07:30:17,706 - #38 ;
INFO  07:30:17,706 - #45 }
INFO  07:30:17,706 - #10 while
INFO  07:30:17,706 - #40 (
INFO  07:30:17,706 - #49 i
INFO  07:30:17,706 - #32 <
INFO  07:30:17,706 - #52 5
INFO  07:30:17,707 - #41 )
INFO  07:30:17,707 - #38 ;
INFO  07:30:17,707 - #5 if
INFO  07:30:17,707 - #40 (
INFO  07:30:17,707 - #49 ibool
INFO  07:30:17,707 - #41 )
INFO  07:30:17,707 - #5 if
INFO  07:30:17,707 - #40 (
INFO  07:30:17,707 - #49 i
INFO  07:30:17,707 - #28 ==
INFO  07:30:17,707 - #52 5
INFO  07:30:17,707 - #41 )
INFO  07:30:17,707 - #12 print
INFO  07:30:17,707 - #40 (
INFO  07:30:17,707 - #52 1
INFO  07:30:17,707 - #41 )
INFO  07:30:17,707 - #38 ;
INFO  07:30:17,707 - #6 else
INFO  07:30:17,707 - #12 print
INFO  07:30:17,707 - #40 (
INFO  07:30:17,707 - #23 -
INFO  07:30:17,707 - #52 1
INFO  07:30:17,707 - #41 )
INFO  07:30:17,707 - #38 ;
INFO  07:30:17,707 - #49 a
INFO  07:30:17,707 - #27 =
INFO  07:30:17,707 - #52 2
INFO  07:30:17,707 - #38 ;
INFO  07:30:17,708 - #49 niz
INFO  07:30:17,708 - #27 =
INFO  07:30:17,708 - #11 new
INFO  07:30:17,708 - #49 int
INFO  07:30:17,708 - #42 [
INFO  07:30:17,708 - #52 3
INFO  07:30:17,708 - #43 ]
INFO  07:30:17,708 - #38 ;
INFO  07:30:17,708 - #49 niz
INFO  07:30:17,708 - #42 [
INFO  07:30:17,708 - #52 0
INFO  07:30:17,708 - #43 ]
INFO  07:30:17,708 - #27 =
INFO  07:30:17,708 - #52 1
INFO  07:30:17,708 - #24 *
INFO  07:30:17,708 - #49 a
INFO  07:30:17,709 - #38 ;
INFO  07:30:17,709 - #49 niz
INFO  07:30:17,709 - #42 [
INFO  07:30:17,709 - #52 1
INFO  07:30:17,709 - #43 ]
INFO  07:30:17,709 - #27 =
INFO  07:30:17,709 - #52 2
INFO  07:30:17,709 - #24 *
INFO  07:30:17,709 - #49 a
INFO  07:30:17,709 - #38 ;
INFO  07:30:17,709 - #49 niz
INFO  07:30:17,709 - #42 [
INFO  07:30:17,709 - #52 2
INFO  07:30:17,709 - #43 ]
INFO  07:30:17,709 - #27 =
INFO  07:30:17,709 - #49 sum
INFO  07:30:17,709 - #40 (
INFO  07:30:17,709 - #49 niz
INFO  07:30:17,709 - #42 [
INFO  07:30:17,709 - #52 1
INFO  07:30:17,709 - #43 ]
INFO  07:30:17,709 - #39 ,
INFO  07:30:17,709 - #49 niz
INFO  07:30:17,709 - #42 [
INFO  07:30:17,709 - #52 0
INFO  07:30:17,709 - #43 ]
INFO  07:30:17,709 - #41 )
INFO  07:30:17,709 - #24 *
INFO  07:30:17,709 - #49 a
INFO  07:30:17,709 - #22 +
INFO  07:30:17,709 - #52 1
INFO  07:30:17,710 - #38 ;
INFO  07:30:17,710 - #5 if
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #49 verify
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #35 ||
INFO  07:30:17,710 - #49 niz
INFO  07:30:17,710 - #42 [
INFO  07:30:17,710 - #52 2
INFO  07:30:17,710 - #43 ]
INFO  07:30:17,710 - #28 ==
INFO  07:30:17,710 - #52 4
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #12 print
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #49 ord
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #51 A
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #38 ;
INFO  07:30:17,710 - #6 else
INFO  07:30:17,710 - #12 print
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #49 ord
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #51 a
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #38 ;
INFO  07:30:17,710 - #12 print
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #49 eol
INFO  07:30:17,710 - #41 )
INFO  07:30:17,710 - #38 ;
INFO  07:30:17,710 - #49 i
INFO  07:30:17,710 - #27 =
INFO  07:30:17,710 - #52 0
INFO  07:30:17,710 - #38 ;
INFO  07:30:17,710 - #9 do
INFO  07:30:17,710 - #44 {
INFO  07:30:17,710 - #5 if
INFO  07:30:17,710 - #40 (
INFO  07:30:17,710 - #49 i
INFO  07:30:17,710 - #28 ==
INFO  07:30:17,711 - #52 3
INFO  07:30:17,711 - #41 )
INFO  07:30:17,711 - #44 {
INFO  07:30:17,711 - #49 i
INFO  07:30:17,711 - #36 ++
INFO  07:30:17,711 - #38 ;
INFO  07:30:17,711 - #4 continue
INFO  07:30:17,711 - #38 ;
INFO  07:30:17,711 - #45 }
INFO  07:30:17,711 - #5 if
INFO  07:30:17,711 - #40 (
INFO  07:30:17,711 - #49 i
INFO  07:30:17,711 - #28 ==
INFO  07:30:17,711 - #52 4
INFO  07:30:17,711 - #41 )
INFO  07:30:17,711 - #3 break
INFO  07:30:17,711 - #38 ;
INFO  07:30:17,711 - #49 i
INFO  07:30:17,711 - #27 =
INFO  07:30:17,711 - #49 inkrement
INFO  07:30:17,711 - #40 (
INFO  07:30:17,711 - #49 i
INFO  07:30:17,711 - #39 ,
INFO  07:30:17,711 - #52 1
INFO  07:30:17,711 - #41 )
INFO  07:30:17,711 - #38 ;
INFO  07:30:17,711 - #45 }
INFO  07:30:17,711 - #10 while
INFO  07:30:17,711 - #40 (
INFO  07:30:17,711 - #49 i
INFO  07:30:17,712 - #32 <
INFO  07:30:17,712 - #52 10
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #5 if
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 i
INFO  07:30:17,712 - #28 ==
INFO  07:30:17,712 - #52 3
INFO  07:30:17,712 - #34 &&
INFO  07:30:17,712 - #49 verify
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #12 print
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #23 -
INFO  07:30:17,712 - #52 4
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #6 else
INFO  07:30:17,712 - #12 print
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #52 4
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #13 read
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 0
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #13 read
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 1
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #13 read
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 2
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #12 print
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 eol
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #12 print
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 sum
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 sum
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 0
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #39 ,
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 1
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #39 ,
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 2
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #12 print
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 eol
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #12 print
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 inkrement
INFO  07:30:17,712 - #40 (
INFO  07:30:17,712 - #49 niz
INFO  07:30:17,712 - #42 [
INFO  07:30:17,712 - #52 2
INFO  07:30:17,712 - #43 ]
INFO  07:30:17,712 - #39 ,
INFO  07:30:17,712 - #52 2
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #41 )
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #49 a
INFO  07:30:17,712 - #27 =
INFO  07:30:17,712 - #52 3
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #49 i
INFO  07:30:17,712 - #27 =
INFO  07:30:17,712 - #52 0
INFO  07:30:17,712 - #38 ;
INFO  07:30:17,712 - #9 do
INFO  07:30:17,712 - #44 {
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #27 =
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #24 *
INFO  07:30:17,713 - #52 2
INFO  07:30:17,713 - #24 *
INFO  07:30:17,713 - #49 a
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #36 ++
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #45 }
INFO  07:30:17,713 - #10 while
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #32 <
INFO  07:30:17,713 - #52 3
INFO  07:30:17,713 - #41 )
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #12 print
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #52 0
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #41 )
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #12 print
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #52 1
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #41 )
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #12 print
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #52 2
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #41 )
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #12 print
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 eol
INFO  07:30:17,713 - #41 )
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #27 =
INFO  07:30:17,713 - #52 0
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #49 niz2
INFO  07:30:17,713 - #27 =
INFO  07:30:17,713 - #52 0
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #9 do
INFO  07:30:17,713 - #44 {
INFO  07:30:17,713 - #49 niz2
INFO  07:30:17,713 - #27 =
INFO  07:30:17,713 - #49 niz2
INFO  07:30:17,713 - #22 +
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #24 *
INFO  07:30:17,713 - #49 niz
INFO  07:30:17,713 - #42 [
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #43 ]
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #36 ++
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #45 }
INFO  07:30:17,713 - #10 while
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 i
INFO  07:30:17,713 - #32 <
INFO  07:30:17,713 - #52 3
INFO  07:30:17,713 - #41 )
INFO  07:30:17,713 - #38 ;
INFO  07:30:17,713 - #12 print
INFO  07:30:17,713 - #40 (
INFO  07:30:17,713 - #49 niz2
INFO  07:30:17,713 - #41 )
INFO  07:30:17,714 - #38 ;
INFO  07:30:17,714 - #12 print
INFO  07:30:17,714 - #40 (
INFO  07:30:17,714 - #49 eol
INFO  07:30:17,714 - #41 )
INFO  07:30:17,714 - #38 ;
INFO  07:30:17,714 - #45 }
INFO  07:30:17,714 - #45 }
INFO  07:30:17,718 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:30:17,718 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:30:17,718 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:30:17,718 - Line 25: Using local variable name: pom
INFO  07:30:17,718 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:30:17,718 - Line 26: Using local variable name: pom
INFO  07:30:17,718 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:30:17,718 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:30:17,718 - Line 28: Using local variable name: pom
INFO  07:30:17,718 - Line 28: Method Call detected. Method name: sum
INFO  07:30:17,718 - Line 41: Using global variable name: ibool
INFO  07:30:17,718 - Line 42: Using global variable name: i
INFO  07:30:17,718 - Line 44: Using global variable name: i
INFO  07:30:17,718 - Line 44: Using global variable name: ibool
INFO  07:30:17,718 - Line 45: Using global variable name: i
INFO  07:30:17,718 - Line 46: Using global variable name: i
INFO  07:30:17,718 - Line 48: Using global variable name: ibool
INFO  07:30:17,718 - Line 49: Using global variable name: i
INFO  07:30:17,718 - Line 51: Using global variable name: a
INFO  07:30:17,718 - Line 52: Using global variable name: niz
INFO  07:30:17,718 - Line 53: Using global variable name: niz
INFO  07:30:17,718 - Line 53: Access to array element detected. Array name: niz
INFO  07:30:17,718 - Line 53: Using global variable name: a
INFO  07:30:17,718 - Line 54: Using global variable name: niz
INFO  07:30:17,718 - Line 54: Access to array element detected. Array name: niz
INFO  07:30:17,718 - Line 54: Using global variable name: a
INFO  07:30:17,718 - Line 55: Using global variable name: niz
INFO  07:30:17,718 - Line 55: Access to array element detected. Array name: niz
INFO  07:30:17,718 - Line 55: Using global variable name: niz
INFO  07:30:17,718 - Line 55: Access to array element detected. Array name: niz
INFO  07:30:17,718 - Line 55: Using global variable name: niz
INFO  07:30:17,718 - Line 55: Access to array element detected. Array name: niz
INFO  07:30:17,718 - Line 55: Method Call detected. Method name: sum
INFO  07:30:17,718 - Line 55: Using global variable name: a
INFO  07:30:17,718 - Line 56: Method Call detected. Method name: verify
INFO  07:30:17,718 - Line 56: Using global variable name: niz
INFO  07:30:17,718 - Line 56: Access to array element detected. Array name: niz
INFO  07:30:17,718 - Line 56: Method Call detected. Method name: ord
INFO  07:30:17,718 - Line 57: Method Call detected. Method name: ord
INFO  07:30:17,718 - Line 60: Using global variable name: i
INFO  07:30:17,718 - Line 62: Using global variable name: i
INFO  07:30:17,718 - Line 64: Using global variable name: i
INFO  07:30:17,719 - Line 67: Using global variable name: i
INFO  07:30:17,719 - Line 68: Using global variable name: i
INFO  07:30:17,719 - Line 68: Using global variable name: i
INFO  07:30:17,719 - Line 68: Method Call detected. Method name: inkrement
INFO  07:30:17,719 - Line 69: Using global variable name: i
INFO  07:30:17,719 - Line 71: Using global variable name: i
INFO  07:30:17,719 - Line 71: Method Call detected. Method name: verify
INFO  07:30:17,719 - Line 74: Using global variable name: niz
INFO  07:30:17,719 - Line 74: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 75: Using global variable name: niz
INFO  07:30:17,719 - Line 75: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 76: Using global variable name: niz
INFO  07:30:17,719 - Line 76: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 79: Using global variable name: niz
INFO  07:30:17,719 - Line 79: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 79: Using global variable name: niz
INFO  07:30:17,719 - Line 79: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 79: Method Call detected. Method name: sum
INFO  07:30:17,719 - Line 79: Using global variable name: niz
INFO  07:30:17,719 - Line 79: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 79: Method Call detected. Method name: sum
INFO  07:30:17,719 - Line 82: Using global variable name: niz
INFO  07:30:17,719 - Line 82: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 82: Method Call detected. Method name: inkrement
INFO  07:30:17,719 - Line 84: Using global variable name: a
INFO  07:30:17,719 - Line 85: Using global variable name: i
INFO  07:30:17,719 - Line 87: Using global variable name: i
INFO  07:30:17,719 - Line 87: Using global variable name: niz
INFO  07:30:17,719 - Line 87: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 87: Using global variable name: i
INFO  07:30:17,719 - Line 87: Using global variable name: niz
INFO  07:30:17,719 - Line 87: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 87: Using global variable name: a
INFO  07:30:17,719 - Line 88: Using global variable name: i
INFO  07:30:17,719 - Line 89: Using global variable name: i
INFO  07:30:17,719 - Line 90: Using global variable name: niz
INFO  07:30:17,719 - Line 90: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 91: Using global variable name: niz
INFO  07:30:17,719 - Line 91: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 92: Using global variable name: niz
INFO  07:30:17,719 - Line 92: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 95: Using global variable name: i
INFO  07:30:17,719 - Line 96: Using global variable name: niz2
INFO  07:30:17,719 - Line 98: Using global variable name: niz2
INFO  07:30:17,719 - Line 98: Using global variable name: niz2
INFO  07:30:17,719 - Line 98: Using global variable name: i
INFO  07:30:17,719 - Line 98: Using global variable name: niz
INFO  07:30:17,719 - Line 98: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 98: Using global variable name: i
INFO  07:30:17,719 - Line 98: Using global variable name: niz
INFO  07:30:17,719 - Line 98: Access to array element detected. Array name: niz
INFO  07:30:17,719 - Line 99: Using global variable name: i
INFO  07:30:17,719 - Line 100: Using global variable name: i
INFO  07:30:17,719 - Line 101: Using global variable name: niz2
INFO  07:33:00,988 - #2 program
INFO  07:33:00,988 - #49 test302
INFO  07:33:00,988 - #7 const
INFO  07:33:00,988 - #49 int
INFO  07:33:00,988 - #49 jedan
INFO  07:33:00,989 - #27 =
INFO  07:33:00,989 - #52 1
INFO  07:33:00,989 - #38 ;
INFO  07:33:00,989 - #49 int
INFO  07:33:00,989 - #49 i
INFO  07:33:00,989 - #38 ;
INFO  07:33:00,990 - #49 bool
INFO  07:33:00,990 - #49 ibool
INFO  07:33:00,990 - #38 ;
INFO  07:33:00,990 - #49 int
INFO  07:33:00,990 - #49 niz2
INFO  07:33:00,990 - #38 ;
INFO  07:33:00,990 - #49 int
INFO  07:33:00,990 - #49 niz
INFO  07:33:00,990 - #42 [
INFO  07:33:00,990 - #43 ]
INFO  07:33:00,990 - #38 ;
INFO  07:33:00,990 - #49 int
INFO  07:33:00,990 - #49 a
INFO  07:33:00,990 - #38 ;
INFO  07:33:00,990 - #44 {
INFO  07:33:00,991 - #49 int
INFO  07:33:00,991 - #49 sum
INFO  07:33:00,991 - #40 (
INFO  07:33:00,991 - #49 int
INFO  07:33:00,991 - #49 z
INFO  07:33:00,991 - #39 ,
INFO  07:33:00,991 - #49 int
INFO  07:33:00,991 - #49 d
INFO  07:33:00,991 - #41 )
INFO  07:33:00,991 - #44 {
INFO  07:33:00,992 - #15 return
INFO  07:33:00,992 - #49 z
INFO  07:33:00,992 - #22 +
INFO  07:33:00,992 - #49 d
INFO  07:33:00,992 - #38 ;
INFO  07:33:00,993 - #45 }
INFO  07:33:00,993 - #49 int
INFO  07:33:00,993 - #49 inkrement
INFO  07:33:00,993 - #40 (
INFO  07:33:00,993 - #49 int
INFO  07:33:00,993 - #49 a
INFO  07:33:00,993 - #39 ,
INFO  07:33:00,993 - #49 int
INFO  07:33:00,993 - #49 inc
INFO  07:33:00,993 - #41 )
INFO  07:33:00,993 - #49 int
INFO  07:33:00,993 - #49 pom
INFO  07:33:00,993 - #38 ;
INFO  07:33:00,994 - #44 {
INFO  07:33:00,994 - #5 if
INFO  07:33:00,994 - #40 (
INFO  07:33:00,994 - #49 inc
INFO  07:33:00,994 - #28 ==
INFO  07:33:00,994 - #49 jedan
INFO  07:33:00,994 - #41 )
INFO  07:33:00,994 - #49 pom
INFO  07:33:00,995 - #27 =
INFO  07:33:00,995 - #52 1
INFO  07:33:00,995 - #38 ;
INFO  07:33:00,995 - #6 else
INFO  07:33:00,995 - #5 if
INFO  07:33:00,995 - #40 (
INFO  07:33:00,995 - #49 inc
INFO  07:33:00,995 - #28 ==
INFO  07:33:00,995 - #52 2
INFO  07:33:00,995 - #41 )
INFO  07:33:00,995 - #49 pom
INFO  07:33:00,995 - #27 =
INFO  07:33:00,995 - #49 a
INFO  07:33:00,995 - #38 ;
INFO  07:33:00,995 - #15 return
INFO  07:33:00,995 - #49 sum
INFO  07:33:00,996 - #40 (
INFO  07:33:00,996 - #49 a
INFO  07:33:00,996 - #39 ,
INFO  07:33:00,996 - #49 pom
INFO  07:33:00,996 - #41 )
INFO  07:33:00,996 - #38 ;
INFO  07:33:00,996 - #45 }
INFO  07:33:00,996 - #49 bool
INFO  07:33:00,996 - #49 verify
INFO  07:33:00,996 - #40 (
INFO  07:33:00,996 - #41 )
INFO  07:33:00,997 - #44 {
INFO  07:33:00,997 - #12 print
INFO  07:33:00,997 - #40 (
INFO  07:33:00,997 - #51 v
INFO  07:33:00,997 - #41 )
INFO  07:33:00,997 - #38 ;
INFO  07:33:00,997 - #15 return
INFO  07:33:00,997 - #50 false
INFO  07:33:00,997 - #38 ;
INFO  07:33:00,997 - #45 }
INFO  07:33:00,997 - #14 void
INFO  07:33:00,997 - #49 main
INFO  07:33:00,997 - #40 (
INFO  07:33:00,997 - #41 )
INFO  07:33:00,997 - #44 {
INFO  07:33:00,997 - #5 if
INFO  07:33:00,997 - #40 (
INFO  07:33:00,997 - #52 1
INFO  07:33:00,997 - #29 !=
INFO  07:33:00,998 - #52 1
INFO  07:33:00,998 - #41 )
INFO  07:33:00,998 - #12 print
INFO  07:33:00,998 - #40 (
INFO  07:33:00,998 - #23 -
INFO  07:33:00,998 - #52 6
INFO  07:33:00,998 - #41 )
INFO  07:33:00,998 - #38 ;
INFO  07:33:00,998 - #6 else
INFO  07:33:00,998 - #12 print
INFO  07:33:00,998 - #40 (
INFO  07:33:00,998 - #52 0
INFO  07:33:00,998 - #41 )
INFO  07:33:00,998 - #38 ;
INFO  07:33:00,998 - #49 ibool
INFO  07:33:00,998 - #27 =
INFO  07:33:00,998 - #50 false
INFO  07:33:00,998 - #38 ;
INFO  07:33:00,998 - #49 i
INFO  07:33:00,998 - #27 =
INFO  07:33:00,998 - #52 0
INFO  07:33:00,999 - #38 ;
INFO  07:33:00,999 - #9 do
INFO  07:33:00,999 - #44 {
INFO  07:33:00,999 - #5 if
INFO  07:33:00,999 - #40 (
INFO  07:33:00,999 - #49 i
INFO  07:33:00,999 - #28 ==
INFO  07:33:00,999 - #52 2
INFO  07:33:00,999 - #41 )
INFO  07:33:00,999 - #49 ibool
INFO  07:33:00,999 - #27 =
INFO  07:33:00,999 - #50 true
INFO  07:33:00,999 - #38 ;
INFO  07:33:00,999 - #49 i
INFO  07:33:00,999 - #36 ++
INFO  07:33:00,999 - #38 ;
INFO  07:33:00,999 - #45 }
INFO  07:33:00,999 - #10 while
INFO  07:33:00,999 - #40 (
INFO  07:33:00,999 - #49 i
INFO  07:33:00,999 - #32 <
INFO  07:33:00,999 - #52 5
INFO  07:33:01,000 - #41 )
INFO  07:33:01,000 - #38 ;
INFO  07:33:01,000 - #5 if
INFO  07:33:01,000 - #40 (
INFO  07:33:01,000 - #49 ibool
INFO  07:33:01,000 - #41 )
INFO  07:33:01,000 - #5 if
INFO  07:33:01,000 - #40 (
INFO  07:33:01,000 - #49 i
INFO  07:33:01,000 - #28 ==
INFO  07:33:01,000 - #52 5
INFO  07:33:01,000 - #41 )
INFO  07:33:01,000 - #12 print
INFO  07:33:01,000 - #40 (
INFO  07:33:01,000 - #52 1
INFO  07:33:01,000 - #41 )
INFO  07:33:01,000 - #38 ;
INFO  07:33:01,000 - #6 else
INFO  07:33:01,000 - #12 print
INFO  07:33:01,000 - #40 (
INFO  07:33:01,000 - #23 -
INFO  07:33:01,000 - #52 1
INFO  07:33:01,000 - #41 )
INFO  07:33:01,000 - #38 ;
INFO  07:33:01,000 - #49 a
INFO  07:33:01,000 - #27 =
INFO  07:33:01,000 - #52 2
INFO  07:33:01,001 - #38 ;
INFO  07:33:01,001 - #49 niz
INFO  07:33:01,001 - #27 =
INFO  07:33:01,001 - #11 new
INFO  07:33:01,001 - #49 int
INFO  07:33:01,001 - #42 [
INFO  07:33:01,001 - #52 3
INFO  07:33:01,001 - #43 ]
INFO  07:33:01,001 - #38 ;
INFO  07:33:01,001 - #49 niz
INFO  07:33:01,001 - #42 [
INFO  07:33:01,001 - #52 0
INFO  07:33:01,001 - #43 ]
INFO  07:33:01,001 - #27 =
INFO  07:33:01,001 - #52 1
INFO  07:33:01,001 - #24 *
INFO  07:33:01,001 - #49 a
INFO  07:33:01,002 - #38 ;
INFO  07:33:01,002 - #49 niz
INFO  07:33:01,002 - #42 [
INFO  07:33:01,002 - #52 1
INFO  07:33:01,002 - #43 ]
INFO  07:33:01,002 - #27 =
INFO  07:33:01,002 - #52 2
INFO  07:33:01,002 - #24 *
INFO  07:33:01,002 - #49 a
INFO  07:33:01,002 - #38 ;
INFO  07:33:01,002 - #49 niz
INFO  07:33:01,002 - #42 [
INFO  07:33:01,002 - #52 2
INFO  07:33:01,002 - #43 ]
INFO  07:33:01,002 - #27 =
INFO  07:33:01,002 - #49 sum
INFO  07:33:01,002 - #40 (
INFO  07:33:01,002 - #49 niz
INFO  07:33:01,002 - #42 [
INFO  07:33:01,002 - #52 1
INFO  07:33:01,002 - #43 ]
INFO  07:33:01,002 - #39 ,
INFO  07:33:01,002 - #49 niz
INFO  07:33:01,002 - #42 [
INFO  07:33:01,002 - #52 0
INFO  07:33:01,002 - #43 ]
INFO  07:33:01,002 - #41 )
INFO  07:33:01,002 - #24 *
INFO  07:33:01,002 - #49 a
INFO  07:33:01,002 - #22 +
INFO  07:33:01,002 - #52 1
INFO  07:33:01,002 - #38 ;
INFO  07:33:01,002 - #5 if
INFO  07:33:01,002 - #40 (
INFO  07:33:01,002 - #49 verify
INFO  07:33:01,002 - #40 (
INFO  07:33:01,002 - #41 )
INFO  07:33:01,003 - #35 ||
INFO  07:33:01,003 - #49 niz
INFO  07:33:01,003 - #42 [
INFO  07:33:01,003 - #52 2
INFO  07:33:01,003 - #43 ]
INFO  07:33:01,003 - #28 ==
INFO  07:33:01,003 - #52 4
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #12 print
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #49 ord
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #51 A
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #38 ;
INFO  07:33:01,003 - #6 else
INFO  07:33:01,003 - #12 print
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #49 ord
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #51 a
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #38 ;
INFO  07:33:01,003 - #12 print
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #49 eol
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #38 ;
INFO  07:33:01,003 - #49 i
INFO  07:33:01,003 - #27 =
INFO  07:33:01,003 - #52 0
INFO  07:33:01,003 - #38 ;
INFO  07:33:01,003 - #9 do
INFO  07:33:01,003 - #44 {
INFO  07:33:01,003 - #12 print
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #52 1
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #38 ;
INFO  07:33:01,003 - #5 if
INFO  07:33:01,003 - #40 (
INFO  07:33:01,003 - #49 i
INFO  07:33:01,003 - #28 ==
INFO  07:33:01,003 - #52 3
INFO  07:33:01,003 - #41 )
INFO  07:33:01,003 - #44 {
INFO  07:33:01,004 - #49 i
INFO  07:33:01,004 - #36 ++
INFO  07:33:01,004 - #38 ;
INFO  07:33:01,004 - #4 continue
INFO  07:33:01,004 - #38 ;
INFO  07:33:01,004 - #45 }
INFO  07:33:01,004 - #5 if
INFO  07:33:01,004 - #40 (
INFO  07:33:01,004 - #49 i
INFO  07:33:01,004 - #28 ==
INFO  07:33:01,004 - #52 4
INFO  07:33:01,004 - #41 )
INFO  07:33:01,004 - #3 break
INFO  07:33:01,004 - #38 ;
INFO  07:33:01,004 - #49 i
INFO  07:33:01,004 - #27 =
INFO  07:33:01,004 - #49 inkrement
INFO  07:33:01,004 - #40 (
INFO  07:33:01,004 - #49 i
INFO  07:33:01,004 - #39 ,
INFO  07:33:01,004 - #52 1
INFO  07:33:01,004 - #41 )
INFO  07:33:01,004 - #38 ;
INFO  07:33:01,004 - #45 }
INFO  07:33:01,004 - #10 while
INFO  07:33:01,004 - #40 (
INFO  07:33:01,004 - #49 i
INFO  07:33:01,004 - #32 <
INFO  07:33:01,004 - #52 10
INFO  07:33:01,004 - #41 )
INFO  07:33:01,004 - #38 ;
INFO  07:33:01,004 - #5 if
INFO  07:33:01,004 - #40 (
INFO  07:33:01,004 - #49 i
INFO  07:33:01,005 - #28 ==
INFO  07:33:01,005 - #52 3
INFO  07:33:01,005 - #34 &&
INFO  07:33:01,005 - #49 verify
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #12 print
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #23 -
INFO  07:33:01,005 - #52 4
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #6 else
INFO  07:33:01,005 - #12 print
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #52 4
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #13 read
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 0
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #13 read
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 1
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #13 read
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 2
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #12 print
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 eol
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #12 print
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 sum
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 sum
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 0
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #39 ,
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 1
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #39 ,
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 2
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #12 print
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 eol
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #12 print
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 inkrement
INFO  07:33:01,005 - #40 (
INFO  07:33:01,005 - #49 niz
INFO  07:33:01,005 - #42 [
INFO  07:33:01,005 - #52 2
INFO  07:33:01,005 - #43 ]
INFO  07:33:01,005 - #39 ,
INFO  07:33:01,005 - #52 2
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #41 )
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #49 a
INFO  07:33:01,005 - #27 =
INFO  07:33:01,005 - #52 3
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #49 i
INFO  07:33:01,005 - #27 =
INFO  07:33:01,005 - #52 0
INFO  07:33:01,005 - #38 ;
INFO  07:33:01,005 - #9 do
INFO  07:33:01,006 - #44 {
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #27 =
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #24 *
INFO  07:33:01,006 - #52 2
INFO  07:33:01,006 - #24 *
INFO  07:33:01,006 - #49 a
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #36 ++
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #45 }
INFO  07:33:01,006 - #10 while
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #32 <
INFO  07:33:01,006 - #52 3
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #12 print
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #52 0
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #12 print
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #52 1
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #12 print
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #52 2
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #12 print
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 eol
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #27 =
INFO  07:33:01,006 - #52 0
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #49 niz2
INFO  07:33:01,006 - #27 =
INFO  07:33:01,006 - #52 0
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #9 do
INFO  07:33:01,006 - #44 {
INFO  07:33:01,006 - #49 niz2
INFO  07:33:01,006 - #27 =
INFO  07:33:01,006 - #49 niz2
INFO  07:33:01,006 - #22 +
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #24 *
INFO  07:33:01,006 - #49 niz
INFO  07:33:01,006 - #42 [
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #43 ]
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #36 ++
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #45 }
INFO  07:33:01,006 - #10 while
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 i
INFO  07:33:01,006 - #32 <
INFO  07:33:01,006 - #52 3
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #12 print
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 niz2
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #12 print
INFO  07:33:01,006 - #40 (
INFO  07:33:01,006 - #49 eol
INFO  07:33:01,006 - #41 )
INFO  07:33:01,006 - #38 ;
INFO  07:33:01,006 - #45 }
INFO  07:33:01,006 - #45 }
INFO  07:33:01,011 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:33:01,011 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:33:01,011 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:33:01,011 - Line 25: Using local variable name: pom
INFO  07:33:01,011 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:33:01,011 - Line 26: Using local variable name: pom
INFO  07:33:01,011 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:33:01,011 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:33:01,011 - Line 28: Using local variable name: pom
INFO  07:33:01,011 - Line 28: Method Call detected. Method name: sum
INFO  07:33:01,011 - Line 41: Using global variable name: ibool
INFO  07:33:01,011 - Line 42: Using global variable name: i
INFO  07:33:01,011 - Line 44: Using global variable name: i
INFO  07:33:01,011 - Line 44: Using global variable name: ibool
INFO  07:33:01,011 - Line 45: Using global variable name: i
INFO  07:33:01,011 - Line 46: Using global variable name: i
INFO  07:33:01,011 - Line 48: Using global variable name: ibool
INFO  07:33:01,011 - Line 49: Using global variable name: i
INFO  07:33:01,011 - Line 51: Using global variable name: a
INFO  07:33:01,011 - Line 52: Using global variable name: niz
INFO  07:33:01,011 - Line 53: Using global variable name: niz
INFO  07:33:01,011 - Line 53: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 53: Using global variable name: a
INFO  07:33:01,011 - Line 54: Using global variable name: niz
INFO  07:33:01,011 - Line 54: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 54: Using global variable name: a
INFO  07:33:01,011 - Line 55: Using global variable name: niz
INFO  07:33:01,011 - Line 55: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 55: Using global variable name: niz
INFO  07:33:01,011 - Line 55: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 55: Using global variable name: niz
INFO  07:33:01,011 - Line 55: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 55: Method Call detected. Method name: sum
INFO  07:33:01,011 - Line 55: Using global variable name: a
INFO  07:33:01,011 - Line 56: Method Call detected. Method name: verify
INFO  07:33:01,011 - Line 56: Using global variable name: niz
INFO  07:33:01,011 - Line 56: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 56: Method Call detected. Method name: ord
INFO  07:33:01,011 - Line 57: Method Call detected. Method name: ord
INFO  07:33:01,011 - Line 60: Using global variable name: i
INFO  07:33:01,011 - Line 63: Using global variable name: i
INFO  07:33:01,011 - Line 65: Using global variable name: i
INFO  07:33:01,011 - Line 68: Using global variable name: i
INFO  07:33:01,011 - Line 69: Using global variable name: i
INFO  07:33:01,011 - Line 69: Using global variable name: i
INFO  07:33:01,011 - Line 69: Method Call detected. Method name: inkrement
INFO  07:33:01,011 - Line 70: Using global variable name: i
INFO  07:33:01,011 - Line 72: Using global variable name: i
INFO  07:33:01,011 - Line 72: Method Call detected. Method name: verify
INFO  07:33:01,011 - Line 75: Using global variable name: niz
INFO  07:33:01,011 - Line 75: Access to array element detected. Array name: niz
INFO  07:33:01,011 - Line 76: Using global variable name: niz
INFO  07:33:01,012 - Line 76: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 77: Using global variable name: niz
INFO  07:33:01,012 - Line 77: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 80: Using global variable name: niz
INFO  07:33:01,012 - Line 80: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 80: Using global variable name: niz
INFO  07:33:01,012 - Line 80: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 80: Method Call detected. Method name: sum
INFO  07:33:01,012 - Line 80: Using global variable name: niz
INFO  07:33:01,012 - Line 80: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 80: Method Call detected. Method name: sum
INFO  07:33:01,012 - Line 83: Using global variable name: niz
INFO  07:33:01,012 - Line 83: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 83: Method Call detected. Method name: inkrement
INFO  07:33:01,012 - Line 85: Using global variable name: a
INFO  07:33:01,012 - Line 86: Using global variable name: i
INFO  07:33:01,012 - Line 88: Using global variable name: i
INFO  07:33:01,012 - Line 88: Using global variable name: niz
INFO  07:33:01,012 - Line 88: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 88: Using global variable name: i
INFO  07:33:01,012 - Line 88: Using global variable name: niz
INFO  07:33:01,012 - Line 88: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 88: Using global variable name: a
INFO  07:33:01,012 - Line 89: Using global variable name: i
INFO  07:33:01,012 - Line 90: Using global variable name: i
INFO  07:33:01,012 - Line 91: Using global variable name: niz
INFO  07:33:01,012 - Line 91: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 92: Using global variable name: niz
INFO  07:33:01,012 - Line 92: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 93: Using global variable name: niz
INFO  07:33:01,012 - Line 93: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 96: Using global variable name: i
INFO  07:33:01,012 - Line 97: Using global variable name: niz2
INFO  07:33:01,012 - Line 99: Using global variable name: niz2
INFO  07:33:01,012 - Line 99: Using global variable name: niz2
INFO  07:33:01,012 - Line 99: Using global variable name: i
INFO  07:33:01,012 - Line 99: Using global variable name: niz
INFO  07:33:01,012 - Line 99: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 99: Using global variable name: i
INFO  07:33:01,012 - Line 99: Using global variable name: niz
INFO  07:33:01,012 - Line 99: Access to array element detected. Array name: niz
INFO  07:33:01,012 - Line 100: Using global variable name: i
INFO  07:33:01,012 - Line 101: Using global variable name: i
INFO  07:33:01,013 - Line 102: Using global variable name: niz2
INFO  07:33:58,522 - #2 program
INFO  07:33:58,522 - #49 test302
INFO  07:33:58,522 - #7 const
INFO  07:33:58,522 - #49 int
INFO  07:33:58,522 - #49 jedan
INFO  07:33:58,523 - #27 =
INFO  07:33:58,523 - #52 1
INFO  07:33:58,523 - #38 ;
INFO  07:33:58,523 - #49 int
INFO  07:33:58,523 - #49 i
INFO  07:33:58,523 - #38 ;
INFO  07:33:58,523 - #49 bool
INFO  07:33:58,524 - #49 ibool
INFO  07:33:58,524 - #38 ;
INFO  07:33:58,524 - #49 int
INFO  07:33:58,524 - #49 niz2
INFO  07:33:58,524 - #38 ;
INFO  07:33:58,524 - #49 int
INFO  07:33:58,524 - #49 niz
INFO  07:33:58,524 - #42 [
INFO  07:33:58,524 - #43 ]
INFO  07:33:58,524 - #38 ;
INFO  07:33:58,524 - #49 int
INFO  07:33:58,524 - #49 a
INFO  07:33:58,524 - #38 ;
INFO  07:33:58,524 - #44 {
INFO  07:33:58,524 - #49 int
INFO  07:33:58,525 - #49 sum
INFO  07:33:58,525 - #40 (
INFO  07:33:58,525 - #49 int
INFO  07:33:58,525 - #49 z
INFO  07:33:58,525 - #39 ,
INFO  07:33:58,525 - #49 int
INFO  07:33:58,525 - #49 d
INFO  07:33:58,525 - #41 )
INFO  07:33:58,525 - #44 {
INFO  07:33:58,526 - #15 return
INFO  07:33:58,526 - #49 z
INFO  07:33:58,526 - #22 +
INFO  07:33:58,526 - #49 d
INFO  07:33:58,526 - #38 ;
INFO  07:33:58,526 - #45 }
INFO  07:33:58,526 - #49 int
INFO  07:33:58,527 - #49 inkrement
INFO  07:33:58,527 - #40 (
INFO  07:33:58,527 - #49 int
INFO  07:33:58,527 - #49 a
INFO  07:33:58,527 - #39 ,
INFO  07:33:58,527 - #49 int
INFO  07:33:58,527 - #49 inc
INFO  07:33:58,527 - #41 )
INFO  07:33:58,527 - #49 int
INFO  07:33:58,527 - #49 pom
INFO  07:33:58,527 - #38 ;
INFO  07:33:58,527 - #44 {
INFO  07:33:58,528 - #5 if
INFO  07:33:58,528 - #40 (
INFO  07:33:58,528 - #49 inc
INFO  07:33:58,528 - #28 ==
INFO  07:33:58,528 - #49 jedan
INFO  07:33:58,528 - #41 )
INFO  07:33:58,528 - #49 pom
INFO  07:33:58,528 - #27 =
INFO  07:33:58,528 - #52 1
INFO  07:33:58,528 - #38 ;
INFO  07:33:58,529 - #6 else
INFO  07:33:58,529 - #5 if
INFO  07:33:58,529 - #40 (
INFO  07:33:58,529 - #49 inc
INFO  07:33:58,529 - #28 ==
INFO  07:33:58,529 - #52 2
INFO  07:33:58,529 - #41 )
INFO  07:33:58,529 - #49 pom
INFO  07:33:58,529 - #27 =
INFO  07:33:58,529 - #49 a
INFO  07:33:58,529 - #38 ;
INFO  07:33:58,529 - #15 return
INFO  07:33:58,529 - #49 sum
INFO  07:33:58,529 - #40 (
INFO  07:33:58,529 - #49 a
INFO  07:33:58,529 - #39 ,
INFO  07:33:58,529 - #49 pom
INFO  07:33:58,529 - #41 )
INFO  07:33:58,530 - #38 ;
INFO  07:33:58,530 - #45 }
INFO  07:33:58,530 - #49 bool
INFO  07:33:58,530 - #49 verify
INFO  07:33:58,530 - #40 (
INFO  07:33:58,530 - #41 )
INFO  07:33:58,530 - #44 {
INFO  07:33:58,530 - #12 print
INFO  07:33:58,530 - #40 (
INFO  07:33:58,530 - #51 v
INFO  07:33:58,530 - #41 )
INFO  07:33:58,531 - #38 ;
INFO  07:33:58,531 - #15 return
INFO  07:33:58,531 - #50 false
INFO  07:33:58,531 - #38 ;
INFO  07:33:58,531 - #45 }
INFO  07:33:58,531 - #14 void
INFO  07:33:58,531 - #49 main
INFO  07:33:58,531 - #40 (
INFO  07:33:58,531 - #41 )
INFO  07:33:58,531 - #44 {
INFO  07:33:58,531 - #49 i
INFO  07:33:58,531 - #27 =
INFO  07:33:58,531 - #52 0
INFO  07:33:58,531 - #38 ;
INFO  07:33:58,531 - #9 do
INFO  07:33:58,531 - #44 {
INFO  07:33:58,531 - #12 print
INFO  07:33:58,532 - #40 (
INFO  07:33:58,532 - #52 1
INFO  07:33:58,532 - #41 )
INFO  07:33:58,532 - #38 ;
INFO  07:33:58,532 - #5 if
INFO  07:33:58,532 - #40 (
INFO  07:33:58,532 - #49 i
INFO  07:33:58,532 - #28 ==
INFO  07:33:58,532 - #52 3
INFO  07:33:58,532 - #41 )
INFO  07:33:58,532 - #44 {
INFO  07:33:58,532 - #49 i
INFO  07:33:58,532 - #36 ++
INFO  07:33:58,532 - #38 ;
INFO  07:33:58,532 - #4 continue
INFO  07:33:58,532 - #38 ;
INFO  07:33:58,532 - #45 }
INFO  07:33:58,532 - #5 if
INFO  07:33:58,532 - #40 (
INFO  07:33:58,533 - #49 i
INFO  07:33:58,533 - #28 ==
INFO  07:33:58,533 - #52 4
INFO  07:33:58,533 - #41 )
INFO  07:33:58,533 - #3 break
INFO  07:33:58,533 - #38 ;
INFO  07:33:58,533 - #49 i
INFO  07:33:58,533 - #27 =
INFO  07:33:58,533 - #49 inkrement
INFO  07:33:58,533 - #40 (
INFO  07:33:58,533 - #49 i
INFO  07:33:58,533 - #39 ,
INFO  07:33:58,533 - #52 1
INFO  07:33:58,533 - #41 )
INFO  07:33:58,533 - #38 ;
INFO  07:33:58,533 - #45 }
INFO  07:33:58,533 - #10 while
INFO  07:33:58,533 - #40 (
INFO  07:33:58,533 - #49 i
INFO  07:33:58,533 - #32 <
INFO  07:33:58,533 - #52 10
INFO  07:33:58,533 - #41 )
INFO  07:33:58,534 - #38 ;
INFO  07:33:58,534 - #5 if
INFO  07:33:58,534 - #40 (
INFO  07:33:58,534 - #49 i
INFO  07:33:58,534 - #28 ==
INFO  07:33:58,534 - #52 3
INFO  07:33:58,534 - #34 &&
INFO  07:33:58,534 - #49 verify
INFO  07:33:58,534 - #40 (
INFO  07:33:58,534 - #41 )
INFO  07:33:58,534 - #41 )
INFO  07:33:58,534 - #12 print
INFO  07:33:58,534 - #40 (
INFO  07:33:58,534 - #23 -
INFO  07:33:58,534 - #52 4
INFO  07:33:58,534 - #41 )
INFO  07:33:58,534 - #38 ;
INFO  07:33:58,534 - #6 else
INFO  07:33:58,534 - #12 print
INFO  07:33:58,534 - #40 (
INFO  07:33:58,534 - #52 4
INFO  07:33:58,534 - #41 )
INFO  07:33:58,534 - #38 ;
INFO  07:33:58,534 - #45 }
INFO  07:33:58,534 - #45 }
INFO  07:33:58,538 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:33:58,538 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:33:58,538 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:33:58,539 - Line 25: Using local variable name: pom
INFO  07:33:58,539 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:33:58,539 - Line 26: Using local variable name: pom
INFO  07:33:58,539 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:33:58,539 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:33:58,539 - Line 28: Using local variable name: pom
INFO  07:33:58,539 - Line 28: Method Call detected. Method name: sum
INFO  07:33:58,539 - Line 38: Using global variable name: i
INFO  07:33:58,539 - Line 41: Using global variable name: i
INFO  07:33:58,539 - Line 43: Using global variable name: i
INFO  07:33:58,539 - Line 46: Using global variable name: i
INFO  07:33:58,539 - Line 47: Using global variable name: i
INFO  07:33:58,539 - Line 47: Using global variable name: i
INFO  07:33:58,539 - Line 47: Method Call detected. Method name: inkrement
INFO  07:33:58,539 - Line 48: Using global variable name: i
INFO  07:33:58,539 - Line 50: Using global variable name: i
INFO  07:33:58,539 - Line 50: Method Call detected. Method name: verify
INFO  07:34:31,351 - #2 program
INFO  07:34:31,351 - #49 test302
INFO  07:34:31,352 - #7 const
INFO  07:34:31,352 - #49 int
INFO  07:34:31,352 - #49 jedan
INFO  07:34:31,352 - #27 =
INFO  07:34:31,352 - #52 1
INFO  07:34:31,352 - #38 ;
INFO  07:34:31,352 - #49 int
INFO  07:34:31,353 - #49 i
INFO  07:34:31,353 - #38 ;
INFO  07:34:31,353 - #49 bool
INFO  07:34:31,353 - #49 ibool
INFO  07:34:31,353 - #38 ;
INFO  07:34:31,353 - #49 int
INFO  07:34:31,353 - #49 niz2
INFO  07:34:31,353 - #38 ;
INFO  07:34:31,353 - #49 int
INFO  07:34:31,353 - #49 niz
INFO  07:34:31,353 - #42 [
INFO  07:34:31,353 - #43 ]
INFO  07:34:31,354 - #38 ;
INFO  07:34:31,354 - #49 int
INFO  07:34:31,354 - #49 a
INFO  07:34:31,354 - #38 ;
INFO  07:34:31,354 - #44 {
INFO  07:34:31,354 - #49 int
INFO  07:34:31,354 - #49 sum
INFO  07:34:31,354 - #40 (
INFO  07:34:31,354 - #49 int
INFO  07:34:31,354 - #49 z
INFO  07:34:31,354 - #39 ,
INFO  07:34:31,355 - #49 int
INFO  07:34:31,355 - #49 d
INFO  07:34:31,355 - #41 )
INFO  07:34:31,355 - #44 {
INFO  07:34:31,355 - #15 return
INFO  07:34:31,355 - #49 z
INFO  07:34:31,355 - #22 +
INFO  07:34:31,355 - #49 d
INFO  07:34:31,356 - #38 ;
INFO  07:34:31,356 - #45 }
INFO  07:34:31,356 - #49 int
INFO  07:34:31,356 - #49 inkrement
INFO  07:34:31,356 - #40 (
INFO  07:34:31,356 - #49 int
INFO  07:34:31,356 - #49 a
INFO  07:34:31,356 - #39 ,
INFO  07:34:31,356 - #49 int
INFO  07:34:31,356 - #49 inc
INFO  07:34:31,356 - #41 )
INFO  07:34:31,357 - #49 int
INFO  07:34:31,357 - #49 pom
INFO  07:34:31,357 - #38 ;
INFO  07:34:31,357 - #44 {
INFO  07:34:31,357 - #5 if
INFO  07:34:31,357 - #40 (
INFO  07:34:31,357 - #49 inc
INFO  07:34:31,357 - #28 ==
INFO  07:34:31,357 - #49 jedan
INFO  07:34:31,357 - #41 )
INFO  07:34:31,358 - #49 pom
INFO  07:34:31,358 - #27 =
INFO  07:34:31,358 - #52 1
INFO  07:34:31,358 - #38 ;
INFO  07:34:31,358 - #6 else
INFO  07:34:31,358 - #5 if
INFO  07:34:31,358 - #40 (
INFO  07:34:31,358 - #49 inc
INFO  07:34:31,358 - #28 ==
INFO  07:34:31,358 - #52 2
INFO  07:34:31,358 - #41 )
INFO  07:34:31,358 - #49 pom
INFO  07:34:31,359 - #27 =
INFO  07:34:31,359 - #49 a
INFO  07:34:31,359 - #38 ;
INFO  07:34:31,359 - #15 return
INFO  07:34:31,359 - #49 sum
INFO  07:34:31,359 - #40 (
INFO  07:34:31,359 - #49 a
INFO  07:34:31,359 - #39 ,
INFO  07:34:31,359 - #49 pom
INFO  07:34:31,359 - #41 )
INFO  07:34:31,359 - #38 ;
INFO  07:34:31,360 - #45 }
INFO  07:34:31,360 - #49 bool
INFO  07:34:31,360 - #49 verify
INFO  07:34:31,360 - #40 (
INFO  07:34:31,360 - #41 )
INFO  07:34:31,360 - #44 {
INFO  07:34:31,360 - #12 print
INFO  07:34:31,360 - #40 (
INFO  07:34:31,360 - #51 v
INFO  07:34:31,360 - #41 )
INFO  07:34:31,360 - #38 ;
INFO  07:34:31,360 - #15 return
INFO  07:34:31,360 - #50 false
INFO  07:34:31,360 - #38 ;
INFO  07:34:31,360 - #45 }
INFO  07:34:31,360 - #14 void
INFO  07:34:31,360 - #49 main
INFO  07:34:31,361 - #40 (
INFO  07:34:31,361 - #41 )
INFO  07:34:31,361 - #44 {
INFO  07:34:31,361 - #49 i
INFO  07:34:31,361 - #27 =
INFO  07:34:31,361 - #52 0
INFO  07:34:31,361 - #38 ;
INFO  07:34:31,361 - #9 do
INFO  07:34:31,361 - #44 {
INFO  07:34:31,361 - #12 print
INFO  07:34:31,361 - #40 (
INFO  07:34:31,361 - #52 1
INFO  07:34:31,361 - #41 )
INFO  07:34:31,361 - #38 ;
INFO  07:34:31,361 - #5 if
INFO  07:34:31,361 - #40 (
INFO  07:34:31,361 - #49 i
INFO  07:34:31,361 - #28 ==
INFO  07:34:31,361 - #52 3
INFO  07:34:31,361 - #41 )
INFO  07:34:31,361 - #44 {
INFO  07:34:31,362 - #49 i
INFO  07:34:31,362 - #36 ++
INFO  07:34:31,362 - #38 ;
INFO  07:34:31,362 - #4 continue
INFO  07:34:31,362 - #38 ;
INFO  07:34:31,362 - #45 }
INFO  07:34:31,362 - #5 if
INFO  07:34:31,362 - #40 (
INFO  07:34:31,362 - #49 i
INFO  07:34:31,362 - #28 ==
INFO  07:34:31,362 - #52 4
INFO  07:34:31,362 - #41 )
INFO  07:34:31,362 - #3 break
INFO  07:34:31,362 - #38 ;
INFO  07:34:31,362 - #49 i
INFO  07:34:31,362 - #27 =
INFO  07:34:31,362 - #49 inkrement
INFO  07:34:31,362 - #40 (
INFO  07:34:31,362 - #49 i
INFO  07:34:31,362 - #39 ,
INFO  07:34:31,363 - #52 1
INFO  07:34:31,363 - #41 )
INFO  07:34:31,363 - #38 ;
INFO  07:34:31,363 - #45 }
INFO  07:34:31,363 - #10 while
INFO  07:34:31,363 - #40 (
INFO  07:34:31,363 - #49 i
INFO  07:34:31,363 - #32 <
INFO  07:34:31,363 - #52 10
INFO  07:34:31,363 - #41 )
INFO  07:34:31,363 - #38 ;
INFO  07:34:31,363 - #5 if
INFO  07:34:31,363 - #40 (
INFO  07:34:31,363 - #49 i
INFO  07:34:31,363 - #28 ==
INFO  07:34:31,363 - #52 3
INFO  07:34:31,363 - #34 &&
INFO  07:34:31,363 - #49 verify
INFO  07:34:31,363 - #40 (
INFO  07:34:31,363 - #41 )
INFO  07:34:31,364 - #41 )
INFO  07:34:31,364 - #12 print
INFO  07:34:31,364 - #40 (
INFO  07:34:31,364 - #23 -
INFO  07:34:31,364 - #52 4
INFO  07:34:31,364 - #41 )
INFO  07:34:31,364 - #38 ;
INFO  07:34:31,364 - #6 else
INFO  07:34:31,364 - #12 print
INFO  07:34:31,364 - #40 (
INFO  07:34:31,364 - #52 4
INFO  07:34:31,364 - #41 )
INFO  07:34:31,364 - #38 ;
INFO  07:34:31,364 - #13 read
INFO  07:34:31,364 - #40 (
INFO  07:34:31,364 - #49 niz
INFO  07:34:31,364 - #42 [
INFO  07:34:31,364 - #52 0
INFO  07:34:31,364 - #43 ]
INFO  07:34:31,364 - #41 )
INFO  07:34:31,364 - #38 ;
INFO  07:34:31,364 - #13 read
INFO  07:34:31,364 - #40 (
INFO  07:34:31,364 - #49 niz
INFO  07:34:31,364 - #42 [
INFO  07:34:31,364 - #52 1
INFO  07:34:31,364 - #43 ]
INFO  07:34:31,364 - #41 )
INFO  07:34:31,364 - #38 ;
INFO  07:34:31,365 - #13 read
INFO  07:34:31,365 - #40 (
INFO  07:34:31,365 - #49 niz
INFO  07:34:31,365 - #42 [
INFO  07:34:31,365 - #52 2
INFO  07:34:31,365 - #43 ]
INFO  07:34:31,365 - #41 )
INFO  07:34:31,365 - #38 ;
INFO  07:34:31,365 - #12 print
INFO  07:34:31,365 - #40 (
INFO  07:34:31,365 - #49 eol
INFO  07:34:31,365 - #41 )
INFO  07:34:31,365 - #38 ;
INFO  07:34:31,365 - #12 print
INFO  07:34:31,365 - #40 (
INFO  07:34:31,365 - #49 sum
INFO  07:34:31,365 - #40 (
INFO  07:34:31,365 - #49 sum
INFO  07:34:31,365 - #40 (
INFO  07:34:31,365 - #49 niz
INFO  07:34:31,365 - #42 [
INFO  07:34:31,365 - #52 0
INFO  07:34:31,365 - #43 ]
INFO  07:34:31,365 - #39 ,
INFO  07:34:31,365 - #49 niz
INFO  07:34:31,365 - #42 [
INFO  07:34:31,365 - #52 1
INFO  07:34:31,365 - #43 ]
INFO  07:34:31,365 - #41 )
INFO  07:34:31,365 - #39 ,
INFO  07:34:31,365 - #49 niz
INFO  07:34:31,365 - #42 [
INFO  07:34:31,365 - #52 2
INFO  07:34:31,365 - #43 ]
INFO  07:34:31,365 - #41 )
INFO  07:34:31,365 - #41 )
INFO  07:34:31,365 - #38 ;
INFO  07:34:31,365 - #12 print
INFO  07:34:31,365 - #40 (
INFO  07:34:31,365 - #49 eol
INFO  07:34:31,365 - #41 )
INFO  07:34:31,365 - #38 ;
INFO  07:34:31,365 - #12 print
INFO  07:34:31,365 - #40 (
INFO  07:34:31,366 - #49 inkrement
INFO  07:34:31,366 - #40 (
INFO  07:34:31,366 - #49 niz
INFO  07:34:31,366 - #42 [
INFO  07:34:31,366 - #52 2
INFO  07:34:31,366 - #43 ]
INFO  07:34:31,366 - #39 ,
INFO  07:34:31,366 - #52 2
INFO  07:34:31,366 - #41 )
INFO  07:34:31,366 - #41 )
INFO  07:34:31,366 - #38 ;
INFO  07:34:31,366 - #49 a
INFO  07:34:31,366 - #27 =
INFO  07:34:31,366 - #52 3
INFO  07:34:31,366 - #38 ;
INFO  07:34:31,366 - #49 i
INFO  07:34:31,366 - #27 =
INFO  07:34:31,366 - #52 0
INFO  07:34:31,366 - #38 ;
INFO  07:34:31,366 - #9 do
INFO  07:34:31,366 - #44 {
INFO  07:34:31,366 - #49 niz
INFO  07:34:31,366 - #42 [
INFO  07:34:31,366 - #49 i
INFO  07:34:31,366 - #43 ]
INFO  07:34:31,366 - #27 =
INFO  07:34:31,366 - #49 niz
INFO  07:34:31,366 - #42 [
INFO  07:34:31,366 - #49 i
INFO  07:34:31,366 - #43 ]
INFO  07:34:31,366 - #24 *
INFO  07:34:31,366 - #52 2
INFO  07:34:31,367 - #24 *
INFO  07:34:31,367 - #49 a
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #49 i
INFO  07:34:31,367 - #36 ++
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #45 }
INFO  07:34:31,367 - #10 while
INFO  07:34:31,367 - #40 (
INFO  07:34:31,367 - #49 i
INFO  07:34:31,367 - #32 <
INFO  07:34:31,367 - #52 3
INFO  07:34:31,367 - #41 )
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #12 print
INFO  07:34:31,367 - #40 (
INFO  07:34:31,367 - #49 niz
INFO  07:34:31,367 - #42 [
INFO  07:34:31,367 - #52 0
INFO  07:34:31,367 - #43 ]
INFO  07:34:31,367 - #41 )
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #12 print
INFO  07:34:31,367 - #40 (
INFO  07:34:31,367 - #49 niz
INFO  07:34:31,367 - #42 [
INFO  07:34:31,367 - #52 1
INFO  07:34:31,367 - #43 ]
INFO  07:34:31,367 - #41 )
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #12 print
INFO  07:34:31,367 - #40 (
INFO  07:34:31,367 - #49 niz
INFO  07:34:31,367 - #42 [
INFO  07:34:31,367 - #52 2
INFO  07:34:31,367 - #43 ]
INFO  07:34:31,367 - #41 )
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #12 print
INFO  07:34:31,367 - #40 (
INFO  07:34:31,367 - #49 eol
INFO  07:34:31,367 - #41 )
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #49 i
INFO  07:34:31,367 - #27 =
INFO  07:34:31,367 - #52 0
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #49 niz2
INFO  07:34:31,367 - #27 =
INFO  07:34:31,367 - #52 0
INFO  07:34:31,367 - #38 ;
INFO  07:34:31,367 - #9 do
INFO  07:34:31,368 - #44 {
INFO  07:34:31,368 - #49 niz2
INFO  07:34:31,368 - #27 =
INFO  07:34:31,368 - #49 niz2
INFO  07:34:31,368 - #22 +
INFO  07:34:31,368 - #49 niz
INFO  07:34:31,368 - #42 [
INFO  07:34:31,368 - #49 i
INFO  07:34:31,368 - #43 ]
INFO  07:34:31,368 - #24 *
INFO  07:34:31,368 - #49 niz
INFO  07:34:31,368 - #42 [
INFO  07:34:31,368 - #49 i
INFO  07:34:31,368 - #43 ]
INFO  07:34:31,368 - #38 ;
INFO  07:34:31,368 - #49 i
INFO  07:34:31,368 - #36 ++
INFO  07:34:31,368 - #38 ;
INFO  07:34:31,368 - #45 }
INFO  07:34:31,368 - #10 while
INFO  07:34:31,368 - #40 (
INFO  07:34:31,368 - #49 i
INFO  07:34:31,368 - #32 <
INFO  07:34:31,368 - #52 3
INFO  07:34:31,368 - #41 )
INFO  07:34:31,368 - #38 ;
INFO  07:34:31,368 - #12 print
INFO  07:34:31,368 - #40 (
INFO  07:34:31,368 - #49 niz2
INFO  07:34:31,368 - #41 )
INFO  07:34:31,368 - #38 ;
INFO  07:34:31,368 - #12 print
INFO  07:34:31,368 - #40 (
INFO  07:34:31,368 - #49 eol
INFO  07:34:31,368 - #41 )
INFO  07:34:31,368 - #38 ;
INFO  07:34:31,368 - #45 }
INFO  07:34:31,368 - #45 }
INFO  07:34:31,372 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:34:31,372 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:34:31,372 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:34:31,372 - Line 25: Using local variable name: pom
INFO  07:34:31,372 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:34:31,372 - Line 26: Using local variable name: pom
INFO  07:34:31,372 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:34:31,372 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:34:31,372 - Line 28: Using local variable name: pom
INFO  07:34:31,372 - Line 28: Method Call detected. Method name: sum
INFO  07:34:31,372 - Line 39: Using global variable name: i
INFO  07:34:31,372 - Line 42: Using global variable name: i
INFO  07:34:31,372 - Line 44: Using global variable name: i
INFO  07:34:31,372 - Line 47: Using global variable name: i
INFO  07:34:31,372 - Line 48: Using global variable name: i
INFO  07:34:31,372 - Line 48: Using global variable name: i
INFO  07:34:31,372 - Line 48: Method Call detected. Method name: inkrement
INFO  07:34:31,372 - Line 49: Using global variable name: i
INFO  07:34:31,372 - Line 51: Using global variable name: i
INFO  07:34:31,372 - Line 51: Method Call detected. Method name: verify
INFO  07:34:31,372 - Line 54: Using global variable name: niz
INFO  07:34:31,373 - Line 54: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 55: Using global variable name: niz
INFO  07:34:31,373 - Line 55: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 56: Using global variable name: niz
INFO  07:34:31,373 - Line 56: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 59: Using global variable name: niz
INFO  07:34:31,373 - Line 59: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 59: Using global variable name: niz
INFO  07:34:31,373 - Line 59: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 59: Method Call detected. Method name: sum
INFO  07:34:31,373 - Line 59: Using global variable name: niz
INFO  07:34:31,373 - Line 59: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 59: Method Call detected. Method name: sum
INFO  07:34:31,373 - Line 62: Using global variable name: niz
INFO  07:34:31,373 - Line 62: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 62: Method Call detected. Method name: inkrement
INFO  07:34:31,373 - Line 64: Using global variable name: a
INFO  07:34:31,373 - Line 65: Using global variable name: i
INFO  07:34:31,373 - Line 67: Using global variable name: i
INFO  07:34:31,373 - Line 67: Using global variable name: niz
INFO  07:34:31,373 - Line 67: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 67: Using global variable name: i
INFO  07:34:31,373 - Line 67: Using global variable name: niz
INFO  07:34:31,373 - Line 67: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 67: Using global variable name: a
INFO  07:34:31,373 - Line 68: Using global variable name: i
INFO  07:34:31,373 - Line 69: Using global variable name: i
INFO  07:34:31,373 - Line 70: Using global variable name: niz
INFO  07:34:31,373 - Line 70: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 71: Using global variable name: niz
INFO  07:34:31,373 - Line 71: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 72: Using global variable name: niz
INFO  07:34:31,373 - Line 72: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 75: Using global variable name: i
INFO  07:34:31,373 - Line 76: Using global variable name: niz2
INFO  07:34:31,373 - Line 78: Using global variable name: niz2
INFO  07:34:31,373 - Line 78: Using global variable name: niz2
INFO  07:34:31,373 - Line 78: Using global variable name: i
INFO  07:34:31,373 - Line 78: Using global variable name: niz
INFO  07:34:31,373 - Line 78: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 78: Using global variable name: i
INFO  07:34:31,373 - Line 78: Using global variable name: niz
INFO  07:34:31,373 - Line 78: Access to array element detected. Array name: niz
INFO  07:34:31,373 - Line 79: Using global variable name: i
INFO  07:34:31,373 - Line 80: Using global variable name: i
INFO  07:34:31,373 - Line 81: Using global variable name: niz2
INFO  07:35:04,470 - #2 program
INFO  07:35:04,470 - #49 test302
INFO  07:35:04,470 - #7 const
INFO  07:35:04,471 - #49 int
INFO  07:35:04,471 - #49 jedan
INFO  07:35:04,471 - #27 =
INFO  07:35:04,471 - #52 1
INFO  07:35:04,471 - #38 ;
INFO  07:35:04,471 - #49 int
INFO  07:35:04,471 - #49 i
INFO  07:35:04,471 - #38 ;
INFO  07:35:04,472 - #49 bool
INFO  07:35:04,472 - #49 ibool
INFO  07:35:04,472 - #38 ;
INFO  07:35:04,472 - #49 int
INFO  07:35:04,472 - #49 niz2
INFO  07:35:04,472 - #38 ;
INFO  07:35:04,472 - #49 int
INFO  07:35:04,472 - #49 niz
INFO  07:35:04,472 - #42 [
INFO  07:35:04,472 - #43 ]
INFO  07:35:04,472 - #38 ;
INFO  07:35:04,473 - #49 int
INFO  07:35:04,473 - #49 a
INFO  07:35:04,473 - #38 ;
INFO  07:35:04,473 - #44 {
INFO  07:35:04,473 - #49 int
INFO  07:35:04,473 - #49 sum
INFO  07:35:04,473 - #40 (
INFO  07:35:04,473 - #49 int
INFO  07:35:04,473 - #49 z
INFO  07:35:04,473 - #39 ,
INFO  07:35:04,473 - #49 int
INFO  07:35:04,473 - #49 d
INFO  07:35:04,473 - #41 )
INFO  07:35:04,473 - #44 {
INFO  07:35:04,474 - #15 return
INFO  07:35:04,474 - #49 z
INFO  07:35:04,474 - #22 +
INFO  07:35:04,474 - #49 d
INFO  07:35:04,474 - #38 ;
INFO  07:35:04,475 - #45 }
INFO  07:35:04,475 - #49 int
INFO  07:35:04,475 - #49 inkrement
INFO  07:35:04,475 - #40 (
INFO  07:35:04,475 - #49 int
INFO  07:35:04,475 - #49 a
INFO  07:35:04,475 - #39 ,
INFO  07:35:04,475 - #49 int
INFO  07:35:04,475 - #49 inc
INFO  07:35:04,475 - #41 )
INFO  07:35:04,475 - #49 int
INFO  07:35:04,475 - #49 pom
INFO  07:35:04,475 - #38 ;
INFO  07:35:04,476 - #44 {
INFO  07:35:04,476 - #5 if
INFO  07:35:04,476 - #40 (
INFO  07:35:04,476 - #49 inc
INFO  07:35:04,476 - #28 ==
INFO  07:35:04,476 - #49 jedan
INFO  07:35:04,476 - #41 )
INFO  07:35:04,476 - #49 pom
INFO  07:35:04,477 - #27 =
INFO  07:35:04,477 - #52 1
INFO  07:35:04,477 - #38 ;
INFO  07:35:04,477 - #6 else
INFO  07:35:04,477 - #5 if
INFO  07:35:04,477 - #40 (
INFO  07:35:04,477 - #49 inc
INFO  07:35:04,477 - #28 ==
INFO  07:35:04,477 - #52 2
INFO  07:35:04,477 - #41 )
INFO  07:35:04,477 - #49 pom
INFO  07:35:04,477 - #27 =
INFO  07:35:04,477 - #49 a
INFO  07:35:04,477 - #38 ;
INFO  07:35:04,477 - #15 return
INFO  07:35:04,478 - #49 sum
INFO  07:35:04,478 - #40 (
INFO  07:35:04,478 - #49 a
INFO  07:35:04,478 - #39 ,
INFO  07:35:04,478 - #49 pom
INFO  07:35:04,478 - #41 )
INFO  07:35:04,478 - #38 ;
INFO  07:35:04,478 - #45 }
INFO  07:35:04,478 - #49 bool
INFO  07:35:04,478 - #49 verify
INFO  07:35:04,478 - #40 (
INFO  07:35:04,478 - #41 )
INFO  07:35:04,479 - #44 {
INFO  07:35:04,479 - #12 print
INFO  07:35:04,479 - #40 (
INFO  07:35:04,479 - #51 v
INFO  07:35:04,479 - #41 )
INFO  07:35:04,479 - #38 ;
INFO  07:35:04,479 - #15 return
INFO  07:35:04,479 - #50 false
INFO  07:35:04,479 - #38 ;
INFO  07:35:04,479 - #45 }
INFO  07:35:04,479 - #14 void
INFO  07:35:04,479 - #49 main
INFO  07:35:04,479 - #40 (
INFO  07:35:04,479 - #41 )
INFO  07:35:04,479 - #44 {
INFO  07:35:04,479 - #49 i
INFO  07:35:04,479 - #27 =
INFO  07:35:04,479 - #52 0
INFO  07:35:04,479 - #38 ;
INFO  07:35:04,480 - #9 do
INFO  07:35:04,480 - #44 {
INFO  07:35:04,480 - #12 print
INFO  07:35:04,480 - #40 (
INFO  07:35:04,480 - #52 1
INFO  07:35:04,480 - #41 )
INFO  07:35:04,480 - #38 ;
INFO  07:35:04,480 - #5 if
INFO  07:35:04,480 - #40 (
INFO  07:35:04,480 - #49 i
INFO  07:35:04,480 - #28 ==
INFO  07:35:04,480 - #52 3
INFO  07:35:04,480 - #41 )
INFO  07:35:04,480 - #44 {
INFO  07:35:04,480 - #49 i
INFO  07:35:04,480 - #36 ++
INFO  07:35:04,480 - #38 ;
INFO  07:35:04,480 - #4 continue
INFO  07:35:04,480 - #38 ;
INFO  07:35:04,481 - #45 }
INFO  07:35:04,481 - #5 if
INFO  07:35:04,481 - #40 (
INFO  07:35:04,481 - #49 i
INFO  07:35:04,481 - #28 ==
INFO  07:35:04,481 - #52 4
INFO  07:35:04,481 - #41 )
INFO  07:35:04,481 - #3 break
INFO  07:35:04,481 - #38 ;
INFO  07:35:04,481 - #49 i
INFO  07:35:04,481 - #27 =
INFO  07:35:04,482 - #49 inkrement
INFO  07:35:04,482 - #40 (
INFO  07:35:04,482 - #49 i
INFO  07:35:04,482 - #39 ,
INFO  07:35:04,482 - #52 1
INFO  07:35:04,482 - #41 )
INFO  07:35:04,482 - #38 ;
INFO  07:35:04,482 - #45 }
INFO  07:35:04,482 - #10 while
INFO  07:35:04,482 - #40 (
INFO  07:35:04,482 - #49 i
INFO  07:35:04,482 - #32 <
INFO  07:35:04,482 - #52 10
INFO  07:35:04,482 - #41 )
INFO  07:35:04,482 - #38 ;
INFO  07:35:04,482 - #5 if
INFO  07:35:04,482 - #40 (
INFO  07:35:04,482 - #49 i
INFO  07:35:04,482 - #28 ==
INFO  07:35:04,483 - #52 3
INFO  07:35:04,483 - #34 &&
INFO  07:35:04,483 - #49 verify
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #41 )
INFO  07:35:04,483 - #41 )
INFO  07:35:04,483 - #12 print
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #23 -
INFO  07:35:04,483 - #52 4
INFO  07:35:04,483 - #41 )
INFO  07:35:04,483 - #38 ;
INFO  07:35:04,483 - #6 else
INFO  07:35:04,483 - #12 print
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #52 4
INFO  07:35:04,483 - #41 )
INFO  07:35:04,483 - #38 ;
INFO  07:35:04,483 - #12 print
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #49 eol
INFO  07:35:04,483 - #41 )
INFO  07:35:04,483 - #38 ;
INFO  07:35:04,483 - #12 print
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #49 sum
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #49 sum
INFO  07:35:04,483 - #40 (
INFO  07:35:04,483 - #49 niz
INFO  07:35:04,483 - #42 [
INFO  07:35:04,484 - #52 0
INFO  07:35:04,484 - #43 ]
INFO  07:35:04,484 - #39 ,
INFO  07:35:04,484 - #49 niz
INFO  07:35:04,484 - #42 [
INFO  07:35:04,484 - #52 1
INFO  07:35:04,484 - #43 ]
INFO  07:35:04,484 - #41 )
INFO  07:35:04,484 - #39 ,
INFO  07:35:04,484 - #49 niz
INFO  07:35:04,484 - #42 [
INFO  07:35:04,484 - #52 2
INFO  07:35:04,484 - #43 ]
INFO  07:35:04,484 - #41 )
INFO  07:35:04,484 - #41 )
INFO  07:35:04,484 - #38 ;
INFO  07:35:04,484 - #12 print
INFO  07:35:04,484 - #40 (
INFO  07:35:04,484 - #49 eol
INFO  07:35:04,484 - #41 )
INFO  07:35:04,484 - #38 ;
INFO  07:35:04,484 - #12 print
INFO  07:35:04,484 - #40 (
INFO  07:35:04,484 - #49 inkrement
INFO  07:35:04,484 - #40 (
INFO  07:35:04,484 - #49 niz
INFO  07:35:04,484 - #42 [
INFO  07:35:04,484 - #52 2
INFO  07:35:04,484 - #43 ]
INFO  07:35:04,484 - #39 ,
INFO  07:35:04,484 - #52 2
INFO  07:35:04,484 - #41 )
INFO  07:35:04,484 - #41 )
INFO  07:35:04,484 - #38 ;
INFO  07:35:04,484 - #49 a
INFO  07:35:04,484 - #27 =
INFO  07:35:04,484 - #52 3
INFO  07:35:04,484 - #38 ;
INFO  07:35:04,484 - #49 i
INFO  07:35:04,484 - #27 =
INFO  07:35:04,485 - #52 0
INFO  07:35:04,485 - #38 ;
INFO  07:35:04,485 - #9 do
INFO  07:35:04,485 - #44 {
INFO  07:35:04,485 - #49 niz
INFO  07:35:04,485 - #42 [
INFO  07:35:04,485 - #49 i
INFO  07:35:04,485 - #43 ]
INFO  07:35:04,485 - #27 =
INFO  07:35:04,485 - #49 niz
INFO  07:35:04,485 - #42 [
INFO  07:35:04,485 - #49 i
INFO  07:35:04,485 - #43 ]
INFO  07:35:04,485 - #24 *
INFO  07:35:04,485 - #52 2
INFO  07:35:04,485 - #24 *
INFO  07:35:04,485 - #49 a
INFO  07:35:04,485 - #38 ;
INFO  07:35:04,485 - #49 i
INFO  07:35:04,485 - #36 ++
INFO  07:35:04,485 - #38 ;
INFO  07:35:04,485 - #45 }
INFO  07:35:04,485 - #10 while
INFO  07:35:04,485 - #40 (
INFO  07:35:04,485 - #49 i
INFO  07:35:04,485 - #32 <
INFO  07:35:04,486 - #52 3
INFO  07:35:04,486 - #41 )
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #12 print
INFO  07:35:04,486 - #40 (
INFO  07:35:04,486 - #49 niz
INFO  07:35:04,486 - #42 [
INFO  07:35:04,486 - #52 0
INFO  07:35:04,486 - #43 ]
INFO  07:35:04,486 - #41 )
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #12 print
INFO  07:35:04,486 - #40 (
INFO  07:35:04,486 - #49 niz
INFO  07:35:04,486 - #42 [
INFO  07:35:04,486 - #52 1
INFO  07:35:04,486 - #43 ]
INFO  07:35:04,486 - #41 )
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #12 print
INFO  07:35:04,486 - #40 (
INFO  07:35:04,486 - #49 niz
INFO  07:35:04,486 - #42 [
INFO  07:35:04,486 - #52 2
INFO  07:35:04,486 - #43 ]
INFO  07:35:04,486 - #41 )
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #12 print
INFO  07:35:04,486 - #40 (
INFO  07:35:04,486 - #49 eol
INFO  07:35:04,486 - #41 )
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #49 i
INFO  07:35:04,486 - #27 =
INFO  07:35:04,486 - #52 0
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #49 niz2
INFO  07:35:04,486 - #27 =
INFO  07:35:04,486 - #52 0
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #9 do
INFO  07:35:04,486 - #44 {
INFO  07:35:04,486 - #49 niz2
INFO  07:35:04,486 - #27 =
INFO  07:35:04,486 - #49 niz2
INFO  07:35:04,486 - #22 +
INFO  07:35:04,486 - #49 niz
INFO  07:35:04,486 - #42 [
INFO  07:35:04,486 - #49 i
INFO  07:35:04,486 - #43 ]
INFO  07:35:04,486 - #24 *
INFO  07:35:04,486 - #49 niz
INFO  07:35:04,486 - #42 [
INFO  07:35:04,486 - #49 i
INFO  07:35:04,486 - #43 ]
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #49 i
INFO  07:35:04,486 - #36 ++
INFO  07:35:04,486 - #38 ;
INFO  07:35:04,486 - #45 }
INFO  07:35:04,486 - #10 while
INFO  07:35:04,486 - #40 (
INFO  07:35:04,486 - #49 i
INFO  07:35:04,486 - #32 <
INFO  07:35:04,487 - #52 3
INFO  07:35:04,487 - #41 )
INFO  07:35:04,487 - #38 ;
INFO  07:35:04,487 - #12 print
INFO  07:35:04,487 - #40 (
INFO  07:35:04,487 - #49 niz2
INFO  07:35:04,487 - #41 )
INFO  07:35:04,487 - #38 ;
INFO  07:35:04,487 - #12 print
INFO  07:35:04,487 - #40 (
INFO  07:35:04,487 - #49 eol
INFO  07:35:04,487 - #41 )
INFO  07:35:04,487 - #38 ;
INFO  07:35:04,487 - #45 }
INFO  07:35:04,487 - #45 }
INFO  07:35:04,491 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:35:04,491 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:35:04,491 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:35:04,491 - Line 25: Using local variable name: pom
INFO  07:35:04,491 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:35:04,491 - Line 26: Using local variable name: pom
INFO  07:35:04,491 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:35:04,491 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:35:04,491 - Line 28: Using local variable name: pom
INFO  07:35:04,491 - Line 28: Method Call detected. Method name: sum
INFO  07:35:04,492 - Line 39: Using global variable name: i
INFO  07:35:04,492 - Line 42: Using global variable name: i
INFO  07:35:04,492 - Line 44: Using global variable name: i
INFO  07:35:04,492 - Line 47: Using global variable name: i
INFO  07:35:04,492 - Line 48: Using global variable name: i
INFO  07:35:04,492 - Line 48: Using global variable name: i
INFO  07:35:04,492 - Line 48: Method Call detected. Method name: inkrement
INFO  07:35:04,492 - Line 49: Using global variable name: i
INFO  07:35:04,492 - Line 51: Using global variable name: i
INFO  07:35:04,492 - Line 51: Method Call detected. Method name: verify
INFO  07:35:04,492 - Line 59: Using global variable name: niz
INFO  07:35:04,492 - Line 59: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 59: Using global variable name: niz
INFO  07:35:04,492 - Line 59: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 59: Method Call detected. Method name: sum
INFO  07:35:04,492 - Line 59: Using global variable name: niz
INFO  07:35:04,492 - Line 59: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 59: Method Call detected. Method name: sum
INFO  07:35:04,492 - Line 62: Using global variable name: niz
INFO  07:35:04,492 - Line 62: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 62: Method Call detected. Method name: inkrement
INFO  07:35:04,492 - Line 64: Using global variable name: a
INFO  07:35:04,492 - Line 65: Using global variable name: i
INFO  07:35:04,492 - Line 67: Using global variable name: i
INFO  07:35:04,492 - Line 67: Using global variable name: niz
INFO  07:35:04,492 - Line 67: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 67: Using global variable name: i
INFO  07:35:04,492 - Line 67: Using global variable name: niz
INFO  07:35:04,492 - Line 67: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 67: Using global variable name: a
INFO  07:35:04,492 - Line 68: Using global variable name: i
INFO  07:35:04,492 - Line 69: Using global variable name: i
INFO  07:35:04,492 - Line 70: Using global variable name: niz
INFO  07:35:04,492 - Line 70: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 71: Using global variable name: niz
INFO  07:35:04,492 - Line 71: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 72: Using global variable name: niz
INFO  07:35:04,492 - Line 72: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 75: Using global variable name: i
INFO  07:35:04,492 - Line 76: Using global variable name: niz2
INFO  07:35:04,492 - Line 78: Using global variable name: niz2
INFO  07:35:04,492 - Line 78: Using global variable name: niz2
INFO  07:35:04,492 - Line 78: Using global variable name: i
INFO  07:35:04,492 - Line 78: Using global variable name: niz
INFO  07:35:04,492 - Line 78: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 78: Using global variable name: i
INFO  07:35:04,492 - Line 78: Using global variable name: niz
INFO  07:35:04,492 - Line 78: Access to array element detected. Array name: niz
INFO  07:35:04,492 - Line 79: Using global variable name: i
INFO  07:35:04,492 - Line 80: Using global variable name: i
INFO  07:35:04,492 - Line 81: Using global variable name: niz2
INFO  07:36:10,660 - #2 program
INFO  07:36:10,660 - #49 test302
INFO  07:36:10,660 - #7 const
INFO  07:36:10,661 - #49 int
INFO  07:36:10,661 - #49 jedan
INFO  07:36:10,661 - #27 =
INFO  07:36:10,661 - #52 1
INFO  07:36:10,661 - #38 ;
INFO  07:36:10,661 - #49 int
INFO  07:36:10,661 - #49 i
INFO  07:36:10,661 - #38 ;
INFO  07:36:10,662 - #49 bool
INFO  07:36:10,662 - #49 ibool
INFO  07:36:10,662 - #38 ;
INFO  07:36:10,662 - #49 int
INFO  07:36:10,662 - #49 niz2
INFO  07:36:10,662 - #38 ;
INFO  07:36:10,662 - #49 int
INFO  07:36:10,662 - #49 niz
INFO  07:36:10,662 - #42 [
INFO  07:36:10,662 - #43 ]
INFO  07:36:10,662 - #38 ;
INFO  07:36:10,663 - #49 int
INFO  07:36:10,663 - #49 a
INFO  07:36:10,663 - #38 ;
INFO  07:36:10,663 - #44 {
INFO  07:36:10,663 - #49 int
INFO  07:36:10,663 - #49 sum
INFO  07:36:10,663 - #40 (
INFO  07:36:10,663 - #49 int
INFO  07:36:10,663 - #49 z
INFO  07:36:10,663 - #39 ,
INFO  07:36:10,663 - #49 int
INFO  07:36:10,663 - #49 d
INFO  07:36:10,663 - #41 )
INFO  07:36:10,663 - #44 {
INFO  07:36:10,664 - #15 return
INFO  07:36:10,664 - #49 z
INFO  07:36:10,664 - #22 +
INFO  07:36:10,664 - #49 d
INFO  07:36:10,665 - #38 ;
INFO  07:36:10,665 - #45 }
INFO  07:36:10,665 - #49 int
INFO  07:36:10,665 - #49 inkrement
INFO  07:36:10,665 - #40 (
INFO  07:36:10,665 - #49 int
INFO  07:36:10,665 - #49 a
INFO  07:36:10,665 - #39 ,
INFO  07:36:10,665 - #49 int
INFO  07:36:10,665 - #49 inc
INFO  07:36:10,665 - #41 )
INFO  07:36:10,665 - #49 int
INFO  07:36:10,665 - #49 pom
INFO  07:36:10,665 - #38 ;
INFO  07:36:10,665 - #44 {
INFO  07:36:10,665 - #5 if
INFO  07:36:10,665 - #40 (
INFO  07:36:10,665 - #49 inc
INFO  07:36:10,665 - #28 ==
INFO  07:36:10,665 - #49 jedan
INFO  07:36:10,666 - #41 )
INFO  07:36:10,666 - #49 pom
INFO  07:36:10,666 - #27 =
INFO  07:36:10,666 - #52 1
INFO  07:36:10,666 - #38 ;
INFO  07:36:10,667 - #6 else
INFO  07:36:10,667 - #5 if
INFO  07:36:10,667 - #40 (
INFO  07:36:10,667 - #49 inc
INFO  07:36:10,667 - #28 ==
INFO  07:36:10,667 - #52 2
INFO  07:36:10,667 - #41 )
INFO  07:36:10,667 - #49 pom
INFO  07:36:10,667 - #27 =
INFO  07:36:10,667 - #49 a
INFO  07:36:10,667 - #38 ;
INFO  07:36:10,667 - #15 return
INFO  07:36:10,667 - #49 sum
INFO  07:36:10,667 - #40 (
INFO  07:36:10,667 - #49 a
INFO  07:36:10,668 - #39 ,
INFO  07:36:10,668 - #49 pom
INFO  07:36:10,668 - #41 )
INFO  07:36:10,668 - #38 ;
INFO  07:36:10,668 - #45 }
INFO  07:36:10,668 - #49 bool
INFO  07:36:10,668 - #49 verify
INFO  07:36:10,668 - #40 (
INFO  07:36:10,668 - #41 )
INFO  07:36:10,668 - #44 {
INFO  07:36:10,669 - #12 print
INFO  07:36:10,669 - #40 (
INFO  07:36:10,669 - #51 v
INFO  07:36:10,669 - #41 )
INFO  07:36:10,669 - #38 ;
INFO  07:36:10,669 - #15 return
INFO  07:36:10,669 - #50 false
INFO  07:36:10,669 - #38 ;
INFO  07:36:10,669 - #45 }
INFO  07:36:10,669 - #14 void
INFO  07:36:10,669 - #49 main
INFO  07:36:10,669 - #40 (
INFO  07:36:10,669 - #41 )
INFO  07:36:10,669 - #44 {
INFO  07:36:10,669 - #5 if
INFO  07:36:10,669 - #40 (
INFO  07:36:10,669 - #52 1
INFO  07:36:10,669 - #29 !=
INFO  07:36:10,670 - #52 1
INFO  07:36:10,670 - #41 )
INFO  07:36:10,670 - #12 print
INFO  07:36:10,670 - #40 (
INFO  07:36:10,670 - #23 -
INFO  07:36:10,670 - #52 6
INFO  07:36:10,670 - #41 )
INFO  07:36:10,670 - #38 ;
INFO  07:36:10,670 - #6 else
INFO  07:36:10,670 - #12 print
INFO  07:36:10,670 - #40 (
INFO  07:36:10,670 - #52 0
INFO  07:36:10,670 - #41 )
INFO  07:36:10,670 - #38 ;
INFO  07:36:10,670 - #49 ibool
INFO  07:36:10,670 - #27 =
INFO  07:36:10,670 - #50 false
INFO  07:36:10,670 - #38 ;
INFO  07:36:10,670 - #49 i
INFO  07:36:10,670 - #27 =
INFO  07:36:10,671 - #52 0
INFO  07:36:10,671 - #38 ;
INFO  07:36:10,671 - #9 do
INFO  07:36:10,671 - #44 {
INFO  07:36:10,671 - #5 if
INFO  07:36:10,671 - #40 (
INFO  07:36:10,671 - #49 i
INFO  07:36:10,671 - #28 ==
INFO  07:36:10,671 - #52 2
INFO  07:36:10,671 - #41 )
INFO  07:36:10,671 - #49 ibool
INFO  07:36:10,671 - #27 =
INFO  07:36:10,671 - #50 true
INFO  07:36:10,671 - #38 ;
INFO  07:36:10,671 - #49 i
INFO  07:36:10,671 - #36 ++
INFO  07:36:10,671 - #38 ;
INFO  07:36:10,671 - #45 }
INFO  07:36:10,671 - #10 while
INFO  07:36:10,671 - #40 (
INFO  07:36:10,671 - #49 i
INFO  07:36:10,671 - #32 <
INFO  07:36:10,671 - #52 5
INFO  07:36:10,672 - #41 )
INFO  07:36:10,672 - #38 ;
INFO  07:36:10,672 - #5 if
INFO  07:36:10,672 - #40 (
INFO  07:36:10,672 - #49 ibool
INFO  07:36:10,672 - #41 )
INFO  07:36:10,672 - #5 if
INFO  07:36:10,672 - #40 (
INFO  07:36:10,672 - #49 i
INFO  07:36:10,672 - #28 ==
INFO  07:36:10,672 - #52 5
INFO  07:36:10,672 - #41 )
INFO  07:36:10,672 - #12 print
INFO  07:36:10,672 - #40 (
INFO  07:36:10,672 - #52 1
INFO  07:36:10,672 - #41 )
INFO  07:36:10,672 - #38 ;
INFO  07:36:10,672 - #6 else
INFO  07:36:10,672 - #12 print
INFO  07:36:10,672 - #40 (
INFO  07:36:10,672 - #23 -
INFO  07:36:10,672 - #52 1
INFO  07:36:10,672 - #41 )
INFO  07:36:10,672 - #38 ;
INFO  07:36:10,672 - #49 a
INFO  07:36:10,672 - #27 =
INFO  07:36:10,672 - #52 2
INFO  07:36:10,672 - #38 ;
INFO  07:36:10,672 - #49 niz
INFO  07:36:10,673 - #27 =
INFO  07:36:10,673 - #11 new
INFO  07:36:10,673 - #49 int
INFO  07:36:10,673 - #42 [
INFO  07:36:10,673 - #52 3
INFO  07:36:10,673 - #43 ]
INFO  07:36:10,673 - #38 ;
INFO  07:36:10,673 - #49 niz
INFO  07:36:10,673 - #42 [
INFO  07:36:10,673 - #52 0
INFO  07:36:10,673 - #43 ]
INFO  07:36:10,673 - #27 =
INFO  07:36:10,673 - #52 1
INFO  07:36:10,673 - #24 *
INFO  07:36:10,673 - #49 a
INFO  07:36:10,673 - #38 ;
INFO  07:36:10,674 - #49 niz
INFO  07:36:10,674 - #42 [
INFO  07:36:10,674 - #52 1
INFO  07:36:10,674 - #43 ]
INFO  07:36:10,674 - #27 =
INFO  07:36:10,674 - #52 2
INFO  07:36:10,674 - #24 *
INFO  07:36:10,674 - #49 a
INFO  07:36:10,674 - #38 ;
INFO  07:36:10,674 - #49 niz
INFO  07:36:10,674 - #42 [
INFO  07:36:10,674 - #52 2
INFO  07:36:10,674 - #43 ]
INFO  07:36:10,674 - #27 =
INFO  07:36:10,674 - #49 sum
INFO  07:36:10,674 - #40 (
INFO  07:36:10,674 - #49 niz
INFO  07:36:10,674 - #42 [
INFO  07:36:10,674 - #52 1
INFO  07:36:10,674 - #43 ]
INFO  07:36:10,674 - #39 ,
INFO  07:36:10,674 - #49 niz
INFO  07:36:10,674 - #42 [
INFO  07:36:10,674 - #52 0
INFO  07:36:10,674 - #43 ]
INFO  07:36:10,674 - #41 )
INFO  07:36:10,674 - #24 *
INFO  07:36:10,674 - #49 a
INFO  07:36:10,674 - #22 +
INFO  07:36:10,674 - #52 1
INFO  07:36:10,674 - #38 ;
INFO  07:36:10,674 - #5 if
INFO  07:36:10,674 - #40 (
INFO  07:36:10,674 - #49 verify
INFO  07:36:10,674 - #40 (
INFO  07:36:10,674 - #41 )
INFO  07:36:10,675 - #35 ||
INFO  07:36:10,675 - #49 niz
INFO  07:36:10,675 - #42 [
INFO  07:36:10,675 - #52 2
INFO  07:36:10,675 - #43 ]
INFO  07:36:10,675 - #28 ==
INFO  07:36:10,675 - #52 4
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #12 print
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #49 ord
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #51 A
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #6 else
INFO  07:36:10,675 - #12 print
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #49 ord
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #51 a
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #12 print
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #49 eol
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #49 i
INFO  07:36:10,675 - #27 =
INFO  07:36:10,675 - #52 0
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #9 do
INFO  07:36:10,675 - #44 {
INFO  07:36:10,675 - #12 print
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #52 1
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #5 if
INFO  07:36:10,675 - #40 (
INFO  07:36:10,675 - #49 i
INFO  07:36:10,675 - #28 ==
INFO  07:36:10,675 - #52 3
INFO  07:36:10,675 - #41 )
INFO  07:36:10,675 - #44 {
INFO  07:36:10,675 - #49 i
INFO  07:36:10,675 - #36 ++
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #4 continue
INFO  07:36:10,675 - #38 ;
INFO  07:36:10,675 - #45 }
INFO  07:36:10,676 - #5 if
INFO  07:36:10,676 - #40 (
INFO  07:36:10,676 - #49 i
INFO  07:36:10,676 - #28 ==
INFO  07:36:10,676 - #52 4
INFO  07:36:10,676 - #41 )
INFO  07:36:10,676 - #3 break
INFO  07:36:10,676 - #38 ;
INFO  07:36:10,676 - #49 i
INFO  07:36:10,676 - #27 =
INFO  07:36:10,676 - #49 inkrement
INFO  07:36:10,676 - #40 (
INFO  07:36:10,676 - #49 i
INFO  07:36:10,676 - #39 ,
INFO  07:36:10,676 - #52 1
INFO  07:36:10,676 - #41 )
INFO  07:36:10,676 - #38 ;
INFO  07:36:10,676 - #45 }
INFO  07:36:10,676 - #10 while
INFO  07:36:10,676 - #40 (
INFO  07:36:10,676 - #49 i
INFO  07:36:10,676 - #32 <
INFO  07:36:10,676 - #52 10
INFO  07:36:10,676 - #41 )
INFO  07:36:10,676 - #38 ;
INFO  07:36:10,676 - #5 if
INFO  07:36:10,676 - #40 (
INFO  07:36:10,676 - #49 i
INFO  07:36:10,676 - #28 ==
INFO  07:36:10,676 - #52 3
INFO  07:36:10,676 - #34 &&
INFO  07:36:10,676 - #49 verify
INFO  07:36:10,676 - #40 (
INFO  07:36:10,676 - #41 )
INFO  07:36:10,676 - #41 )
INFO  07:36:10,677 - #12 print
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #23 -
INFO  07:36:10,677 - #52 4
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #6 else
INFO  07:36:10,677 - #12 print
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #52 4
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #12 print
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 eol
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #12 print
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 sum
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 sum
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 niz
INFO  07:36:10,677 - #42 [
INFO  07:36:10,677 - #52 0
INFO  07:36:10,677 - #43 ]
INFO  07:36:10,677 - #39 ,
INFO  07:36:10,677 - #49 niz
INFO  07:36:10,677 - #42 [
INFO  07:36:10,677 - #52 1
INFO  07:36:10,677 - #43 ]
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #39 ,
INFO  07:36:10,677 - #49 niz
INFO  07:36:10,677 - #42 [
INFO  07:36:10,677 - #52 2
INFO  07:36:10,677 - #43 ]
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #12 print
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 eol
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #12 print
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 inkrement
INFO  07:36:10,677 - #40 (
INFO  07:36:10,677 - #49 niz
INFO  07:36:10,677 - #42 [
INFO  07:36:10,677 - #52 2
INFO  07:36:10,677 - #43 ]
INFO  07:36:10,677 - #39 ,
INFO  07:36:10,677 - #52 2
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #41 )
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #49 a
INFO  07:36:10,677 - #27 =
INFO  07:36:10,677 - #52 3
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #49 i
INFO  07:36:10,677 - #27 =
INFO  07:36:10,677 - #52 0
INFO  07:36:10,677 - #38 ;
INFO  07:36:10,677 - #9 do
INFO  07:36:10,677 - #44 {
INFO  07:36:10,677 - #49 niz
INFO  07:36:10,677 - #42 [
INFO  07:36:10,677 - #49 i
INFO  07:36:10,677 - #43 ]
INFO  07:36:10,677 - #27 =
INFO  07:36:10,677 - #49 niz
INFO  07:36:10,677 - #42 [
INFO  07:36:10,677 - #49 i
INFO  07:36:10,677 - #43 ]
INFO  07:36:10,677 - #24 *
INFO  07:36:10,677 - #52 2
INFO  07:36:10,677 - #24 *
INFO  07:36:10,678 - #49 a
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #36 ++
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #45 }
INFO  07:36:10,678 - #10 while
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #32 <
INFO  07:36:10,678 - #52 3
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #12 print
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 niz
INFO  07:36:10,678 - #42 [
INFO  07:36:10,678 - #52 0
INFO  07:36:10,678 - #43 ]
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #12 print
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 niz
INFO  07:36:10,678 - #42 [
INFO  07:36:10,678 - #52 1
INFO  07:36:10,678 - #43 ]
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #12 print
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 niz
INFO  07:36:10,678 - #42 [
INFO  07:36:10,678 - #52 2
INFO  07:36:10,678 - #43 ]
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #12 print
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 eol
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #27 =
INFO  07:36:10,678 - #52 0
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #49 niz2
INFO  07:36:10,678 - #27 =
INFO  07:36:10,678 - #52 0
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #9 do
INFO  07:36:10,678 - #44 {
INFO  07:36:10,678 - #49 niz2
INFO  07:36:10,678 - #27 =
INFO  07:36:10,678 - #49 niz2
INFO  07:36:10,678 - #22 +
INFO  07:36:10,678 - #49 niz
INFO  07:36:10,678 - #42 [
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #43 ]
INFO  07:36:10,678 - #24 *
INFO  07:36:10,678 - #49 niz
INFO  07:36:10,678 - #42 [
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #43 ]
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #36 ++
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #45 }
INFO  07:36:10,678 - #10 while
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 i
INFO  07:36:10,678 - #32 <
INFO  07:36:10,678 - #52 3
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #12 print
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 niz2
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #12 print
INFO  07:36:10,678 - #40 (
INFO  07:36:10,678 - #49 eol
INFO  07:36:10,678 - #41 )
INFO  07:36:10,678 - #38 ;
INFO  07:36:10,678 - #45 }
INFO  07:36:10,678 - #45 }
INFO  07:36:10,682 - Line 19: Access to formal argument detected. Method name: sum, argument name: z
INFO  07:36:10,682 - Line 19: Access to formal argument detected. Method name: sum, argument name: d
INFO  07:36:10,682 - Line 25: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:36:10,682 - Line 25: Using local variable name: pom
INFO  07:36:10,682 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:36:10,682 - Line 26: Using local variable name: pom
INFO  07:36:10,682 - Line 26: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:36:10,682 - Line 28: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:36:10,682 - Line 28: Using local variable name: pom
INFO  07:36:10,682 - Line 28: Method Call detected. Method name: sum
INFO  07:36:10,682 - Line 41: Using global variable name: ibool
INFO  07:36:10,682 - Line 42: Using global variable name: i
INFO  07:36:10,683 - Line 44: Using global variable name: i
INFO  07:36:10,683 - Line 44: Using global variable name: ibool
INFO  07:36:10,683 - Line 45: Using global variable name: i
INFO  07:36:10,683 - Line 46: Using global variable name: i
INFO  07:36:10,683 - Line 48: Using global variable name: ibool
INFO  07:36:10,683 - Line 49: Using global variable name: i
INFO  07:36:10,683 - Line 51: Using global variable name: a
INFO  07:36:10,683 - Line 52: Using global variable name: niz
INFO  07:36:10,683 - Line 53: Using global variable name: niz
INFO  07:36:10,683 - Line 53: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 53: Using global variable name: a
INFO  07:36:10,683 - Line 54: Using global variable name: niz
INFO  07:36:10,683 - Line 54: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 54: Using global variable name: a
INFO  07:36:10,683 - Line 55: Using global variable name: niz
INFO  07:36:10,683 - Line 55: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 55: Using global variable name: niz
INFO  07:36:10,683 - Line 55: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 55: Using global variable name: niz
INFO  07:36:10,683 - Line 55: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 55: Method Call detected. Method name: sum
INFO  07:36:10,683 - Line 55: Using global variable name: a
INFO  07:36:10,683 - Line 56: Method Call detected. Method name: verify
INFO  07:36:10,683 - Line 56: Using global variable name: niz
INFO  07:36:10,683 - Line 56: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 56: Method Call detected. Method name: ord
INFO  07:36:10,683 - Line 57: Method Call detected. Method name: ord
INFO  07:36:10,683 - Line 60: Using global variable name: i
INFO  07:36:10,683 - Line 63: Using global variable name: i
INFO  07:36:10,683 - Line 65: Using global variable name: i
INFO  07:36:10,683 - Line 68: Using global variable name: i
INFO  07:36:10,683 - Line 69: Using global variable name: i
INFO  07:36:10,683 - Line 69: Using global variable name: i
INFO  07:36:10,683 - Line 69: Method Call detected. Method name: inkrement
INFO  07:36:10,683 - Line 70: Using global variable name: i
INFO  07:36:10,683 - Line 72: Using global variable name: i
INFO  07:36:10,683 - Line 72: Method Call detected. Method name: verify
INFO  07:36:10,683 - Line 80: Using global variable name: niz
INFO  07:36:10,683 - Line 80: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 80: Using global variable name: niz
INFO  07:36:10,683 - Line 80: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 80: Method Call detected. Method name: sum
INFO  07:36:10,683 - Line 80: Using global variable name: niz
INFO  07:36:10,683 - Line 80: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 80: Method Call detected. Method name: sum
INFO  07:36:10,683 - Line 83: Using global variable name: niz
INFO  07:36:10,683 - Line 83: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 83: Method Call detected. Method name: inkrement
INFO  07:36:10,683 - Line 85: Using global variable name: a
INFO  07:36:10,683 - Line 86: Using global variable name: i
INFO  07:36:10,683 - Line 88: Using global variable name: i
INFO  07:36:10,683 - Line 88: Using global variable name: niz
INFO  07:36:10,683 - Line 88: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 88: Using global variable name: i
INFO  07:36:10,683 - Line 88: Using global variable name: niz
INFO  07:36:10,683 - Line 88: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 88: Using global variable name: a
INFO  07:36:10,683 - Line 89: Using global variable name: i
INFO  07:36:10,683 - Line 90: Using global variable name: i
INFO  07:36:10,683 - Line 91: Using global variable name: niz
INFO  07:36:10,683 - Line 91: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 92: Using global variable name: niz
INFO  07:36:10,683 - Line 92: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 93: Using global variable name: niz
INFO  07:36:10,683 - Line 93: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 96: Using global variable name: i
INFO  07:36:10,683 - Line 97: Using global variable name: niz2
INFO  07:36:10,683 - Line 99: Using global variable name: niz2
INFO  07:36:10,683 - Line 99: Using global variable name: niz2
INFO  07:36:10,683 - Line 99: Using global variable name: i
INFO  07:36:10,683 - Line 99: Using global variable name: niz
INFO  07:36:10,683 - Line 99: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 99: Using global variable name: i
INFO  07:36:10,683 - Line 99: Using global variable name: niz
INFO  07:36:10,683 - Line 99: Access to array element detected. Array name: niz
INFO  07:36:10,683 - Line 100: Using global variable name: i
INFO  07:36:10,683 - Line 101: Using global variable name: i
INFO  07:36:10,683 - Line 102: Using global variable name: niz2
INFO  07:38:43,986 - #2 program
INFO  07:38:43,987 - #49 test302
INFO  07:38:43,987 - #7 const
INFO  07:38:43,987 - #49 int
INFO  07:38:43,987 - #49 jedan
INFO  07:38:43,987 - #27 =
INFO  07:38:43,987 - #52 1
INFO  07:38:43,988 - #38 ;
INFO  07:38:43,988 - #49 int
INFO  07:38:43,988 - #49 i
INFO  07:38:43,988 - #38 ;
INFO  07:38:43,988 - #49 bool
INFO  07:38:43,988 - #49 ibool
INFO  07:38:43,988 - #38 ;
INFO  07:38:43,989 - #49 int
INFO  07:38:43,989 - #49 niz2
INFO  07:38:43,989 - #38 ;
INFO  07:38:43,989 - #49 int
INFO  07:38:43,989 - #49 niz
INFO  07:38:43,989 - #42 [
INFO  07:38:43,989 - #43 ]
INFO  07:38:43,989 - #38 ;
INFO  07:38:43,989 - #49 int
INFO  07:38:43,989 - #49 a
INFO  07:38:43,989 - #38 ;
INFO  07:38:43,989 - #44 {
INFO  07:38:43,989 - #49 int
INFO  07:38:43,989 - #49 sum
INFO  07:38:43,990 - #40 (
INFO  07:38:43,990 - #49 int
INFO  07:38:43,990 - #47 .
INFO  07:38:43,990 - #47 .
INFO  07:38:43,990 - #47 .
INFO  07:38:43,990 - #49 args
INFO  07:38:43,990 - #41 )
INFO  07:38:43,990 - #49 int
INFO  07:38:43,990 - #49 z
INFO  07:38:43,990 - #39 ,
INFO  07:38:43,991 - #49 d
INFO  07:38:43,991 - #38 ;
INFO  07:38:43,991 - #44 {
INFO  07:38:43,991 - #49 z
INFO  07:38:43,991 - #27 =
INFO  07:38:43,991 - #49 args
INFO  07:38:43,991 - #42 [
INFO  07:38:43,991 - #52 0
INFO  07:38:43,991 - #43 ]
INFO  07:38:43,992 - #38 ;
INFO  07:38:43,992 - #49 d
INFO  07:38:43,992 - #27 =
INFO  07:38:43,992 - #49 args
INFO  07:38:43,992 - #42 [
INFO  07:38:43,992 - #52 1
INFO  07:38:43,992 - #43 ]
INFO  07:38:43,992 - #38 ;
INFO  07:38:43,992 - #15 return
INFO  07:38:43,992 - #49 z
INFO  07:38:43,992 - #22 +
INFO  07:38:43,992 - #49 d
INFO  07:38:43,993 - #38 ;
INFO  07:38:43,993 - #45 }
INFO  07:38:43,993 - #14 void
INFO  07:38:43,993 - #49 printArgs
INFO  07:38:43,993 - #40 (
INFO  07:38:43,993 - #49 int
INFO  07:38:43,993 - #49 num
INFO  07:38:43,993 - #39 ,
INFO  07:38:43,993 - #49 char
INFO  07:38:43,993 - #47 .
INFO  07:38:43,993 - #47 .
INFO  07:38:43,993 - #47 .
INFO  07:38:43,993 - #49 args
INFO  07:38:43,993 - #41 )
INFO  07:38:43,993 - #49 int
INFO  07:38:43,994 - #49 i
INFO  07:38:43,994 - #38 ;
INFO  07:38:43,994 - #44 {
INFO  07:38:43,994 - #49 i
INFO  07:38:43,994 - #27 =
INFO  07:38:43,994 - #52 0
INFO  07:38:43,994 - #38 ;
INFO  07:38:43,994 - #9 do
INFO  07:38:43,994 - #44 {
INFO  07:38:43,994 - #12 print
INFO  07:38:43,994 - #40 (
INFO  07:38:43,994 - #49 args
INFO  07:38:43,994 - #42 [
INFO  07:38:43,994 - #49 i
INFO  07:38:43,994 - #43 ]
INFO  07:38:43,994 - #41 )
INFO  07:38:43,994 - #38 ;
INFO  07:38:43,994 - #49 i
INFO  07:38:43,995 - #36 ++
INFO  07:38:43,995 - #38 ;
INFO  07:38:43,995 - #45 }
INFO  07:38:43,995 - #10 while
INFO  07:38:43,995 - #40 (
INFO  07:38:43,995 - #49 i
INFO  07:38:43,995 - #32 <
INFO  07:38:43,995 - #49 num
INFO  07:38:43,995 - #41 )
INFO  07:38:43,996 - #38 ;
INFO  07:38:43,996 - #45 }
INFO  07:38:43,996 - #49 int
INFO  07:38:43,996 - #49 inkrement
INFO  07:38:43,996 - #40 (
INFO  07:38:43,996 - #49 int
INFO  07:38:43,996 - #49 a
INFO  07:38:43,996 - #39 ,
INFO  07:38:43,996 - #49 int
INFO  07:38:43,996 - #49 inc
INFO  07:38:43,996 - #41 )
INFO  07:38:43,996 - #49 int
INFO  07:38:43,996 - #49 pom
INFO  07:38:43,996 - #38 ;
INFO  07:38:43,997 - #44 {
INFO  07:38:43,997 - #5 if
INFO  07:38:43,997 - #40 (
INFO  07:38:43,997 - #49 inc
INFO  07:38:43,997 - #28 ==
INFO  07:38:43,997 - #49 jedan
INFO  07:38:43,997 - #41 )
INFO  07:38:43,997 - #49 pom
INFO  07:38:43,997 - #27 =
INFO  07:38:43,997 - #52 1
INFO  07:38:43,997 - #38 ;
INFO  07:38:43,997 - #6 else
INFO  07:38:43,997 - #5 if
INFO  07:38:43,998 - #40 (
INFO  07:38:43,998 - #49 inc
INFO  07:38:43,998 - #28 ==
INFO  07:38:43,998 - #52 2
INFO  07:38:43,998 - #41 )
INFO  07:38:43,998 - #49 pom
INFO  07:38:43,998 - #27 =
INFO  07:38:43,998 - #49 a
INFO  07:38:43,998 - #38 ;
INFO  07:38:43,998 - #15 return
INFO  07:38:43,998 - #49 sum
INFO  07:38:43,998 - #40 (
INFO  07:38:43,998 - #49 a
INFO  07:38:43,998 - #39 ,
INFO  07:38:43,998 - #49 pom
INFO  07:38:43,998 - #41 )
INFO  07:38:43,998 - #38 ;
INFO  07:38:43,999 - #45 }
INFO  07:38:43,999 - #49 bool
INFO  07:38:43,999 - #49 verify
INFO  07:38:43,999 - #40 (
INFO  07:38:43,999 - #41 )
INFO  07:38:43,999 - #44 {
INFO  07:38:43,999 - #12 print
INFO  07:38:43,999 - #40 (
INFO  07:38:43,999 - #51 v
INFO  07:38:43,999 - #41 )
INFO  07:38:43,999 - #38 ;
INFO  07:38:43,999 - #15 return
INFO  07:38:43,999 - #50 false
INFO  07:38:43,999 - #38 ;
INFO  07:38:43,999 - #45 }
INFO  07:38:43,999 - #14 void
INFO  07:38:43,999 - #49 main
INFO  07:38:43,999 - #40 (
INFO  07:38:43,999 - #41 )
INFO  07:38:43,999 - #44 {
INFO  07:38:43,999 - #5 if
INFO  07:38:43,999 - #40 (
INFO  07:38:43,999 - #52 1
INFO  07:38:43,999 - #29 !=
INFO  07:38:43,999 - #52 1
INFO  07:38:43,999 - #41 )
INFO  07:38:44,000 - #12 print
INFO  07:38:44,000 - #40 (
INFO  07:38:44,000 - #23 -
INFO  07:38:44,000 - #52 6
INFO  07:38:44,000 - #41 )
INFO  07:38:44,000 - #38 ;
INFO  07:38:44,000 - #6 else
INFO  07:38:44,000 - #12 print
INFO  07:38:44,000 - #40 (
INFO  07:38:44,000 - #52 0
INFO  07:38:44,000 - #41 )
INFO  07:38:44,000 - #38 ;
INFO  07:38:44,000 - #49 ibool
INFO  07:38:44,000 - #27 =
INFO  07:38:44,000 - #50 false
INFO  07:38:44,000 - #38 ;
INFO  07:38:44,000 - #49 i
INFO  07:38:44,000 - #27 =
INFO  07:38:44,000 - #52 0
INFO  07:38:44,000 - #38 ;
INFO  07:38:44,000 - #9 do
INFO  07:38:44,000 - #44 {
INFO  07:38:44,000 - #5 if
INFO  07:38:44,000 - #40 (
INFO  07:38:44,000 - #49 i
INFO  07:38:44,000 - #28 ==
INFO  07:38:44,000 - #52 2
INFO  07:38:44,000 - #41 )
INFO  07:38:44,000 - #49 ibool
INFO  07:38:44,000 - #27 =
INFO  07:38:44,000 - #50 true
INFO  07:38:44,000 - #38 ;
INFO  07:38:44,000 - #49 i
INFO  07:38:44,000 - #36 ++
INFO  07:38:44,000 - #38 ;
INFO  07:38:44,000 - #45 }
INFO  07:38:44,000 - #10 while
INFO  07:38:44,000 - #40 (
INFO  07:38:44,000 - #49 i
INFO  07:38:44,000 - #32 <
INFO  07:38:44,001 - #52 5
INFO  07:38:44,001 - #41 )
INFO  07:38:44,001 - #38 ;
INFO  07:38:44,001 - #5 if
INFO  07:38:44,001 - #40 (
INFO  07:38:44,001 - #49 ibool
INFO  07:38:44,001 - #41 )
INFO  07:38:44,001 - #5 if
INFO  07:38:44,001 - #40 (
INFO  07:38:44,001 - #49 i
INFO  07:38:44,001 - #28 ==
INFO  07:38:44,001 - #52 5
INFO  07:38:44,001 - #41 )
INFO  07:38:44,001 - #12 print
INFO  07:38:44,001 - #40 (
INFO  07:38:44,001 - #52 1
INFO  07:38:44,001 - #41 )
INFO  07:38:44,001 - #38 ;
INFO  07:38:44,001 - #6 else
INFO  07:38:44,001 - #12 print
INFO  07:38:44,001 - #40 (
INFO  07:38:44,001 - #23 -
INFO  07:38:44,001 - #52 1
INFO  07:38:44,001 - #41 )
INFO  07:38:44,001 - #38 ;
INFO  07:38:44,001 - #49 a
INFO  07:38:44,001 - #27 =
INFO  07:38:44,001 - #52 2
INFO  07:38:44,001 - #38 ;
INFO  07:38:44,001 - #49 niz
INFO  07:38:44,001 - #27 =
INFO  07:38:44,001 - #11 new
INFO  07:38:44,001 - #49 int
INFO  07:38:44,001 - #42 [
INFO  07:38:44,001 - #52 3
INFO  07:38:44,001 - #43 ]
INFO  07:38:44,001 - #38 ;
INFO  07:38:44,001 - #49 niz
INFO  07:38:44,001 - #42 [
INFO  07:38:44,001 - #52 0
INFO  07:38:44,001 - #43 ]
INFO  07:38:44,001 - #27 =
INFO  07:38:44,002 - #52 1
INFO  07:38:44,002 - #24 *
INFO  07:38:44,002 - #49 a
INFO  07:38:44,002 - #38 ;
INFO  07:38:44,002 - #49 niz
INFO  07:38:44,002 - #42 [
INFO  07:38:44,002 - #52 1
INFO  07:38:44,002 - #43 ]
INFO  07:38:44,002 - #27 =
INFO  07:38:44,002 - #52 2
INFO  07:38:44,002 - #24 *
INFO  07:38:44,002 - #49 a
INFO  07:38:44,002 - #38 ;
INFO  07:38:44,002 - #49 niz
INFO  07:38:44,002 - #42 [
INFO  07:38:44,002 - #52 2
INFO  07:38:44,002 - #43 ]
INFO  07:38:44,002 - #27 =
INFO  07:38:44,002 - #49 sum
INFO  07:38:44,002 - #40 (
INFO  07:38:44,002 - #49 niz
INFO  07:38:44,002 - #42 [
INFO  07:38:44,002 - #52 1
INFO  07:38:44,002 - #43 ]
INFO  07:38:44,002 - #39 ,
INFO  07:38:44,002 - #49 niz
INFO  07:38:44,002 - #42 [
INFO  07:38:44,002 - #52 0
INFO  07:38:44,002 - #43 ]
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #24 *
INFO  07:38:44,003 - #49 a
INFO  07:38:44,003 - #22 +
INFO  07:38:44,003 - #52 1
INFO  07:38:44,003 - #38 ;
INFO  07:38:44,003 - #5 if
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #49 verify
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #35 ||
INFO  07:38:44,003 - #49 niz
INFO  07:38:44,003 - #42 [
INFO  07:38:44,003 - #52 2
INFO  07:38:44,003 - #43 ]
INFO  07:38:44,003 - #28 ==
INFO  07:38:44,003 - #52 4
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #12 print
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #49 ord
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #51 A
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #38 ;
INFO  07:38:44,003 - #6 else
INFO  07:38:44,003 - #12 print
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #49 ord
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #51 a
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #38 ;
INFO  07:38:44,003 - #12 print
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #49 eol
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #38 ;
INFO  07:38:44,003 - #49 i
INFO  07:38:44,003 - #27 =
INFO  07:38:44,003 - #52 0
INFO  07:38:44,003 - #38 ;
INFO  07:38:44,003 - #9 do
INFO  07:38:44,003 - #44 {
INFO  07:38:44,003 - #5 if
INFO  07:38:44,003 - #40 (
INFO  07:38:44,003 - #49 i
INFO  07:38:44,003 - #28 ==
INFO  07:38:44,003 - #52 3
INFO  07:38:44,003 - #41 )
INFO  07:38:44,003 - #44 {
INFO  07:38:44,003 - #49 i
INFO  07:38:44,003 - #36 ++
INFO  07:38:44,003 - #38 ;
INFO  07:38:44,004 - #4 continue
INFO  07:38:44,004 - #38 ;
INFO  07:38:44,004 - #45 }
INFO  07:38:44,004 - #5 if
INFO  07:38:44,004 - #40 (
INFO  07:38:44,004 - #49 i
INFO  07:38:44,004 - #28 ==
INFO  07:38:44,004 - #52 4
INFO  07:38:44,004 - #41 )
INFO  07:38:44,004 - #3 break
INFO  07:38:44,004 - #38 ;
INFO  07:38:44,004 - #49 i
INFO  07:38:44,004 - #27 =
INFO  07:38:44,004 - #49 inkrement
INFO  07:38:44,004 - #40 (
INFO  07:38:44,004 - #49 i
INFO  07:38:44,004 - #39 ,
INFO  07:38:44,004 - #52 1
INFO  07:38:44,004 - #41 )
INFO  07:38:44,004 - #38 ;
INFO  07:38:44,004 - #45 }
INFO  07:38:44,004 - #10 while
INFO  07:38:44,004 - #40 (
INFO  07:38:44,004 - #49 i
INFO  07:38:44,004 - #32 <
INFO  07:38:44,004 - #52 10
INFO  07:38:44,004 - #41 )
INFO  07:38:44,004 - #38 ;
INFO  07:38:44,004 - #5 if
INFO  07:38:44,004 - #40 (
INFO  07:38:44,004 - #49 i
INFO  07:38:44,004 - #28 ==
INFO  07:38:44,004 - #52 3
INFO  07:38:44,004 - #34 &&
INFO  07:38:44,004 - #49 verify
INFO  07:38:44,004 - #40 (
INFO  07:38:44,004 - #41 )
INFO  07:38:44,004 - #41 )
INFO  07:38:44,004 - #12 print
INFO  07:38:44,004 - #40 (
INFO  07:38:44,004 - #23 -
INFO  07:38:44,004 - #52 4
INFO  07:38:44,004 - #41 )
INFO  07:38:44,004 - #38 ;
INFO  07:38:44,004 - #6 else
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #52 4
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 eol
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 sum
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 sum
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 0
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #39 ,
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 1
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #39 ,
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 2
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 eol
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 inkrement
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 2
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #39 ,
INFO  07:38:44,005 - #52 2
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #49 a
INFO  07:38:44,005 - #27 =
INFO  07:38:44,005 - #52 3
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #49 i
INFO  07:38:44,005 - #27 =
INFO  07:38:44,005 - #52 0
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #9 do
INFO  07:38:44,005 - #44 {
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #49 i
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #27 =
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #49 i
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #24 *
INFO  07:38:44,005 - #52 2
INFO  07:38:44,005 - #24 *
INFO  07:38:44,005 - #49 a
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #49 i
INFO  07:38:44,005 - #36 ++
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #45 }
INFO  07:38:44,005 - #10 while
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 i
INFO  07:38:44,005 - #32 <
INFO  07:38:44,005 - #52 3
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 0
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 1
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 niz
INFO  07:38:44,005 - #42 [
INFO  07:38:44,005 - #52 2
INFO  07:38:44,005 - #43 ]
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #12 print
INFO  07:38:44,005 - #40 (
INFO  07:38:44,005 - #49 eol
INFO  07:38:44,005 - #41 )
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,005 - #49 i
INFO  07:38:44,005 - #27 =
INFO  07:38:44,005 - #52 0
INFO  07:38:44,005 - #38 ;
INFO  07:38:44,006 - #49 niz2
INFO  07:38:44,006 - #27 =
INFO  07:38:44,006 - #52 0
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #9 do
INFO  07:38:44,006 - #44 {
INFO  07:38:44,006 - #49 niz2
INFO  07:38:44,006 - #27 =
INFO  07:38:44,006 - #49 niz2
INFO  07:38:44,006 - #22 +
INFO  07:38:44,006 - #49 niz
INFO  07:38:44,006 - #42 [
INFO  07:38:44,006 - #49 i
INFO  07:38:44,006 - #43 ]
INFO  07:38:44,006 - #24 *
INFO  07:38:44,006 - #49 niz
INFO  07:38:44,006 - #42 [
INFO  07:38:44,006 - #49 i
INFO  07:38:44,006 - #43 ]
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #49 i
INFO  07:38:44,006 - #36 ++
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #45 }
INFO  07:38:44,006 - #10 while
INFO  07:38:44,006 - #40 (
INFO  07:38:44,006 - #49 i
INFO  07:38:44,006 - #32 <
INFO  07:38:44,006 - #52 3
INFO  07:38:44,006 - #41 )
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #12 print
INFO  07:38:44,006 - #40 (
INFO  07:38:44,006 - #49 niz2
INFO  07:38:44,006 - #41 )
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #12 print
INFO  07:38:44,006 - #40 (
INFO  07:38:44,006 - #49 eol
INFO  07:38:44,006 - #41 )
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #49 printArgs
INFO  07:38:44,006 - #40 (
INFO  07:38:44,006 - #52 5
INFO  07:38:44,006 - #39 ,
INFO  07:38:44,006 - #51 t
INFO  07:38:44,006 - #39 ,
INFO  07:38:44,006 - #51 e
INFO  07:38:44,006 - #39 ,
INFO  07:38:44,006 - #51 s
INFO  07:38:44,006 - #39 ,
INFO  07:38:44,006 - #51 t
INFO  07:38:44,006 - #39 ,
INFO  07:38:44,006 - #51 B
INFO  07:38:44,006 - #41 )
INFO  07:38:44,006 - #38 ;
INFO  07:38:44,006 - #45 }
INFO  07:38:44,006 - #45 }
INFO  07:38:44,010 - Line 20: Using local variable name: z
INFO  07:38:44,010 - Line 20: Access to array element detected. Array name: args
INFO  07:38:44,010 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:38:44,010 - Line 21: Using local variable name: d
INFO  07:38:44,010 - Line 21: Access to array element detected. Array name: args
INFO  07:38:44,010 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:38:44,010 - Line 22: Using local variable name: z
INFO  07:38:44,010 - Line 22: Using local variable name: d
INFO  07:38:44,010 - Line 28: Using local variable name: i
INFO  07:38:44,010 - Line 30: Using local variable name: i
INFO  07:38:44,010 - Line 30: Access to array element detected. Array name: args
INFO  07:38:44,010 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:38:44,010 - Line 31: Using local variable name: i
INFO  07:38:44,010 - Line 32: Using local variable name: i
INFO  07:38:44,010 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:38:44,010 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:38:44,010 - Line 37: Using local variable name: pom
INFO  07:38:44,010 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:38:44,010 - Line 38: Using local variable name: pom
INFO  07:38:44,010 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:38:44,010 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:38:44,011 - Line 40: Using local variable name: pom
INFO  07:38:44,011 - Line 40: Method Call detected. Method name: sum
INFO  07:38:44,011 - Method sum has varArgs with 2 args
INFO  07:38:44,011 - Line 53: Using global variable name: ibool
INFO  07:38:44,011 - Line 54: Using global variable name: i
INFO  07:38:44,011 - Line 56: Using global variable name: i
INFO  07:38:44,011 - Line 56: Using global variable name: ibool
INFO  07:38:44,011 - Line 57: Using global variable name: i
INFO  07:38:44,011 - Line 58: Using global variable name: i
INFO  07:38:44,011 - Line 60: Using global variable name: ibool
INFO  07:38:44,011 - Line 61: Using global variable name: i
INFO  07:38:44,011 - Line 63: Using global variable name: a
INFO  07:38:44,011 - Line 64: Using global variable name: niz
INFO  07:38:44,011 - Line 65: Using global variable name: niz
INFO  07:38:44,011 - Line 65: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 65: Using global variable name: a
INFO  07:38:44,011 - Line 66: Using global variable name: niz
INFO  07:38:44,011 - Line 66: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 66: Using global variable name: a
INFO  07:38:44,011 - Line 67: Using global variable name: niz
INFO  07:38:44,011 - Line 67: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 67: Using global variable name: niz
INFO  07:38:44,011 - Line 67: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 67: Using global variable name: niz
INFO  07:38:44,011 - Line 67: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 67: Method Call detected. Method name: sum
INFO  07:38:44,011 - Method sum has varArgs with 2 args
INFO  07:38:44,011 - Line 67: Using global variable name: a
INFO  07:38:44,011 - Line 68: Method Call detected. Method name: verify
INFO  07:38:44,011 - Line 68: Using global variable name: niz
INFO  07:38:44,011 - Line 68: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 68: Method Call detected. Method name: ord
INFO  07:38:44,011 - Line 69: Method Call detected. Method name: ord
INFO  07:38:44,011 - Line 72: Using global variable name: i
INFO  07:38:44,011 - Line 74: Using global variable name: i
INFO  07:38:44,011 - Line 76: Using global variable name: i
INFO  07:38:44,011 - Line 79: Using global variable name: i
INFO  07:38:44,011 - Line 80: Using global variable name: i
INFO  07:38:44,011 - Line 80: Using global variable name: i
INFO  07:38:44,011 - Line 80: Method Call detected. Method name: inkrement
INFO  07:38:44,011 - Line 81: Using global variable name: i
INFO  07:38:44,011 - Line 83: Using global variable name: i
INFO  07:38:44,011 - Line 83: Method Call detected. Method name: verify
INFO  07:38:44,011 - Line 91: Using global variable name: niz
INFO  07:38:44,011 - Line 91: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 91: Using global variable name: niz
INFO  07:38:44,011 - Line 91: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 91: Method Call detected. Method name: sum
INFO  07:38:44,011 - Method sum has varArgs with 2 args
INFO  07:38:44,011 - Line 91: Using global variable name: niz
INFO  07:38:44,011 - Line 91: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 91: Method Call detected. Method name: sum
INFO  07:38:44,011 - Method sum has varArgs with 2 args
INFO  07:38:44,011 - Line 94: Using global variable name: niz
INFO  07:38:44,011 - Line 94: Access to array element detected. Array name: niz
INFO  07:38:44,011 - Line 94: Method Call detected. Method name: inkrement
INFO  07:38:44,011 - Line 96: Using global variable name: a
INFO  07:38:44,011 - Line 97: Using global variable name: i
INFO  07:38:44,011 - Line 99: Using global variable name: i
INFO  07:38:44,012 - Line 99: Using global variable name: niz
INFO  07:38:44,012 - Line 99: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 99: Using global variable name: i
INFO  07:38:44,012 - Line 99: Using global variable name: niz
INFO  07:38:44,012 - Line 99: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 99: Using global variable name: a
INFO  07:38:44,012 - Line 100: Using global variable name: i
INFO  07:38:44,012 - Line 101: Using global variable name: i
INFO  07:38:44,012 - Line 102: Using global variable name: niz
INFO  07:38:44,012 - Line 102: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 103: Using global variable name: niz
INFO  07:38:44,012 - Line 103: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 104: Using global variable name: niz
INFO  07:38:44,012 - Line 104: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 107: Using global variable name: i
INFO  07:38:44,012 - Line 108: Using global variable name: niz2
INFO  07:38:44,012 - Line 110: Using global variable name: niz2
INFO  07:38:44,012 - Line 110: Using global variable name: niz2
INFO  07:38:44,012 - Line 110: Using global variable name: i
INFO  07:38:44,012 - Line 110: Using global variable name: niz
INFO  07:38:44,012 - Line 110: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 110: Using global variable name: i
INFO  07:38:44,012 - Line 110: Using global variable name: niz
INFO  07:38:44,012 - Line 110: Access to array element detected. Array name: niz
INFO  07:38:44,012 - Line 111: Using global variable name: i
INFO  07:38:44,012 - Line 112: Using global variable name: i
INFO  07:38:44,012 - Line 113: Using global variable name: niz2
INFO  07:38:44,012 - Line 115: Method Call detected. Method name: printArgs
INFO  07:38:44,012 - Method printArgs has varArgs with 5 args
INFO  07:40:26,105 - #2 program
INFO  07:40:26,105 - #49 test302
INFO  07:40:26,105 - #7 const
INFO  07:40:26,105 - #49 int
INFO  07:40:26,105 - #49 jedan
INFO  07:40:26,106 - #27 =
INFO  07:40:26,106 - #52 1
INFO  07:40:26,106 - #38 ;
INFO  07:40:26,106 - #49 int
INFO  07:40:26,106 - #49 i
INFO  07:40:26,106 - #38 ;
INFO  07:40:26,107 - #49 bool
INFO  07:40:26,107 - #49 ibool
INFO  07:40:26,107 - #38 ;
INFO  07:40:26,107 - #49 int
INFO  07:40:26,107 - #49 niz2
INFO  07:40:26,107 - #38 ;
INFO  07:40:26,107 - #49 int
INFO  07:40:26,107 - #49 niz
INFO  07:40:26,107 - #42 [
INFO  07:40:26,107 - #43 ]
INFO  07:40:26,107 - #38 ;
INFO  07:40:26,107 - #49 int
INFO  07:40:26,107 - #49 a
INFO  07:40:26,107 - #38 ;
INFO  07:40:26,107 - #44 {
INFO  07:40:26,107 - #49 int
INFO  07:40:26,108 - #49 sum
INFO  07:40:26,108 - #40 (
INFO  07:40:26,108 - #49 int
INFO  07:40:26,108 - #47 .
INFO  07:40:26,108 - #47 .
INFO  07:40:26,108 - #47 .
INFO  07:40:26,108 - #49 args
INFO  07:40:26,108 - #41 )
INFO  07:40:26,108 - #49 int
INFO  07:40:26,109 - #49 z
INFO  07:40:26,109 - #39 ,
INFO  07:40:26,109 - #49 d
INFO  07:40:26,109 - #38 ;
INFO  07:40:26,109 - #44 {
INFO  07:40:26,109 - #49 z
INFO  07:40:26,109 - #27 =
INFO  07:40:26,109 - #49 args
INFO  07:40:26,110 - #42 [
INFO  07:40:26,110 - #52 0
INFO  07:40:26,110 - #43 ]
INFO  07:40:26,110 - #38 ;
INFO  07:40:26,110 - #49 d
INFO  07:40:26,110 - #27 =
INFO  07:40:26,110 - #49 args
INFO  07:40:26,110 - #42 [
INFO  07:40:26,110 - #52 1
INFO  07:40:26,110 - #43 ]
INFO  07:40:26,110 - #38 ;
INFO  07:40:26,110 - #15 return
INFO  07:40:26,110 - #49 z
INFO  07:40:26,110 - #22 +
INFO  07:40:26,110 - #49 d
INFO  07:40:26,111 - #38 ;
INFO  07:40:26,111 - #45 }
INFO  07:40:26,111 - #14 void
INFO  07:40:26,111 - #49 printArgs
INFO  07:40:26,111 - #40 (
INFO  07:40:26,111 - #49 int
INFO  07:40:26,111 - #49 num
INFO  07:40:26,111 - #39 ,
INFO  07:40:26,111 - #49 char
INFO  07:40:26,111 - #47 .
INFO  07:40:26,112 - #47 .
INFO  07:40:26,112 - #47 .
INFO  07:40:26,112 - #49 args
INFO  07:40:26,112 - #41 )
INFO  07:40:26,112 - #49 int
INFO  07:40:26,112 - #49 i
INFO  07:40:26,112 - #38 ;
INFO  07:40:26,112 - #44 {
INFO  07:40:26,112 - #49 i
INFO  07:40:26,112 - #27 =
INFO  07:40:26,112 - #52 0
INFO  07:40:26,112 - #38 ;
INFO  07:40:26,112 - #9 do
INFO  07:40:26,112 - #44 {
INFO  07:40:26,112 - #12 print
INFO  07:40:26,112 - #40 (
INFO  07:40:26,112 - #49 args
INFO  07:40:26,112 - #42 [
INFO  07:40:26,112 - #49 i
INFO  07:40:26,112 - #43 ]
INFO  07:40:26,112 - #41 )
INFO  07:40:26,112 - #38 ;
INFO  07:40:26,112 - #49 i
INFO  07:40:26,113 - #36 ++
INFO  07:40:26,113 - #38 ;
INFO  07:40:26,113 - #45 }
INFO  07:40:26,113 - #10 while
INFO  07:40:26,113 - #40 (
INFO  07:40:26,113 - #49 i
INFO  07:40:26,113 - #32 <
INFO  07:40:26,113 - #49 num
INFO  07:40:26,113 - #41 )
INFO  07:40:26,113 - #38 ;
INFO  07:40:26,114 - #45 }
INFO  07:40:26,114 - #49 int
INFO  07:40:26,114 - #49 inkrement
INFO  07:40:26,114 - #40 (
INFO  07:40:26,114 - #49 int
INFO  07:40:26,114 - #49 a
INFO  07:40:26,114 - #39 ,
INFO  07:40:26,114 - #49 int
INFO  07:40:26,114 - #49 inc
INFO  07:40:26,114 - #41 )
INFO  07:40:26,114 - #49 int
INFO  07:40:26,114 - #49 pom
INFO  07:40:26,114 - #38 ;
INFO  07:40:26,114 - #44 {
INFO  07:40:26,114 - #5 if
INFO  07:40:26,114 - #40 (
INFO  07:40:26,114 - #49 inc
INFO  07:40:26,114 - #28 ==
INFO  07:40:26,115 - #49 jedan
INFO  07:40:26,115 - #41 )
INFO  07:40:26,115 - #49 pom
INFO  07:40:26,115 - #27 =
INFO  07:40:26,115 - #52 1
INFO  07:40:26,115 - #38 ;
INFO  07:40:26,115 - #6 else
INFO  07:40:26,115 - #5 if
INFO  07:40:26,115 - #40 (
INFO  07:40:26,115 - #49 inc
INFO  07:40:26,115 - #28 ==
INFO  07:40:26,115 - #52 2
INFO  07:40:26,115 - #41 )
INFO  07:40:26,116 - #49 pom
INFO  07:40:26,116 - #27 =
INFO  07:40:26,116 - #49 a
INFO  07:40:26,116 - #38 ;
INFO  07:40:26,116 - #15 return
INFO  07:40:26,116 - #49 sum
INFO  07:40:26,116 - #40 (
INFO  07:40:26,116 - #49 a
INFO  07:40:26,116 - #39 ,
INFO  07:40:26,116 - #49 pom
INFO  07:40:26,116 - #41 )
INFO  07:40:26,116 - #38 ;
INFO  07:40:26,117 - #45 }
INFO  07:40:26,117 - #49 bool
INFO  07:40:26,117 - #49 verify
INFO  07:40:26,117 - #40 (
INFO  07:40:26,117 - #41 )
INFO  07:40:26,117 - #44 {
INFO  07:40:26,117 - #12 print
INFO  07:40:26,117 - #40 (
INFO  07:40:26,117 - #51 v
INFO  07:40:26,117 - #41 )
INFO  07:40:26,117 - #38 ;
INFO  07:40:26,117 - #15 return
INFO  07:40:26,117 - #50 false
INFO  07:40:26,117 - #38 ;
INFO  07:40:26,117 - #45 }
INFO  07:40:26,117 - #14 void
INFO  07:40:26,117 - #49 main
INFO  07:40:26,117 - #40 (
INFO  07:40:26,117 - #41 )
INFO  07:40:26,117 - #44 {
INFO  07:40:26,117 - #12 print
INFO  07:40:26,117 - #40 (
INFO  07:40:26,117 - #49 eol
INFO  07:40:26,117 - #41 )
INFO  07:40:26,117 - #38 ;
INFO  07:40:26,117 - #49 printArgs
INFO  07:40:26,117 - #40 (
INFO  07:40:26,117 - #52 5
INFO  07:40:26,117 - #39 ,
INFO  07:40:26,117 - #51 t
INFO  07:40:26,117 - #39 ,
INFO  07:40:26,117 - #51 e
INFO  07:40:26,117 - #39 ,
INFO  07:40:26,117 - #51 s
INFO  07:40:26,117 - #39 ,
INFO  07:40:26,117 - #51 t
INFO  07:40:26,117 - #39 ,
INFO  07:40:26,117 - #51 B
INFO  07:40:26,117 - #41 )
INFO  07:40:26,117 - #38 ;
INFO  07:40:26,118 - #45 }
INFO  07:40:26,118 - #45 }
INFO  07:40:26,121 - Line 20: Using local variable name: z
INFO  07:40:26,121 - Line 20: Access to array element detected. Array name: args
INFO  07:40:26,121 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:40:26,121 - Line 21: Using local variable name: d
INFO  07:40:26,121 - Line 21: Access to array element detected. Array name: args
INFO  07:40:26,121 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:40:26,121 - Line 22: Using local variable name: z
INFO  07:40:26,121 - Line 22: Using local variable name: d
INFO  07:40:26,121 - Line 28: Using local variable name: i
INFO  07:40:26,122 - Line 30: Using local variable name: i
INFO  07:40:26,122 - Line 30: Access to array element detected. Array name: args
INFO  07:40:26,122 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:40:26,122 - Line 31: Using local variable name: i
INFO  07:40:26,122 - Line 32: Using local variable name: i
INFO  07:40:26,122 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:40:26,122 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:40:26,122 - Line 37: Using local variable name: pom
INFO  07:40:26,122 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:40:26,122 - Line 38: Using local variable name: pom
INFO  07:40:26,122 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:40:26,122 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:40:26,122 - Line 40: Using local variable name: pom
INFO  07:40:26,122 - Line 40: Method Call detected. Method name: sum
INFO  07:40:26,122 - Method sum has varArgs with 2 args
INFO  07:40:26,122 - Line 51: Method Call detected. Method name: printArgs
INFO  07:40:26,122 - Method printArgs has varArgs with 5 args
INFO  07:40:30,689 - #2 program
INFO  07:40:30,689 - #49 test302
INFO  07:40:30,689 - #7 const
INFO  07:40:30,689 - #49 int
INFO  07:40:30,689 - #49 jedan
INFO  07:40:30,690 - #27 =
INFO  07:40:30,690 - #52 1
INFO  07:40:30,690 - #38 ;
INFO  07:40:30,690 - #49 int
INFO  07:40:30,690 - #49 i
INFO  07:40:30,690 - #38 ;
INFO  07:40:30,690 - #49 bool
INFO  07:40:30,690 - #49 ibool
INFO  07:40:30,691 - #38 ;
INFO  07:40:30,691 - #49 int
INFO  07:40:30,691 - #49 niz2
INFO  07:40:30,691 - #38 ;
INFO  07:40:30,691 - #49 int
INFO  07:40:30,691 - #49 niz
INFO  07:40:30,691 - #42 [
INFO  07:40:30,691 - #43 ]
INFO  07:40:30,691 - #38 ;
INFO  07:40:30,691 - #49 int
INFO  07:40:30,691 - #49 a
INFO  07:40:30,691 - #38 ;
INFO  07:40:30,691 - #44 {
INFO  07:40:30,691 - #49 int
INFO  07:40:30,691 - #49 sum
INFO  07:40:30,692 - #40 (
INFO  07:40:30,692 - #49 int
INFO  07:40:30,692 - #47 .
INFO  07:40:30,692 - #47 .
INFO  07:40:30,692 - #47 .
INFO  07:40:30,692 - #49 args
INFO  07:40:30,692 - #41 )
INFO  07:40:30,692 - #49 int
INFO  07:40:30,692 - #49 z
INFO  07:40:30,692 - #39 ,
INFO  07:40:30,693 - #49 d
INFO  07:40:30,693 - #38 ;
INFO  07:40:30,693 - #44 {
INFO  07:40:30,693 - #49 z
INFO  07:40:30,693 - #27 =
INFO  07:40:30,693 - #49 args
INFO  07:40:30,693 - #42 [
INFO  07:40:30,693 - #52 0
INFO  07:40:30,694 - #43 ]
INFO  07:40:30,694 - #38 ;
INFO  07:40:30,694 - #49 d
INFO  07:40:30,694 - #27 =
INFO  07:40:30,694 - #49 args
INFO  07:40:30,694 - #42 [
INFO  07:40:30,694 - #52 1
INFO  07:40:30,694 - #43 ]
INFO  07:40:30,694 - #38 ;
INFO  07:40:30,694 - #15 return
INFO  07:40:30,694 - #49 z
INFO  07:40:30,694 - #22 +
INFO  07:40:30,694 - #49 d
INFO  07:40:30,695 - #38 ;
INFO  07:40:30,695 - #45 }
INFO  07:40:30,695 - #14 void
INFO  07:40:30,695 - #49 printArgs
INFO  07:40:30,695 - #40 (
INFO  07:40:30,695 - #49 int
INFO  07:40:30,695 - #49 num
INFO  07:40:30,695 - #39 ,
INFO  07:40:30,695 - #49 char
INFO  07:40:30,695 - #47 .
INFO  07:40:30,695 - #47 .
INFO  07:40:30,695 - #47 .
INFO  07:40:30,695 - #49 args
INFO  07:40:30,695 - #41 )
INFO  07:40:30,695 - #49 int
INFO  07:40:30,696 - #49 i
INFO  07:40:30,696 - #38 ;
INFO  07:40:30,696 - #44 {
INFO  07:40:30,696 - #49 i
INFO  07:40:30,696 - #27 =
INFO  07:40:30,696 - #52 0
INFO  07:40:30,696 - #38 ;
INFO  07:40:30,696 - #9 do
INFO  07:40:30,696 - #44 {
INFO  07:40:30,696 - #12 print
INFO  07:40:30,696 - #40 (
INFO  07:40:30,696 - #49 args
INFO  07:40:30,696 - #42 [
INFO  07:40:30,696 - #49 i
INFO  07:40:30,696 - #43 ]
INFO  07:40:30,696 - #41 )
INFO  07:40:30,696 - #38 ;
INFO  07:40:30,696 - #49 i
INFO  07:40:30,696 - #36 ++
INFO  07:40:30,696 - #38 ;
INFO  07:40:30,696 - #45 }
INFO  07:40:30,697 - #10 while
INFO  07:40:30,697 - #40 (
INFO  07:40:30,697 - #49 i
INFO  07:40:30,697 - #32 <
INFO  07:40:30,697 - #49 num
INFO  07:40:30,697 - #41 )
INFO  07:40:30,697 - #38 ;
INFO  07:40:30,698 - #45 }
INFO  07:40:30,698 - #49 int
INFO  07:40:30,698 - #49 inkrement
INFO  07:40:30,698 - #40 (
INFO  07:40:30,698 - #49 int
INFO  07:40:30,698 - #49 a
INFO  07:40:30,698 - #39 ,
INFO  07:40:30,698 - #49 int
INFO  07:40:30,698 - #49 inc
INFO  07:40:30,698 - #41 )
INFO  07:40:30,698 - #49 int
INFO  07:40:30,698 - #49 pom
INFO  07:40:30,698 - #38 ;
INFO  07:40:30,698 - #44 {
INFO  07:40:30,698 - #5 if
INFO  07:40:30,698 - #40 (
INFO  07:40:30,698 - #49 inc
INFO  07:40:30,698 - #28 ==
INFO  07:40:30,698 - #49 jedan
INFO  07:40:30,698 - #41 )
INFO  07:40:30,698 - #49 pom
INFO  07:40:30,699 - #27 =
INFO  07:40:30,699 - #52 1
INFO  07:40:30,699 - #38 ;
INFO  07:40:30,699 - #6 else
INFO  07:40:30,699 - #5 if
INFO  07:40:30,699 - #40 (
INFO  07:40:30,699 - #49 inc
INFO  07:40:30,699 - #28 ==
INFO  07:40:30,699 - #52 2
INFO  07:40:30,699 - #41 )
INFO  07:40:30,699 - #49 pom
INFO  07:40:30,700 - #27 =
INFO  07:40:30,700 - #49 a
INFO  07:40:30,700 - #38 ;
INFO  07:40:30,700 - #15 return
INFO  07:40:30,700 - #49 sum
INFO  07:40:30,700 - #40 (
INFO  07:40:30,700 - #49 a
INFO  07:40:30,700 - #39 ,
INFO  07:40:30,700 - #49 pom
INFO  07:40:30,700 - #41 )
INFO  07:40:30,700 - #38 ;
INFO  07:40:30,700 - #45 }
INFO  07:40:30,700 - #49 bool
INFO  07:40:30,700 - #49 verify
INFO  07:40:30,700 - #40 (
INFO  07:40:30,700 - #41 )
INFO  07:40:30,701 - #44 {
INFO  07:40:30,701 - #12 print
INFO  07:40:30,701 - #40 (
INFO  07:40:30,701 - #51 v
INFO  07:40:30,701 - #41 )
INFO  07:40:30,701 - #38 ;
INFO  07:40:30,701 - #15 return
INFO  07:40:30,701 - #50 false
INFO  07:40:30,701 - #38 ;
INFO  07:40:30,701 - #45 }
INFO  07:40:30,701 - #14 void
INFO  07:40:30,701 - #49 main
INFO  07:40:30,701 - #40 (
INFO  07:40:30,701 - #41 )
INFO  07:40:30,701 - #44 {
INFO  07:40:30,701 - #12 print
INFO  07:40:30,701 - #40 (
INFO  07:40:30,701 - #49 eol
INFO  07:40:30,701 - #41 )
INFO  07:40:30,701 - #38 ;
INFO  07:40:30,701 - #49 printArgs
INFO  07:40:30,701 - #40 (
INFO  07:40:30,701 - #52 5
INFO  07:40:30,701 - #39 ,
INFO  07:40:30,701 - #51 t
INFO  07:40:30,701 - #39 ,
INFO  07:40:30,701 - #51 e
INFO  07:40:30,701 - #39 ,
INFO  07:40:30,701 - #51 s
INFO  07:40:30,701 - #39 ,
INFO  07:40:30,701 - #51 t
INFO  07:40:30,701 - #39 ,
INFO  07:40:30,701 - #51 B
INFO  07:40:30,701 - #41 )
INFO  07:40:30,701 - #38 ;
INFO  07:40:30,701 - #45 }
INFO  07:40:30,701 - #45 }
INFO  07:40:30,705 - Line 20: Using local variable name: z
INFO  07:40:30,705 - Line 20: Access to array element detected. Array name: args
INFO  07:40:30,705 - Line 20: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:40:30,705 - Line 21: Using local variable name: d
INFO  07:40:30,705 - Line 21: Access to array element detected. Array name: args
INFO  07:40:30,705 - Line 21: Access to formal argument detected. Method name: sum, argument name: args
INFO  07:40:30,705 - Line 22: Using local variable name: z
INFO  07:40:30,706 - Line 22: Using local variable name: d
INFO  07:40:30,706 - Line 28: Using local variable name: i
INFO  07:40:30,706 - Line 30: Using local variable name: i
INFO  07:40:30,706 - Line 30: Access to array element detected. Array name: args
INFO  07:40:30,706 - Line 30: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:40:30,706 - Line 31: Using local variable name: i
INFO  07:40:30,706 - Line 32: Using local variable name: i
INFO  07:40:30,706 - Line 32: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:40:30,706 - Line 37: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:40:30,706 - Line 37: Using local variable name: pom
INFO  07:40:30,706 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: inc
INFO  07:40:30,706 - Line 38: Using local variable name: pom
INFO  07:40:30,706 - Line 38: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:40:30,706 - Line 40: Access to formal argument detected. Method name: inkrement, argument name: a
INFO  07:40:30,706 - Line 40: Using local variable name: pom
INFO  07:40:30,706 - Line 40: Method Call detected. Method name: sum
INFO  07:40:30,706 - Method sum has varArgs with 2 args
INFO  07:40:30,706 - Line 51: Method Call detected. Method name: printArgs
INFO  07:40:30,706 - Method printArgs has varArgs with 5 args
INFO  07:41:20,698 - #2 program
INFO  07:41:20,698 - #49 test302
INFO  07:41:20,698 - #7 const
INFO  07:41:20,699 - #49 int
INFO  07:41:20,699 - #49 jedan
INFO  07:41:20,699 - #27 =
INFO  07:41:20,699 - #52 1
INFO  07:41:20,699 - #38 ;
INFO  07:41:20,699 - #49 int
INFO  07:41:20,699 - #49 i
INFO  07:41:20,699 - #38 ;
INFO  07:41:20,700 - #49 bool
INFO  07:41:20,700 - #49 ibool
INFO  07:41:20,700 - #38 ;
INFO  07:41:20,700 - #49 int
INFO  07:41:20,700 - #49 niz2
INFO  07:41:20,700 - #38 ;
INFO  07:41:20,700 - #49 int
INFO  07:41:20,700 - #49 niz
INFO  07:41:20,700 - #42 [
INFO  07:41:20,700 - #43 ]
INFO  07:41:20,700 - #38 ;
INFO  07:41:20,701 - #49 int
INFO  07:41:20,701 - #49 a
INFO  07:41:20,701 - #38 ;
INFO  07:41:20,701 - #44 {
INFO  07:41:20,701 - #14 void
INFO  07:41:20,701 - #49 printArgs
INFO  07:41:20,701 - #40 (
INFO  07:41:20,701 - #49 int
INFO  07:41:20,701 - #49 num
INFO  07:41:20,701 - #39 ,
INFO  07:41:20,702 - #49 char
INFO  07:41:20,702 - #47 .
INFO  07:41:20,702 - #47 .
INFO  07:41:20,702 - #47 .
INFO  07:41:20,702 - #49 args
INFO  07:41:20,702 - #41 )
INFO  07:41:20,702 - #49 int
INFO  07:41:20,702 - #49 i
INFO  07:41:20,702 - #38 ;
INFO  07:41:20,702 - #44 {
INFO  07:41:20,702 - #49 i
INFO  07:41:20,703 - #27 =
INFO  07:41:20,703 - #52 0
INFO  07:41:20,703 - #38 ;
INFO  07:41:20,703 - #9 do
INFO  07:41:20,703 - #44 {
INFO  07:41:20,704 - #12 print
INFO  07:41:20,704 - #40 (
INFO  07:41:20,704 - #49 args
INFO  07:41:20,704 - #42 [
INFO  07:41:20,704 - #49 i
INFO  07:41:20,704 - #43 ]
INFO  07:41:20,704 - #41 )
INFO  07:41:20,704 - #38 ;
INFO  07:41:20,704 - #49 i
INFO  07:41:20,704 - #36 ++
INFO  07:41:20,704 - #38 ;
INFO  07:41:20,704 - #45 }
INFO  07:41:20,704 - #10 while
INFO  07:41:20,704 - #40 (
INFO  07:41:20,705 - #49 i
INFO  07:41:20,705 - #32 <
INFO  07:41:20,705 - #49 num
INFO  07:41:20,705 - #41 )
INFO  07:41:20,705 - #38 ;
INFO  07:41:20,706 - #45 }
INFO  07:41:20,706 - #14 void
INFO  07:41:20,706 - #49 main
INFO  07:41:20,706 - #40 (
INFO  07:41:20,706 - #41 )
INFO  07:41:20,706 - #44 {
INFO  07:41:20,706 - #12 print
INFO  07:41:20,706 - #40 (
INFO  07:41:20,706 - #49 eol
INFO  07:41:20,706 - #41 )
INFO  07:41:20,706 - #38 ;
INFO  07:41:20,706 - #49 printArgs
INFO  07:41:20,706 - #40 (
INFO  07:41:20,706 - #52 5
INFO  07:41:20,706 - #39 ,
INFO  07:41:20,706 - #51 t
INFO  07:41:20,706 - #39 ,
INFO  07:41:20,706 - #51 e
INFO  07:41:20,706 - #39 ,
INFO  07:41:20,707 - #51 s
INFO  07:41:20,707 - #39 ,
INFO  07:41:20,707 - #51 t
INFO  07:41:20,707 - #39 ,
INFO  07:41:20,707 - #51 B
INFO  07:41:20,707 - #41 )
INFO  07:41:20,707 - #38 ;
INFO  07:41:20,707 - #45 }
INFO  07:41:20,707 - #45 }
INFO  07:41:20,711 - Line 19: Using local variable name: i
INFO  07:41:20,711 - Line 21: Using local variable name: i
INFO  07:41:20,711 - Line 21: Access to array element detected. Array name: args
INFO  07:41:20,711 - Line 21: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:41:20,711 - Line 22: Using local variable name: i
INFO  07:41:20,711 - Line 23: Using local variable name: i
INFO  07:41:20,711 - Line 23: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:41:20,711 - Line 29: Method Call detected. Method name: printArgs
INFO  07:41:20,711 - Method printArgs has varArgs with 5 args
INFO  07:48:36,336 - #2 program
INFO  07:48:36,336 - #49 test302
INFO  07:48:36,336 - #7 const
INFO  07:48:36,337 - #49 int
INFO  07:48:36,337 - #49 jedan
INFO  07:48:36,337 - #27 =
INFO  07:48:36,337 - #52 1
INFO  07:48:36,337 - #38 ;
INFO  07:48:36,337 - #49 int
INFO  07:48:36,337 - #49 i
INFO  07:48:36,338 - #38 ;
INFO  07:48:36,338 - #49 bool
INFO  07:48:36,338 - #49 ibool
INFO  07:48:36,338 - #38 ;
INFO  07:48:36,338 - #49 int
INFO  07:48:36,338 - #49 niz2
INFO  07:48:36,338 - #38 ;
INFO  07:48:36,338 - #49 int
INFO  07:48:36,338 - #49 niz
INFO  07:48:36,338 - #42 [
INFO  07:48:36,338 - #43 ]
INFO  07:48:36,338 - #38 ;
INFO  07:48:36,339 - #49 int
INFO  07:48:36,339 - #49 a
INFO  07:48:36,339 - #38 ;
INFO  07:48:36,339 - #44 {
INFO  07:48:36,339 - #14 void
INFO  07:48:36,339 - #49 printArgs
INFO  07:48:36,339 - #40 (
INFO  07:48:36,339 - #49 int
INFO  07:48:36,340 - #49 num
INFO  07:48:36,340 - #39 ,
INFO  07:48:36,340 - #49 char
INFO  07:48:36,340 - #47 .
INFO  07:48:36,340 - #47 .
INFO  07:48:36,340 - #47 .
INFO  07:48:36,340 - #49 args
INFO  07:48:36,340 - #41 )
INFO  07:48:36,340 - #49 int
INFO  07:48:36,340 - #49 i
INFO  07:48:36,340 - #38 ;
INFO  07:48:36,341 - #44 {
INFO  07:48:36,341 - #49 i
INFO  07:48:36,341 - #27 =
INFO  07:48:36,341 - #52 0
INFO  07:48:36,341 - #38 ;
INFO  07:48:36,341 - #9 do
INFO  07:48:36,341 - #44 {
INFO  07:48:36,342 - #12 print
INFO  07:48:36,342 - #40 (
INFO  07:48:36,342 - #49 args
INFO  07:48:36,342 - #42 [
INFO  07:48:36,342 - #49 i
INFO  07:48:36,342 - #43 ]
INFO  07:48:36,342 - #41 )
INFO  07:48:36,342 - #38 ;
INFO  07:48:36,342 - #49 i
INFO  07:48:36,342 - #36 ++
INFO  07:48:36,342 - #38 ;
INFO  07:48:36,343 - #45 }
INFO  07:48:36,343 - #10 while
INFO  07:48:36,343 - #40 (
INFO  07:48:36,343 - #49 i
INFO  07:48:36,343 - #32 <
INFO  07:48:36,343 - #49 num
INFO  07:48:36,343 - #41 )
INFO  07:48:36,343 - #38 ;
INFO  07:48:36,344 - #45 }
INFO  07:48:36,344 - #14 void
INFO  07:48:36,344 - #49 main
INFO  07:48:36,344 - #40 (
INFO  07:48:36,344 - #41 )
INFO  07:48:36,344 - #44 {
INFO  07:48:36,344 - #12 print
INFO  07:48:36,344 - #40 (
INFO  07:48:36,344 - #49 eol
INFO  07:48:36,344 - #41 )
INFO  07:48:36,344 - #38 ;
INFO  07:48:36,344 - #49 printArgs
INFO  07:48:36,344 - #40 (
INFO  07:48:36,344 - #52 5
INFO  07:48:36,344 - #39 ,
INFO  07:48:36,344 - #51 t
INFO  07:48:36,344 - #39 ,
INFO  07:48:36,345 - #51 e
INFO  07:48:36,345 - #39 ,
INFO  07:48:36,345 - #51 s
INFO  07:48:36,345 - #39 ,
INFO  07:48:36,345 - #51 t
INFO  07:48:36,345 - #39 ,
INFO  07:48:36,345 - #51 B
INFO  07:48:36,345 - #41 )
INFO  07:48:36,345 - #38 ;
INFO  07:48:36,345 - #45 }
INFO  07:48:36,345 - #45 }
INFO  07:48:36,349 - Line 19: Using local variable name: i
INFO  07:48:36,349 - Line 21: Using local variable name: i
INFO  07:48:36,349 - Line 21: Access to array element detected. Array name: args
INFO  07:48:36,349 - Line 21: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:48:36,349 - Line 22: Using local variable name: i
INFO  07:48:36,349 - Line 23: Using local variable name: i
INFO  07:48:36,349 - Line 23: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:48:36,349 - Line 29: Method Call detected. Method name: printArgs
INFO  07:48:36,349 - Method printArgs has varArgs with 5 args
INFO  07:50:36,576 - #2 program
INFO  07:50:36,576 - #49 test302
INFO  07:50:36,576 - #7 const
INFO  07:50:36,577 - #49 int
INFO  07:50:36,577 - #49 jedan
INFO  07:50:36,577 - #27 =
INFO  07:50:36,577 - #52 1
INFO  07:50:36,577 - #38 ;
INFO  07:50:36,577 - #49 int
INFO  07:50:36,578 - #49 i
INFO  07:50:36,578 - #38 ;
INFO  07:50:36,578 - #49 bool
INFO  07:50:36,578 - #49 ibool
INFO  07:50:36,578 - #38 ;
INFO  07:50:36,578 - #49 int
INFO  07:50:36,578 - #49 niz2
INFO  07:50:36,579 - #38 ;
INFO  07:50:36,579 - #49 int
INFO  07:50:36,579 - #49 niz
INFO  07:50:36,579 - #42 [
INFO  07:50:36,579 - #43 ]
INFO  07:50:36,579 - #38 ;
INFO  07:50:36,579 - #49 int
INFO  07:50:36,579 - #49 a
INFO  07:50:36,579 - #38 ;
INFO  07:50:36,579 - #44 {
INFO  07:50:36,579 - #14 void
INFO  07:50:36,579 - #49 printArgs
INFO  07:50:36,579 - #40 (
INFO  07:50:36,580 - #49 int
INFO  07:50:36,580 - #49 num
INFO  07:50:36,580 - #39 ,
INFO  07:50:36,580 - #49 char
INFO  07:50:36,580 - #47 .
INFO  07:50:36,580 - #47 .
INFO  07:50:36,580 - #47 .
INFO  07:50:36,580 - #49 args
INFO  07:50:36,580 - #41 )
INFO  07:50:36,580 - #49 int
INFO  07:50:36,581 - #49 i
INFO  07:50:36,581 - #38 ;
INFO  07:50:36,581 - #44 {
INFO  07:50:36,581 - #49 i
INFO  07:50:36,581 - #27 =
INFO  07:50:36,582 - #52 0
INFO  07:50:36,582 - #38 ;
INFO  07:50:36,582 - #9 do
INFO  07:50:36,582 - #44 {
INFO  07:50:36,582 - #12 print
INFO  07:50:36,582 - #40 (
INFO  07:50:36,582 - #49 args
INFO  07:50:36,582 - #42 [
INFO  07:50:36,583 - #49 i
INFO  07:50:36,583 - #43 ]
INFO  07:50:36,583 - #41 )
INFO  07:50:36,583 - #38 ;
INFO  07:50:36,583 - #49 i
INFO  07:50:36,583 - #36 ++
INFO  07:50:36,583 - #38 ;
INFO  07:50:36,583 - #45 }
INFO  07:50:36,583 - #10 while
INFO  07:50:36,584 - #40 (
INFO  07:50:36,584 - #49 i
INFO  07:50:36,584 - #32 <
INFO  07:50:36,584 - #49 num
INFO  07:50:36,584 - #41 )
INFO  07:50:36,584 - #38 ;
INFO  07:50:36,585 - #45 }
INFO  07:50:36,585 - #14 void
INFO  07:50:36,585 - #49 main
INFO  07:50:36,585 - #40 (
INFO  07:50:36,585 - #41 )
INFO  07:50:36,585 - #44 {
INFO  07:50:36,585 - #12 print
INFO  07:50:36,585 - #40 (
INFO  07:50:36,585 - #49 eol
INFO  07:50:36,585 - #41 )
INFO  07:50:36,585 - #38 ;
INFO  07:50:36,585 - #49 printArgs
INFO  07:50:36,585 - #40 (
INFO  07:50:36,585 - #52 5
INFO  07:50:36,585 - #39 ,
INFO  07:50:36,586 - #51 t
INFO  07:50:36,586 - #39 ,
INFO  07:50:36,586 - #51 e
INFO  07:50:36,586 - #39 ,
INFO  07:50:36,586 - #51 s
INFO  07:50:36,586 - #39 ,
INFO  07:50:36,586 - #51 t
INFO  07:50:36,586 - #39 ,
INFO  07:50:36,586 - #51 B
INFO  07:50:36,586 - #41 )
INFO  07:50:36,586 - #38 ;
INFO  07:50:36,586 - #45 }
INFO  07:50:36,586 - #45 }
INFO  07:50:40,127 - Line 19: Using local variable name: i
INFO  07:50:40,128 - Line 21: Using local variable name: i
INFO  07:50:40,128 - Line 21: Access to array element detected. Array name: args
INFO  07:50:40,128 - Line 21: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:50:40,128 - Line 22: Using local variable name: i
INFO  07:50:40,128 - Line 23: Using local variable name: i
INFO  07:50:40,128 - Line 23: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:50:40,128 - Line 29: Method Call detected. Method name: printArgs
INFO  07:50:40,128 - Method printArgs has varArgs with 5 args
INFO  07:54:25,719 - #2 program
INFO  07:54:25,719 - #49 test302
INFO  07:54:25,719 - #7 const
INFO  07:54:25,720 - #49 int
INFO  07:54:25,720 - #49 jedan
INFO  07:54:25,720 - #27 =
INFO  07:54:25,720 - #52 1
INFO  07:54:25,720 - #38 ;
INFO  07:54:25,721 - #49 int
INFO  07:54:25,721 - #49 i
INFO  07:54:25,721 - #38 ;
INFO  07:54:25,721 - #49 bool
INFO  07:54:25,721 - #49 ibool
INFO  07:54:25,721 - #38 ;
INFO  07:54:25,721 - #49 int
INFO  07:54:25,721 - #49 niz2
INFO  07:54:25,722 - #38 ;
INFO  07:54:25,722 - #49 int
INFO  07:54:25,722 - #49 niz
INFO  07:54:25,722 - #42 [
INFO  07:54:25,722 - #43 ]
INFO  07:54:25,722 - #38 ;
INFO  07:54:25,722 - #49 int
INFO  07:54:25,722 - #49 a
INFO  07:54:25,722 - #38 ;
INFO  07:54:25,722 - #44 {
INFO  07:54:25,722 - #14 void
INFO  07:54:25,722 - #49 printArgs
INFO  07:54:25,722 - #40 (
INFO  07:54:25,723 - #49 int
INFO  07:54:25,723 - #49 num
INFO  07:54:25,723 - #39 ,
INFO  07:54:25,723 - #49 char
INFO  07:54:25,723 - #47 .
INFO  07:54:25,723 - #47 .
INFO  07:54:25,723 - #47 .
INFO  07:54:25,723 - #49 args
INFO  07:54:25,723 - #41 )
INFO  07:54:25,723 - #49 int
INFO  07:54:25,724 - #49 i
INFO  07:54:25,724 - #38 ;
INFO  07:54:25,724 - #44 {
INFO  07:54:25,724 - #49 i
INFO  07:54:25,724 - #27 =
INFO  07:54:25,724 - #52 0
INFO  07:54:25,724 - #38 ;
INFO  07:54:25,725 - #9 do
INFO  07:54:25,725 - #44 {
INFO  07:54:25,725 - #12 print
INFO  07:54:25,725 - #40 (
INFO  07:54:25,725 - #49 args
INFO  07:54:25,725 - #42 [
INFO  07:54:25,725 - #49 i
INFO  07:54:25,726 - #43 ]
INFO  07:54:25,726 - #41 )
INFO  07:54:25,726 - #38 ;
INFO  07:54:25,726 - #49 i
INFO  07:54:25,726 - #36 ++
INFO  07:54:25,726 - #38 ;
INFO  07:54:25,726 - #45 }
INFO  07:54:25,726 - #10 while
INFO  07:54:25,726 - #40 (
INFO  07:54:25,726 - #49 i
INFO  07:54:25,726 - #32 <
INFO  07:54:25,727 - #49 num
INFO  07:54:25,727 - #41 )
INFO  07:54:25,727 - #38 ;
INFO  07:54:25,727 - #45 }
INFO  07:54:25,727 - #14 void
INFO  07:54:25,728 - #49 main
INFO  07:54:25,728 - #40 (
INFO  07:54:25,728 - #41 )
INFO  07:54:25,728 - #44 {
INFO  07:54:25,728 - #12 print
INFO  07:54:25,728 - #40 (
INFO  07:54:25,728 - #49 eol
INFO  07:54:25,728 - #41 )
INFO  07:54:25,728 - #38 ;
INFO  07:54:25,728 - #49 printArgs
INFO  07:54:25,728 - #40 (
INFO  07:54:25,728 - #52 5
INFO  07:54:25,728 - #39 ,
INFO  07:54:25,728 - #51 t
INFO  07:54:25,728 - #39 ,
INFO  07:54:25,728 - #51 e
INFO  07:54:25,728 - #39 ,
INFO  07:54:25,728 - #51 s
INFO  07:54:25,728 - #39 ,
INFO  07:54:25,729 - #51 t
INFO  07:54:25,729 - #39 ,
INFO  07:54:25,729 - #51 B
INFO  07:54:25,729 - #41 )
INFO  07:54:25,729 - #38 ;
INFO  07:54:25,729 - #45 }
INFO  07:54:25,729 - #45 }
INFO  07:54:27,995 - Line 19: Using local variable name: i
INFO  07:54:27,995 - Line 21: Using local variable name: i
INFO  07:54:27,995 - Line 21: Access to array element detected. Array name: args
INFO  07:54:27,995 - Line 21: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:54:27,995 - Line 22: Using local variable name: i
INFO  07:54:27,995 - Line 23: Using local variable name: i
INFO  07:54:27,995 - Line 23: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:54:27,995 - Line 29: Method Call detected. Method name: printArgs
INFO  07:54:27,996 - Method printArgs has varArgs with 5 args
INFO  07:54:50,656 - #2 program
INFO  07:54:50,656 - #49 test302
INFO  07:54:50,656 - #7 const
INFO  07:54:50,656 - #49 int
INFO  07:54:50,656 - #49 jedan
INFO  07:54:50,657 - #27 =
INFO  07:54:50,657 - #52 1
INFO  07:54:50,657 - #38 ;
INFO  07:54:50,657 - #49 int
INFO  07:54:50,657 - #49 i
INFO  07:54:50,657 - #38 ;
INFO  07:54:50,658 - #49 bool
INFO  07:54:50,658 - #49 ibool
INFO  07:54:50,658 - #38 ;
INFO  07:54:50,658 - #49 int
INFO  07:54:50,658 - #49 niz2
INFO  07:54:50,658 - #38 ;
INFO  07:54:50,658 - #49 int
INFO  07:54:50,658 - #49 niz
INFO  07:54:50,658 - #42 [
INFO  07:54:50,658 - #43 ]
INFO  07:54:50,658 - #38 ;
INFO  07:54:50,658 - #49 int
INFO  07:54:50,658 - #49 a
INFO  07:54:50,658 - #38 ;
INFO  07:54:50,658 - #44 {
INFO  07:54:50,658 - #14 void
INFO  07:54:50,659 - #49 printArgs
INFO  07:54:50,659 - #40 (
INFO  07:54:50,659 - #49 int
INFO  07:54:50,659 - #49 num
INFO  07:54:50,659 - #39 ,
INFO  07:54:50,659 - #49 char
INFO  07:54:50,659 - #47 .
INFO  07:54:50,659 - #47 .
INFO  07:54:50,659 - #47 .
INFO  07:54:50,659 - #49 args
INFO  07:54:50,659 - #41 )
INFO  07:54:50,659 - #49 int
INFO  07:54:50,660 - #49 i
INFO  07:54:50,660 - #38 ;
INFO  07:54:50,660 - #44 {
INFO  07:54:50,660 - #49 i
INFO  07:54:50,660 - #27 =
INFO  07:54:50,660 - #52 0
INFO  07:54:50,660 - #38 ;
INFO  07:54:50,661 - #9 do
INFO  07:54:50,661 - #44 {
INFO  07:54:50,661 - #12 print
INFO  07:54:50,661 - #40 (
INFO  07:54:50,661 - #49 args
INFO  07:54:50,661 - #42 [
INFO  07:54:50,661 - #49 i
INFO  07:54:50,661 - #43 ]
INFO  07:54:50,661 - #41 )
INFO  07:54:50,662 - #38 ;
INFO  07:54:50,662 - #49 i
INFO  07:54:50,662 - #36 ++
INFO  07:54:50,662 - #38 ;
INFO  07:54:50,662 - #45 }
INFO  07:54:50,662 - #10 while
INFO  07:54:50,662 - #40 (
INFO  07:54:50,662 - #49 i
INFO  07:54:50,662 - #32 <
INFO  07:54:50,662 - #49 num
INFO  07:54:50,663 - #41 )
INFO  07:54:50,663 - #38 ;
INFO  07:54:50,663 - #45 }
INFO  07:54:50,663 - #14 void
INFO  07:54:50,663 - #49 main
INFO  07:54:50,663 - #40 (
INFO  07:54:50,663 - #41 )
INFO  07:54:50,663 - #44 {
INFO  07:54:50,663 - #12 print
INFO  07:54:50,663 - #40 (
INFO  07:54:50,663 - #49 eol
INFO  07:54:50,663 - #41 )
INFO  07:54:50,663 - #38 ;
INFO  07:54:50,664 - #49 printArgs
INFO  07:54:50,664 - #40 (
INFO  07:54:50,664 - #52 5
INFO  07:54:50,664 - #39 ,
INFO  07:54:50,664 - #51 t
INFO  07:54:50,664 - #39 ,
INFO  07:54:50,664 - #51 e
INFO  07:54:50,664 - #39 ,
INFO  07:54:50,664 - #51 s
INFO  07:54:50,664 - #39 ,
INFO  07:54:50,664 - #51 t
INFO  07:54:50,664 - #39 ,
INFO  07:54:50,664 - #51 B
INFO  07:54:50,664 - #41 )
INFO  07:54:50,664 - #38 ;
INFO  07:54:50,665 - #45 }
INFO  07:54:50,665 - #45 }
INFO  07:54:50,668 - Line 19: Using local variable name: i
INFO  07:54:50,668 - Line 21: Using local variable name: i
INFO  07:54:50,668 - Line 21: Access to array element detected. Array name: args
INFO  07:54:50,668 - Line 21: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:54:50,668 - Line 22: Using local variable name: i
INFO  07:54:50,668 - Line 23: Using local variable name: i
INFO  07:54:50,669 - Line 23: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:54:50,669 - Line 29: Method Call detected. Method name: printArgs
INFO  07:54:50,669 - Method printArgs has varArgs with 5 args
INFO  07:56:26,062 - #2 program
INFO  07:56:26,062 - #49 test302
INFO  07:56:26,062 - #7 const
INFO  07:56:26,063 - #49 int
INFO  07:56:26,063 - #49 jedan
INFO  07:56:26,063 - #27 =
INFO  07:56:26,063 - #52 1
INFO  07:56:26,063 - #38 ;
INFO  07:56:26,063 - #49 int
INFO  07:56:26,063 - #49 i
INFO  07:56:26,063 - #38 ;
INFO  07:56:26,064 - #49 bool
INFO  07:56:26,064 - #49 ibool
INFO  07:56:26,064 - #38 ;
INFO  07:56:26,064 - #49 int
INFO  07:56:26,064 - #49 niz2
INFO  07:56:26,064 - #38 ;
INFO  07:56:26,064 - #49 int
INFO  07:56:26,064 - #49 niz
INFO  07:56:26,064 - #42 [
INFO  07:56:26,064 - #43 ]
INFO  07:56:26,064 - #38 ;
INFO  07:56:26,065 - #49 int
INFO  07:56:26,065 - #49 a
INFO  07:56:26,065 - #38 ;
INFO  07:56:26,065 - #44 {
INFO  07:56:26,065 - #14 void
INFO  07:56:26,065 - #49 printArgs
INFO  07:56:26,065 - #40 (
INFO  07:56:26,065 - #49 int
INFO  07:56:26,065 - #49 num
INFO  07:56:26,065 - #39 ,
INFO  07:56:26,066 - #49 char
INFO  07:56:26,066 - #47 .
INFO  07:56:26,066 - #47 .
INFO  07:56:26,066 - #47 .
INFO  07:56:26,066 - #49 args
INFO  07:56:26,066 - #41 )
INFO  07:56:26,066 - #49 int
INFO  07:56:26,066 - #49 i
INFO  07:56:26,066 - #38 ;
INFO  07:56:26,066 - #44 {
INFO  07:56:26,066 - #49 i
INFO  07:56:26,067 - #27 =
INFO  07:56:26,067 - #52 0
INFO  07:56:26,067 - #38 ;
INFO  07:56:26,067 - #9 do
INFO  07:56:26,067 - #44 {
INFO  07:56:26,067 - #12 print
INFO  07:56:26,067 - #40 (
INFO  07:56:26,067 - #49 args
INFO  07:56:26,068 - #42 [
INFO  07:56:26,068 - #49 i
INFO  07:56:26,068 - #43 ]
INFO  07:56:26,068 - #41 )
INFO  07:56:26,068 - #38 ;
INFO  07:56:26,068 - #49 i
INFO  07:56:26,068 - #36 ++
INFO  07:56:26,068 - #38 ;
INFO  07:56:26,068 - #45 }
INFO  07:56:26,068 - #10 while
INFO  07:56:26,068 - #40 (
INFO  07:56:26,069 - #49 i
INFO  07:56:26,069 - #32 <
INFO  07:56:26,069 - #49 num
INFO  07:56:26,069 - #41 )
INFO  07:56:26,069 - #38 ;
INFO  07:56:26,069 - #45 }
INFO  07:56:26,069 - #14 void
INFO  07:56:26,069 - #49 main
INFO  07:56:26,070 - #40 (
INFO  07:56:26,070 - #41 )
INFO  07:56:26,070 - #44 {
INFO  07:56:26,070 - #12 print
INFO  07:56:26,070 - #40 (
INFO  07:56:26,070 - #49 eol
INFO  07:56:26,070 - #41 )
INFO  07:56:26,070 - #38 ;
INFO  07:56:26,070 - #49 printArgs
INFO  07:56:26,070 - #40 (
INFO  07:56:26,070 - #52 5
INFO  07:56:26,070 - #39 ,
INFO  07:56:26,070 - #51 t
INFO  07:56:26,070 - #39 ,
INFO  07:56:26,070 - #51 e
INFO  07:56:26,070 - #39 ,
INFO  07:56:26,070 - #51 s
INFO  07:56:26,070 - #39 ,
INFO  07:56:26,070 - #51 t
INFO  07:56:26,070 - #39 ,
INFO  07:56:26,070 - #51 B
INFO  07:56:26,070 - #41 )
INFO  07:56:26,070 - #38 ;
INFO  07:56:26,071 - #45 }
INFO  07:56:26,071 - #45 }
INFO  07:56:26,074 - Line 19: Using local variable name: i
INFO  07:56:26,074 - Line 21: Using local variable name: i
INFO  07:56:26,075 - Line 21: Access to array element detected. Array name: args
INFO  07:56:26,075 - Line 21: Access to formal argument detected. Method name: printArgs, argument name: args
INFO  07:56:26,075 - Line 22: Using local variable name: i
INFO  07:56:26,075 - Line 23: Using local variable name: i
INFO  07:56:26,075 - Line 23: Access to formal argument detected. Method name: printArgs, argument name: num
INFO  07:56:26,075 - Line 29: Method Call detected. Method name: printArgs
INFO  07:56:26,075 - Method printArgs has varArgs with 5 args
